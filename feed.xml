<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>@samwize</title>
    <description>¯\_(ツ)_/¯
</description>
    <link>https://samwize.com/</link>
    <atom:link href="https://samwize.com/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Tue, 24 Jul 2018 21:29:48 +0800</pubDate>
    <lastBuildDate>Tue, 24 Jul 2018 21:29:48 +0800</lastBuildDate>
    <generator>Jekyll v3.6.2</generator>
    
      <item>
        <title>How stringsdict and NSLocalizedString Works</title>
        <description>&lt;p&gt;When I wrote &lt;a href=&quot;/2014/04/10/everything-about-ios-localization/&quot;&gt;everything about iOS localization&lt;/a&gt;, I covered on &lt;strong&gt;plural support&lt;/strong&gt;, but was brief.&lt;/p&gt;

&lt;p&gt;This post I will explain the use of the powerful &lt;code class=&quot;highlighter-rouge&quot;&gt;.stringsdict&lt;/code&gt; with a simple use, explaining the basics, then an advanced use. Lastly I will try to explain some magic under the hood.&lt;/p&gt;

&lt;h2 id=&quot;simple-case&quot;&gt;Simple Case&lt;/h2&gt;

&lt;p&gt;It is easier to use an example and explain.&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;plist&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;version=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1.0&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;dict&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;%d file(s) are selected&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;dict&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;NSStringLocalizedFormatKey&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;%#@num_files_are@ selected&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;num_files_are&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;dict&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;NSStringFormatSpecTypeKey&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;NSStringPluralRuleType&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;NSStringFormatValueTypeKey&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;d&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;zero&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;No file is&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;one&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;A file is&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;other&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;%d files are&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dict&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dict&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dict&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/plist&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The code to use:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;numberOfFiles&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;format&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSLocalizedString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%d file(s) are selected&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;comment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;localizedString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numberOfFiles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There are 2 distinct calls here:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;You need to get the “format” using the macro &lt;code class=&quot;highlighter-rouge&quot;&gt;NSLocalizedString&lt;/code&gt;. In the code above, the variable format will be &lt;code class=&quot;highlighter-rouge&quot;&gt;%#@num_files_are@ selected&lt;/code&gt;. Note: This is not yet localized, unlike the usual localization!&lt;/li&gt;
  &lt;li&gt;Init &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt; with this format and the actual arguments, and you will get the localized string.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Basics of the XML:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;%d file(s) are selected&lt;/code&gt; is simply a key to refer to this 1 string to localize. But it is NOT necessary to have the &lt;code class=&quot;highlighter-rouge&quot;&gt;%d&lt;/code&gt; in the key. You can rename the key as eg &lt;code class=&quot;highlighter-rouge&quot;&gt;files&lt;/code&gt; and it will work. Having the &lt;code class=&quot;highlighter-rouge&quot;&gt;%d&lt;/code&gt; is more of a good convention, telling us 1 number should be provided as an argument.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;%#@num_files_are@ selected&lt;/code&gt; is known as a &lt;strong&gt;format&lt;/strong&gt;, which is made up of 1 &lt;strong&gt;variable&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;num_files_are&lt;/code&gt; and the text “ selected”.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;num_files_are&lt;/code&gt; is a key (to the variable) with a dict to explain the &lt;strong&gt;rules&lt;/strong&gt;:
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NSStringPluralRuleType&lt;/code&gt; is plural rules (there could be &lt;a href=&quot;https://developer.apple.com/library/archive/documentation/MacOSX/Conceptual/BPInternational/StringsdictFileFormat/StringsdictFileFormat.html&quot;&gt;others&lt;/a&gt; in the future)&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NSStringFormatValueTypeKey&lt;/code&gt; describe what type of argument works with this variable eg. &lt;code class=&quot;highlighter-rouge&quot;&gt;d&lt;/code&gt; for &lt;code class=&quot;highlighter-rouge&quot;&gt;Int&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;zero&lt;/code&gt; is a rule. When the argument is 0, it will use “No file is” to replace the variable &lt;code class=&quot;highlighter-rouge&quot;&gt;num_files_are&lt;/code&gt;, therefore finally forming “No file is selected”&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;one&lt;/code&gt; is another rule&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;other&lt;/code&gt; is another rule. This time, it will use “%d files are”, and the argument is used here, finally forming eg. “2 files are selected”&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/stringsdict-explained-basic.jpg&quot; alt=&quot;stringsdict explained&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;advanced-case&quot;&gt;Advanced Case&lt;/h2&gt;

&lt;p&gt;I like the example used in &lt;a href=&quot;https://www.objc.io/issues/9-strings/string-localization/#localized-format-strings&quot;&gt;objc.io&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;plist&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;version=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1.0&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;dict&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;scope.%lu out of %lu runs&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;dict&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;NSStringLocalizedFormatKey&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;%1$#@lu_completed_runs@&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;lu_completed_runs&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;dict&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;NSStringFormatSpecTypeKey&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;NSStringPluralRuleType&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;NSStringFormatValueTypeKey&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;lu&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;zero&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;No runs completed yet&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;one&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;One %2$#@lu_total_runs@&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;other&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;%lu %2$#@lu_total_runs@&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dict&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;lu_total_runs&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;dict&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;NSStringFormatSpecTypeKey&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;NSStringPluralRuleType&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;NSStringFormatValueTypeKey&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;lu&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;one&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;run completed&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;other&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;of %lu runs completed&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dict&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dict&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dict&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/plist&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The localized string requires 2 arguments:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;completedRuns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;totalRuns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;format&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSLocalizedString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;scope.%lu out of %lu runs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;comment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;completedRuns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;totalRuns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s look at the output first.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Completed runs    Total Runs    Output
------------------------------------------------------------------
0                 0+            No runs completed yet
1                 1             One run completed
1                 2+            One of x runs completed
2+                2+            x of y runs completed
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It is an advanced use because the output depends on both the arguments.&lt;/p&gt;

&lt;p&gt;The biggest difference is that this time, there are 2 variables, each with their set of rules, and one variable refer to another!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/stringsdict-explained-advanced.jpg&quot; alt=&quot;Advanced stringsdict&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The format is &lt;code class=&quot;highlighter-rouge&quot;&gt;%1$#@lu_completed_runs@&lt;/code&gt;, which uses 1 variable &lt;code class=&quot;highlighter-rouge&quot;&gt;lu_completed_runs&lt;/code&gt; (yes, just 1 variable in the format is okay), and that it is the first argument as specified by the &lt;code class=&quot;highlighter-rouge&quot;&gt;1$&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;In some of the rules for &lt;code class=&quot;highlighter-rouge&quot;&gt;lu_completed_runs&lt;/code&gt;, it uses a &lt;strong&gt;format&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;%2$#@lu_total_runs@&lt;/code&gt;, which uses another variable &lt;code class=&quot;highlighter-rouge&quot;&gt;lu_total_runs&lt;/code&gt;. This variable is the 2nd argument as specified by the &lt;code class=&quot;highlighter-rouge&quot;&gt;2$&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;The rules in &lt;code class=&quot;highlighter-rouge&quot;&gt;lu_total_runs&lt;/code&gt; will produce part of the text for &lt;code class=&quot;highlighter-rouge&quot;&gt;lu_completed_runs&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There is some recursive lookup going on :)&lt;/p&gt;

&lt;h2 id=&quot;the-puzzling-string&quot;&gt;The Puzzling String&lt;/h2&gt;

&lt;p&gt;Let’s look at the simple case again to explain something strange that goes on.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;format&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSLocalizedString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%d file(s) are selected&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;comment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// format is &quot;%#@num_files_are@ selected&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// str is &quot;1 file is selected&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you have been using &lt;a href=&quot;https://developer.apple.com/documentation/swift/string/1417691-init&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;String(format:_:)&lt;/code&gt;&lt;/a&gt;, you know it can format the string and replace with the arguments.&lt;/p&gt;

&lt;p&gt;But it is hard to digest for the format &lt;code class=&quot;highlighter-rouge&quot;&gt;%#@num_files_are@ selected&lt;/code&gt;, a mere string.. How does a &lt;strong&gt;mere string&lt;/strong&gt; have access to the rules in stringsdict?&lt;/p&gt;

&lt;p&gt;The string &lt;code class=&quot;highlighter-rouge&quot;&gt;%#@num_files_are@ selected&lt;/code&gt; is not a mere string. It knows the rules, for a particular locale.&lt;/p&gt;

&lt;p&gt;Try this and it will NOT work:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// let format = NSLocalizedString(&quot;%d file(s) are selected&quot;, comment: &quot;&quot;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;format&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;%#@num_files_are@ selected&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This proves that the macro &lt;code class=&quot;highlighter-rouge&quot;&gt;NSLocalizedString&lt;/code&gt;, which return a &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt; via &lt;a href=&quot;https://github.com/apple/swift-corelibs-foundation/blob/master/Foundation/NSString.swift&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Bundle.localizedString&lt;/code&gt;&lt;/a&gt;, is not a pure string.&lt;/p&gt;

&lt;p&gt;I am puzzled and I hope someone can explain.&lt;/p&gt;

&lt;p&gt;I can see  &lt;a href=&quot;https://github.com/apple/swift-corelibs-foundation/blob/master/Foundation/NSString.swift&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NSString&lt;/code&gt;&lt;/a&gt; use &lt;code class=&quot;highlighter-rouge&quot;&gt;CFStringCreateWithFormatAndArguments&lt;/code&gt;. In &lt;a href=&quot;https://github.com/apple/swift-corelibs-foundation/blob/3a3da5261da739a20177d2438239143887889ac6/CoreFoundation/String.subproj/CFString.c&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CFString&lt;/code&gt;&lt;/a&gt;, it mentions &lt;code class=&quot;highlighter-rouge&quot;&gt;stringsDictConfig&lt;/code&gt;. It seems like the system refer to this dictionary to look up the rules and format the final string.&lt;/p&gt;
</description>
        <pubDate>Thu, 19 Jul 2018 13:26:11 +0800</pubDate>
        <link>https://samwize.com/2018/07/19/how-stringsdict-and-nslocalizedstring-works/</link>
        <guid isPermaLink="true">https://samwize.com/2018/07/19/how-stringsdict-and-nslocalizedstring-works/</guid>
        
        
      </item>
    
      <item>
        <title>Schedule Cron Jobs on Mac With Crontab</title>
        <description>&lt;p&gt;I introduced &lt;code class=&quot;highlighter-rouge&quot;&gt;sleep&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;gtimeout&lt;/code&gt; in my post on &lt;a href=&quot;/2017/01/02/handy-bash-commands/&quot;&gt;some nice bash commands&lt;/a&gt; available in macOS.&lt;/p&gt;

&lt;p&gt;The advanced way of scheduling job is to run cron jobs.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.adminschoice.com/crontab-quick-reference&quot;&gt;Crontab&lt;/a&gt; sets up cron jobs and runs them at specific time, and repeatedly.&lt;/p&gt;

&lt;p&gt;One frequent use case I have is to schedule my computer to download live youtube streams at wee hours, using &lt;a href=&quot;https://github.com/streamlink/streamlink&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;streamlink&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;basic-cron-job&quot;&gt;Basic Cron Job&lt;/h2&gt;

&lt;p&gt;To edit the cron jobs, run:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;env EDITOR=nano crontab -e
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We use nano text editor as that is easier. You need to save and exit the editor every time you finish editing it.&lt;/p&gt;

&lt;p&gt;Enter a line of text, representing a cron job, like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;59 23 * * * cd ~/Documents &amp;amp;&amp;amp; /usr/local/bin/streamlink https://www.youtube.com/watch\?v\=y3oW28Draso best &amp;gt;/tmp/stdout.log 2&amp;gt;/tmp/stderr.log
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This long line:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;runs the command on 23:59 every day&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cd&lt;/code&gt; to a directory&lt;/li&gt;
  &lt;li&gt;then run the &lt;code class=&quot;highlighter-rouge&quot;&gt;streamlink&lt;/code&gt; command, with full path to the command because cron is run without knowing the env var &lt;code class=&quot;highlighter-rouge&quot;&gt;PATH&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;writes the output to /tmp/stdout.log and error to /tmp/stderr.log&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;use-a-script&quot;&gt;Use a script&lt;/h2&gt;

&lt;p&gt;To keep things tidy in crontab, I will often write the commands in a script eg “job.sh” in ~/Documents.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd ~/Documents
touch job.sh
chmod +x job.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The content of “job.sh”:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/go/bin

&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/Documents

&lt;span class=&quot;nv&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;date &lt;span class=&quot;s2&quot;&gt;&quot;+%Y-%m-%d %H%M&quot;&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;

streamlink &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$now&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.ts&quot;&lt;/span&gt; https://www.youtube.com/watch&lt;span class=&quot;se&quot;&gt;\?&lt;/span&gt;v&lt;span class=&quot;se&quot;&gt;\=&lt;/span&gt;9kVxPmh8eSQ best
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;set the &lt;code class=&quot;highlighter-rouge&quot;&gt;PATH&lt;/code&gt; env var, so that all common executables are available&lt;/li&gt;
  &lt;li&gt;use &lt;code class=&quot;highlighter-rouge&quot;&gt;date&lt;/code&gt; for the file name eg. “2018-07-07 0810.ts”&lt;/li&gt;
  &lt;li&gt;calls &lt;code class=&quot;highlighter-rouge&quot;&gt;streamlink&lt;/code&gt; to download live youtube stream&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then in crontab, each job is simplified to just running the script.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;59 23 * * * ~/Documents/job.sh &amp;gt;/tmp/stdout.log 2&amp;gt;/tmp/stderr.log
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;other-tips&quot;&gt;Other Tips&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# List the processes with name streamlink
ps aux | grep streamlink

# Kill the process with the id eg. 26959
kill -9 26959

# Kill all streamlink processes in 1 command:
ps aux | grep streamlink | awk '{print $2}' | xargs kill -9
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Sat, 07 Jul 2018 04:42:30 +0800</pubDate>
        <link>https://samwize.com/2018/07/07/schedule-cron-jobs-on-mac-with-crontab/</link>
        <guid isPermaLink="true">https://samwize.com/2018/07/07/schedule-cron-jobs-on-mac-with-crontab/</guid>
        
        
      </item>
    
      <item>
        <title>Creating a Private Framework With Carthage</title>
        <description>&lt;h2 id=&quot;install&quot;&gt;Install&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew install carthage
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;create-a-xcode-project&quot;&gt;Create a Xcode Project&lt;/h2&gt;

&lt;p&gt;In Xcode, create a new framework project with &lt;strong&gt;File &amp;gt; New &amp;gt; Project &amp;gt; Cocoa Touch Framework&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;With the project created, click on &lt;strong&gt;Product &amp;gt; Scheme &amp;gt; Manage&lt;/strong&gt; and make sure the &lt;strong&gt;Shared&lt;/strong&gt; checkbox is enabled.&lt;/p&gt;

&lt;p&gt;You will probably want to configure your framework’s target under &lt;strong&gt;General&lt;/strong&gt;. Change the name, version, and especially the &lt;strong&gt;(minimum) Deployment Target&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;It is a good time to initialize git with &lt;code class=&quot;highlighter-rouge&quot;&gt;git init&lt;/code&gt; and do your first commit.&lt;/p&gt;

&lt;h2 id=&quot;add-your-source&quot;&gt;Add your source&lt;/h2&gt;

&lt;p&gt;This is where you add your source files and assets. Make sure they are added to the framework’s target.&lt;/p&gt;

&lt;p&gt;If you use any other external frameworks, make sure they are added under the target’s &lt;strong&gt;General &amp;gt; Linked Frameworks and Libraries&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;add-a-sample-project&quot;&gt;Add a sample project&lt;/h2&gt;

&lt;p&gt;You will most likely create a sample project to showcase how the framework is to be used.&lt;/p&gt;

&lt;p&gt;Go to &lt;strong&gt;File &amp;gt; New &amp;gt; Target&lt;/strong&gt; and choose a suitable one eg. iOS Single View App&lt;/p&gt;

&lt;p&gt;Select the target, and under &lt;strong&gt;Build Phases &amp;gt; Target Dependencies&lt;/strong&gt;, add your framework.&lt;/p&gt;

&lt;h2 id=&quot;build&quot;&gt;Build&lt;/h2&gt;

&lt;p&gt;Build the framework with carthage,&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;carthage build --no-skip-current
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The command will build and output the framework in the &lt;code class=&quot;highlighter-rouge&quot;&gt;Carthage&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;Git tag and push now to publish.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git tag &quot;v1.0.0&quot;
git push --tags
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That’t it for publishing your own framework!&lt;/p&gt;

&lt;p&gt;This tutorial actually does not restrict to only private. If your git repository is public, then you have a public framework :)&lt;/p&gt;

&lt;h2 id=&quot;using-the-framework&quot;&gt;Using the framework&lt;/h2&gt;

&lt;p&gt;There are many tutorials on how to use Carthage to install dependency frameworks. I will keep this short.&lt;/p&gt;

&lt;p&gt;App that wants to use the framework can add to their &lt;a href=&quot;https://github.com/Carthage/Carthage/blob/master/Documentation/Artifacts.md#cartfile&quot;&gt;Cartfile&lt;/a&gt; with the repository URL (HTTP or SSH), and version (or tag), like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git &quot;git@bitbucket.org:just2us/MyFramework.git&quot; ~&amp;gt; 0.0.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then run &lt;code class=&quot;highlighter-rouge&quot;&gt;carthage update&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Unlike Cocoapods, Carthage needs a few more steps to manually &lt;a href=&quot;https://github.com/Carthage/Carthage#adding-frameworks-to-an-application&quot;&gt;add the frameworks to Xcode&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Drag &lt;strong&gt;Carthage/Build/iOS/MyFramework.framework&lt;/strong&gt; into your application target’s &lt;strong&gt;General &amp;gt; Linked Frameworks and Libraries&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Add a &lt;strong&gt;New Run Script Phase&lt;/strong&gt; for the application target’s Build Phases with&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/usr/local/bin/carthage copy-frameworks
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the same run script, add the &lt;strong&gt;Input Files&lt;/strong&gt;,&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$(SRCROOT)/Carthage/Build/iOS/MyFramework.framework
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And the &lt;strong&gt;Output Files&lt;/strong&gt;,&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$(BUILT_PRODUCTS_DIR)/$(FRAMEWORKS_FOLDER_PATH)/MyFramework.framework
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When you add a new dependency, run &lt;code class=&quot;highlighter-rouge&quot;&gt;carthage update&lt;/code&gt; again, and repeat those manual setup steps.&lt;/p&gt;

&lt;p&gt;You might also want to have dependencies for your test targets, in which you can read &lt;a href=&quot;https://github.com/Carthage/Carthage#adding-frameworks-to-unit-tests-or-a-framework&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Wed, 27 Jun 2018 12:12:15 +0800</pubDate>
        <link>https://samwize.com/2018/06/27/creating-a-private-framework-with-carthage/</link>
        <guid isPermaLink="true">https://samwize.com/2018/06/27/creating-a-private-framework-with-carthage/</guid>
        
        
        <category>Carthage</category>
        
      </item>
    
      <item>
        <title>Set Up Your Own VPN Server With $5</title>
        <description>&lt;p&gt;This is a very cheap way to run your dedicated VPN server, with $5/month on &lt;a href=&quot;https://m.do.co/c/69baaaf5a07b&quot;&gt;DigitalOcean&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;1-sign-up-digitalocean&quot;&gt;1. Sign Up DigitalOcean&lt;/h2&gt;

&lt;p&gt;I have been using Digital Ocean for a long time and highly recommend it when you need a dedicated server.&lt;/p&gt;

&lt;p&gt;Sign up DigitalOcean with my &lt;a href=&quot;https://m.do.co/c/69baaaf5a07b&quot;&gt;referral link&lt;/a&gt;, and get &lt;strong&gt;FREE $10 (that’s 2 months!)&lt;/strong&gt; to start with.&lt;/p&gt;

&lt;p&gt;When you do not need the VPN server any longer, you may shut it down anytime, and you won’t incur a thing.&lt;/p&gt;

&lt;h2 id=&quot;2-setup-for-ssh&quot;&gt;2. Setup for SSH&lt;/h2&gt;

&lt;p&gt;Before you create your droplet, you must setup your computer for ssh-ing later on.&lt;/p&gt;

&lt;p&gt;If you have never setup your RSA key pair, then you will have to run &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh-keygen&lt;/code&gt; first.&lt;/p&gt;

&lt;p&gt;Copy the public key,&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cat ~/.ssh/id_rsa.pub|pbcopy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then paste that in DigitalOcean &amp;gt; Settings &amp;gt; Security &amp;gt; Add SSH Key.&lt;/p&gt;

&lt;h2 id=&quot;3-create-droplet-the-server&quot;&gt;3. Create Droplet (the server)&lt;/h2&gt;

&lt;p&gt;Create &amp;gt; Droplets &amp;gt; One-click apps &amp;gt; Docker 17.12.0 on 16.04 (latest version might differ)&lt;/p&gt;

&lt;p&gt;Choose the cheapest $5/month droplet size, with 1 GB memory etc.&lt;/p&gt;

&lt;p&gt;Choose the datacenter region which you want to VPN to eg. Singapore&lt;/p&gt;

&lt;p&gt;Create a hostname eg. sg-vpn&lt;/p&gt;

&lt;p&gt;Note down the IP for your droplet (the ipv4). My example uses 111.111.111.111.&lt;/p&gt;

&lt;h2 id=&quot;4-install-openvpn&quot;&gt;4. Install OpenVPN&lt;/h2&gt;

&lt;p&gt;Now we get into the server and install the VPN service.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssh root@111.111.111.111
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you have trouble SSH in, make sure you setup your SSH keys in step 2 (will need to recreate droplet).&lt;/p&gt;

&lt;p&gt;Run these docker commands, enter a PEM pass phrase when prompted (mandatory). Give a Common Name eg. “sg-vpn”.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;OVPN_DATA=&quot;ovpn-data&quot;
docker run -v $OVPN_DATA:/etc/openvpn --rm kylemanna/openvpn ovpn_genconfig -u udp://111.111.111.111
docker run -v $OVPN_DATA:/etc/openvpn --rm -it kylemanna/openvpn ovpn_initpki
docker run -v $OVPN_DATA:/etc/openvpn -d -p 1194:1194/udp --cap-add=NET_ADMIN kylemanna/openvpn
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next, generate the ovpn file – a configuration that your computer can import later. In the example I have “sg-vpn.ovpn”.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run -v $OVPN_DATA:/etc/openvpn --rm -it kylemanna/openvpn easyrsa build-client-full user1 nopass
docker run -v $OVPN_DATA:/etc/openvpn --rm kylemanna/openvpn ovpn_getclient user1 &amp;gt; sg-vpn.ovpn
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We need to now exit ssh remote and go back to your computer.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;exit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;5-install-tunnelblick&quot;&gt;5. Install TunnelBlick&lt;/h2&gt;

&lt;p&gt;On your computer, download the ovpn file using scp.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# This copy the ovpn file (in /root) to the current directory you're in
scp -r root@111.111.111.111:/root/sg-vpn.ovpn .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Install &lt;a href=&quot;https://tunnelblick.net&quot;&gt;TunnelBlick&lt;/a&gt;, a VPN client. You may use others.&lt;/p&gt;

&lt;p&gt;Open or import the ovpn file, and enjoy your VPN (:&lt;/p&gt;

&lt;h2 id=&quot;optional-multiple-users&quot;&gt;(Optional) Multiple Users&lt;/h2&gt;

&lt;p&gt;The steps above generates for a single user/device.&lt;/p&gt;

&lt;p&gt;To support multiple device, repeat these steps:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# ssh to the machine and create for user2, and more
OVPN_DATA=&quot;ovpn-data&quot;
docker run -v $OVPN_DATA:/etc/openvpn --rm -it kylemanna/openvpn easyrsa build-client-full user2 nopass
docker run -v $OVPN_DATA:/etc/openvpn --rm kylemanna/openvpn ovpn_getclient user2 &amp;gt; sg-vpn-user2.ovpn

# On local computer
scp -r root@111.111.111.111:/root/sg-vpn-user2.ovpn .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;optional-running-on-custom-port&quot;&gt;(Optional) Running on custom port&lt;/h2&gt;

&lt;p&gt;To use a custom UDP port 8349 (instead of default 1194), replace with the following 3 lines:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run -v $OVPN_DATA:/etc/openvpn --rm kylemanna/openvpn ovpn_genconfig -u udp://111.111.111.111:8349
docker run -v $OVPN_DATA:/etc/openvpn --rm -it kylemanna/openvpn ovpn_initpki
docker run -v $OVPN_DATA:/etc/openvpn -d -p 8349:1194/udp --cap-add=NET_ADMIN kylemanna/openvpn
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Mon, 04 Jun 2018 00:46:32 +0800</pubDate>
        <link>https://samwize.com/2018/06/04/steps-to-set-up-your-own-vpn-with/</link>
        <guid isPermaLink="true">https://samwize.com/2018/06/04/steps-to-set-up-your-own-vpn-with/</guid>
        
        
      </item>
    
      <item>
        <title>How my iOS Code evolved in Last 10 Years</title>
        <description>&lt;p&gt;I released my first iOS app in 2008, the year that iPhone changed the world.&lt;/p&gt;

&lt;p&gt;Recently, in time for World Cup 2018, I release v3 of the &lt;a href=&quot;http://just2us.com/sgfootball/&quot;&gt;same app&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As I rewrite the app – from Objective-C to Swift – it dawned on me how much things have changed.&lt;/p&gt;

&lt;p&gt;How much the tools have improved. How different designs and architectures are. How much my code has evolved.&lt;/p&gt;

&lt;p&gt;As I look at the code evolving from &lt;strong&gt;v1 -&amp;gt; v2 -&amp;gt; v3&lt;/strong&gt; (thanks source control), I feel like I am reading my diary. It tells my story in iOS development.&lt;/p&gt;

&lt;h2 id=&quot;v1-2008&quot;&gt;v1 (2008)&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;SVN Source Control (git not popular back then)&lt;/li&gt;
  &lt;li&gt;AppDelegate is 1,600+ lines long!&lt;/li&gt;
  &lt;li&gt;Code form is inconsistent
    &lt;ul&gt;
      &lt;li&gt;Multiple line breaks&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Commented out many code for &lt;em&gt;some&lt;/em&gt; reason&lt;/li&gt;
  &lt;li&gt;Table view cell are constructed with nibs, then configured with &lt;code class=&quot;highlighter-rouge&quot;&gt;viewWithTag&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Models are dictionaries and arrays&lt;/li&gt;
  &lt;li&gt;1 month to finish&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;v2-2014&quot;&gt;v2 (2014)&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;iOS 6 is a big change with cleaner interface&lt;/li&gt;
  &lt;li&gt;Wrote better abstraction
    &lt;ul&gt;
      &lt;li&gt;Replace &lt;code class=&quot;highlighter-rouge&quot;&gt;Type1ViewController&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Type2ViewController&lt;/code&gt;, … etc with &lt;code class=&quot;highlighter-rouge&quot;&gt;OddsViewController&lt;/code&gt;, which configure the cell according to the type&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Still Objective-C (no Swift yet)&lt;/li&gt;
  &lt;li&gt;Use of Cocoapods libraries&lt;/li&gt;
  &lt;li&gt;Use of my own private library&lt;/li&gt;
  &lt;li&gt;Storyboard&lt;/li&gt;
  &lt;li&gt;Helpful models, but with lots of mutation func&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;v3-2018&quot;&gt;v3 (2018)&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Objective-C to Swift
    &lt;ul&gt;
      &lt;li&gt;Strongly typed language eliminates many meaningless crashes.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Better namings of everything
    &lt;ul&gt;
      &lt;li&gt;Xcode can finally can refactor by renaming methods and types&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Scalable UI
    &lt;ul&gt;
      &lt;li&gt;Auto Layout for any device size or orientation&lt;/li&gt;
      &lt;li&gt;Dynamic (Font) Type&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;No more storyboard
    &lt;ul&gt;
      &lt;li&gt;All UI created by code with constraints&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Better Architecture
    &lt;ul&gt;
      &lt;li&gt;Clearer responsibilities&lt;/li&gt;
      &lt;li&gt;Reasonable dependencies&lt;/li&gt;
      &lt;li&gt;MVVM with RxSwift&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Unit Tests with API fixtures&lt;/li&gt;
  &lt;li&gt;Fastlane for managing certs, provisioning profiles, building and uploading releases&lt;/li&gt;
  &lt;li&gt;7 days to rewrite&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 01 Jun 2018 07:21:02 +0800</pubDate>
        <link>https://samwize.com/2018/06/01/evolution-of-my-code-in-last-10-years/</link>
        <guid isPermaLink="true">https://samwize.com/2018/06/01/evolution-of-my-code-in-last-10-years/</guid>
        
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>How to Download IPA Files on macOS High Sierra</title>
        <description>&lt;p&gt;macOS, or more specifially since iTunes v12.7, no longer stores the IPA files.&lt;/p&gt;

&lt;p&gt;There are a number of ways to find an app’s IPA, such as the many untrusted, dangerous sites with &lt;em&gt;their signed IPA&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Be safe, read on.&lt;/p&gt;

&lt;h2 id=&quot;1-download-apple-configurator-2&quot;&gt;1. Download Apple Configurator 2&lt;/h2&gt;

&lt;p&gt;This is Apple’s app for configuring multiple devices for schools and businesses.&lt;/p&gt;

&lt;p&gt;Download it from Mac Store &lt;a href=&quot;https://itunes.apple.com/app/id1037126344?at=11luru&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;2-sign-in&quot;&gt;2. Sign In&lt;/h2&gt;

&lt;p&gt;Go to the app &amp;gt; Account &amp;gt; Sign In using your personal iTunes account.&lt;/p&gt;

&lt;h2 id=&quot;3-update-the-apps&quot;&gt;3. Update The Apps&lt;/h2&gt;

&lt;p&gt;Go to Actions &amp;gt; Update, and select the apps to update (or all). If you have hundreds of apps to update, this process could stuck here.&lt;/p&gt;

&lt;p&gt;Another way is to go to Actions &amp;gt; Add &amp;gt; Apps &amp;gt; Select the app to install from your purchase history.&lt;/p&gt;

&lt;p&gt;After the apps are downloaded, go to step 4 immediately.&lt;/p&gt;

&lt;h2 id=&quot;4-find-in-cache-folder&quot;&gt;4. Find in cache folder&lt;/h2&gt;

&lt;p&gt;The IPAs will be here:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;~/Library/Group Containers/K36BKF7T3D.group.com.apple.configurator/Library/Caches/Assets/TemporaryItems/MobileApps&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Note that they are in a &lt;strong&gt;cache&lt;/strong&gt;, which means it will be deleted anytime, so copy it to somewhere while it is there.&lt;/p&gt;
</description>
        <pubDate>Wed, 30 May 2018 22:16:00 +0800</pubDate>
        <link>https://samwize.com/2018/05/30/how-to-download-ipa-files-on-macos-high-sierra/</link>
        <guid isPermaLink="true">https://samwize.com/2018/05/30/how-to-download-ipa-files-on-macos-high-sierra/</guid>
        
        
        <category>Tips</category>
        
      </item>
    
      <item>
        <title>Guide to Moya for API Services and Testing</title>
        <description>&lt;p&gt;Moya is a very high-level library, enforcing you to create your API services with a strict set of protocol methods. Doing so, you will automatically design API with best practices.&lt;/p&gt;

&lt;p&gt;If Moya is high-level, then Alamofire is mid-level, and URLSession is low-level.&lt;/p&gt;

&lt;p&gt;You can perfectly live without Moya, and use Alamofire directly.&lt;/p&gt;

&lt;h2 id=&quot;what-moya-does&quot;&gt;What Moya does&lt;/h2&gt;

&lt;p&gt;In essence, Moya is creating this &lt;a href=&quot;https://github.com/Moya/Moya/tree/master/docs&quot;&gt;pipeline&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/moya-pipeline.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Target is a collection of your API endpoints/service, enforced by implementing &lt;code class=&quot;highlighter-rouge&quot;&gt;TargetType&lt;/code&gt; protocol.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Endpoint&lt;/code&gt; is a semi-internal structure in Moya that you may or may not deal with.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Request&lt;/code&gt; is a Alamofire’s type, which you have to form when making network calls with Alamofire.&lt;/p&gt;

&lt;p&gt;Moya simplify your workflow such that make a request from your target’s provider.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;provider&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MoyaProvider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;MyService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;provider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;allPopularMovies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Similar to handling Alamofire result&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Read on to see how &lt;code class=&quot;highlighter-rouge&quot;&gt;MyService&lt;/code&gt; (target) is designed.&lt;/p&gt;

&lt;h2 id=&quot;designing-target&quot;&gt;Designing Target&lt;/h2&gt;

&lt;p&gt;A target is an enum, with the API as cases.&lt;/p&gt;

&lt;p&gt;Then implement the protocol &lt;code class=&quot;highlighter-rouge&quot;&gt;TargetType&lt;/code&gt;, and you will have to &lt;a href=&quot;https://github.com/Moya/Moya/blob/master/docs/Targets.md&quot;&gt;conform to 7 methods&lt;/a&gt;. The example shows for only &lt;code class=&quot;highlighter-rouge&quot;&gt;path&lt;/code&gt;, which are the endpoints for each case.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TargetType&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;allPopularMovies&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;movie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;allPopularMovies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/movies/popular&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;movie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;movieId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/movies/&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;movieId&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I will not go into details for the other 6 methods, as they are easy to understand from the method names. You can also refer to Moya’s &lt;a href=&quot;https://github.com/Moya/Moya/blob/master/docs/Examples/Basic.md&quot;&gt;basic example&lt;/a&gt; and &lt;a href=&quot;https://github.com/Moya/Moya/tree/master/docs/Examples&quot;&gt;more&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;testingstubbing&quot;&gt;Testing/Stubbing&lt;/h2&gt;

&lt;p&gt;Instead, I will discuss on unit testing with Moya.&lt;/p&gt;

&lt;p&gt;Too much stubbing is bad in testing, but for server-client API, stubbing is good because it gives:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;consistent response independent from server&lt;/li&gt;
  &lt;li&gt;immediate response&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Moya is built with &lt;a href=&quot;https://github.com/Moya/Moya/blob/master/docs/Testing.md&quot;&gt;testing&lt;/a&gt; in mind. But I didn’t like that &lt;code class=&quot;highlighter-rouge&quot;&gt;sampleData&lt;/code&gt; is a required method in &lt;code class=&quot;highlighter-rouge&quot;&gt;TargetType&lt;/code&gt; protocol.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Because if you stub there, then your production app will contain the stubs.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If stub with JSON files (aka test fixtures), then your app will have to include those files..&lt;/p&gt;

&lt;p&gt;My solution is to stub only when creating a mock provider in my &lt;strong&gt;unit tests&lt;/strong&gt;. Therefore in my Target, simply return nothing for &lt;code class=&quot;highlighter-rouge&quot;&gt;sampleData&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;sampleData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Data&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then in unit test target, set up like this:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;APITests&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;XCTestCase&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;provider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MoyaProvider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;MyService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;!&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setUp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setUp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// A mock provider with a mocking `endpointClosure` that stub immediately&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;provider&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MoyaProvider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;MyService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;endpointClosure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;customEndpointClosure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;stubClosure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MoyaProvider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;immediatelyStub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;customEndpointClosure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Endpoint&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Endpoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;absoluteString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                        &lt;span class=&quot;nv&quot;&gt;sampleResponseClosure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;networkResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testSampleData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
                        &lt;span class=&quot;nv&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                        &lt;span class=&quot;nv&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                        &lt;span class=&quot;nv&quot;&gt;httpHeaderFields&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The gist is that I create a mock provider using a custom &lt;code class=&quot;highlighter-rouge&quot;&gt;endpointClousure&lt;/code&gt;, which in the &lt;code class=&quot;highlighter-rouge&quot;&gt;sampleResponseClosure&lt;/code&gt;, I use my own &lt;code class=&quot;highlighter-rouge&quot;&gt;testSampleData&lt;/code&gt;, which is implemented with an extension in the unit test.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyService&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;testSampleData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Data&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;allPopularMovies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// Returning all-popular-movies.json&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;APITests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;forResource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;all-popular-movies&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;withExtension&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;json&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try!&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;contentsOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once again:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sampleData&lt;/code&gt; - &lt;code class=&quot;highlighter-rouge&quot;&gt;TargetType&lt;/code&gt; protocol method which we don’t utilize&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;testSampleData&lt;/code&gt; - custom extension in unit test that returns a test fixture JSON&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 23 May 2018 07:10:15 +0800</pubDate>
        <link>https://samwize.com/2018/05/23/guide-to-using-moya-for-api-services/</link>
        <guid isPermaLink="true">https://samwize.com/2018/05/23/guide-to-using-moya-for-api-services/</guid>
        
        
        <category>API</category>
        
        <category>Testing</category>
        
      </item>
    
      <item>
        <title>Photos App &amp; EXIF Location Data</title>
        <description>&lt;p&gt;Location, or any metadata, can be saved in 2 places:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;In Photos app’s database&lt;/li&gt;
  &lt;li&gt;In the jpg/heic/dng/mov files&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You WILL have to do both for an iOS app, because if you don’t, then you will lose the information along the way eg importing.&lt;/p&gt;

&lt;h2 id=&quot;1-photos-apps-database&quot;&gt;1. Photos app’s database&lt;/h2&gt;

&lt;p&gt;Let’s start with the easy one.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/documentation/photos/phassetcreationrequest&quot;&gt;PHAssetCreationRequest&lt;/a&gt; makes it very easy to add the location data to the database.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;PHPhotoLibrary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;shared&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;performChanges&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;creationRequest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PHAssetCreationRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;forAsset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;creationRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;latestLocation&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;creationRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addResource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;photo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;photoData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can also set the &lt;code class=&quot;highlighter-rouge&quot;&gt;creationDate&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;isFavorite&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;the-problem&quot;&gt;The Problem&lt;/h2&gt;

&lt;p&gt;If you do (1), but not (2), then when the photo is imported into macOS/Windows, surprisingly, even using Apple’s Photo app, metadata will be lost.&lt;/p&gt;

&lt;p&gt;When importing, only the &lt;strong&gt;metadata in the file&lt;/strong&gt; is used.&lt;/p&gt;

&lt;p&gt;So you need to write metadata to the file, and that is HARDER.&lt;/p&gt;

&lt;h2 id=&quot;2-writing-metadata-to-file&quot;&gt;2. Writing metadata to file&lt;/h2&gt;

&lt;p&gt;If you are using AVFoundation to capture photo, then it is relatively easy. There is a &lt;a href=&quot;https://developer.apple.com/documentation/avfoundation/avcapturephoto/2875953-filedatarepresentation&quot;&gt;variant of &lt;code class=&quot;highlighter-rouge&quot;&gt;fileDataRepresentation&lt;/code&gt;&lt;/a&gt; that can take in the metadata.&lt;/p&gt;

&lt;p&gt;This is what you do in the &lt;code class=&quot;highlighter-rouge&quot;&gt;AVCapturePhotoCaptureDelegate&lt;/code&gt; method:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;photoOutput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AVCapturePhotoOutput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;didFinishProcessingPhoto&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;photo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AVCapturePhoto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;metadata&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;photo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;metadata&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kCGImagePropertyGPSDictionary&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gpsMetadata&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;photoData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;photo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fileDataRepresentation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;withReplacementMetadata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;replacementEmbeddedThumbnailPhotoFormat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;photo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;embeddedThumbnailPhotoFormat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;replacementEmbeddedThumbnailPixelBuffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;replacementDepthData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;photo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;depthData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With the &lt;code class=&quot;highlighter-rouge&quot;&gt;photoData&lt;/code&gt;, you can save to file or add to Photos using &lt;code class=&quot;highlighter-rouge&quot;&gt;PHAssetCreationRequest&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;using-image-io-and-other-frameworks&quot;&gt;Using Image I/O and other frameworks&lt;/h2&gt;

&lt;p&gt;If you are not capturing photo using AVFoundation, then you don’t have the luxury of the above to get the &lt;code class=&quot;highlighter-rouge&quot;&gt;fileDataRepresentation&lt;/code&gt; along with the metadata.&lt;/p&gt;

&lt;p&gt;In that case, you have to add metadata manually to the original image data.&lt;/p&gt;

&lt;p&gt;Image I/O Framework provides methods to &lt;a href=&quot;https://developer.apple.com/library/content/qa/qa1895/_index.html&quot;&gt;Modifying Image Metadata Without Recompressing Image (QA1895)&lt;/a&gt;, using &lt;a href=&quot;https://developer.apple.com/documentation/imageio/1465189-cgimagedestinationcopyimagesourc?language=objc&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CGImageDestinationCopyImageSource&lt;/code&gt;&lt;/a&gt;, which supports JPEG, PNG, PSD, TIFF.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;options_dict&lt;/code&gt; in the sample code is the metadata dictionary.&lt;/p&gt;

&lt;p&gt;Check out S/O answers like &lt;a href=&quot;https://stackoverflow.com/a/5294574/242682&quot;&gt;this&lt;/a&gt; or &lt;a href=&quot;https://stackoverflow.com/a/43376828/242682&quot;&gt;this&lt;/a&gt; (using Core Media).&lt;/p&gt;

&lt;p&gt;Assets Library framework (deprecated) also has it’s own methods to &lt;a href=&quot;https://developer.apple.com/library/content/qa/qa1622/_index.html&quot;&gt;Accessing Image Metadata in iOS (QA1622)&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;metadata&quot;&gt;Metadata&lt;/h2&gt;

&lt;p&gt;Wonder what kind of structure is &lt;code class=&quot;highlighter-rouge&quot;&gt;metadata&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;Metadata is a dictionary of dictionaries.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/documentation/imageio/cgimageproperties&quot;&gt;CGImageProperties&lt;/a&gt; has a reference to the dictionaries you can define. For example, &lt;a href=&quot;https://developer.apple.com/documentation/imageio/cgimageproperties/gps_dictionary_keys&quot;&gt;GPS has it’s own dictionary keys&lt;/a&gt;, so does &lt;a href=&quot;https://developer.apple.com/documentation/imageio/cgimageproperties/exif_dictionary_keys&quot;&gt;EXIF&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// gpsMetadata and exifMetadata are 2 dictionaries&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kCGImagePropertyGPSDictionary&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gpsMetadata&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kCGImagePropertyExifDictionary&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exifMetadata&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There is a helper on turning &lt;code class=&quot;highlighter-rouge&quot;&gt;CLLocation&lt;/code&gt; into the &lt;a href=&quot;https://stackoverflow.com/a/5314634/242682&quot;&gt;GPS data in a dictionary&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A &lt;a href=&quot;https://gist.github.com/kwylez/a4b6ec261e52970e1fa5dd4ccfe8898f&quot;&gt;Swift extension&lt;/a&gt; is kindly available too.&lt;/p&gt;
</description>
        <pubDate>Thu, 17 May 2018 11:55:05 +0800</pubDate>
        <link>https://samwize.com/2018/05/17/photos-app-and-exif-location-data/</link>
        <guid isPermaLink="true">https://samwize.com/2018/05/17/photos-app-and-exif-location-data/</guid>
        
        
      </item>
    
      <item>
        <title>How to Vibrate an iPhone</title>
        <description>&lt;h2 id=&quot;1-audiotoolbox&quot;&gt;1. AudioToolbox&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Target &amp;gt; Linked Frameworks and Libraries &amp;gt; Add &lt;strong&gt;AudioToolbox&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;import AudioToolbox&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AudioServicesPlaySystemSoundWithCompletion(kSystemSoundID_Vibrate, nil)&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It is that simple using &lt;a href=&quot;https://developer.apple.com/documentation/audiotoolbox/1405248-audioservicesplaysystemsound&quot;&gt;AudioServicesPlaySystemSound API&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;2-haptic-api&quot;&gt;2. Haptic API&lt;/h2&gt;

&lt;p&gt;In iOS 10, there is a new API, making use of the new haptic engine in iPhone.&lt;/p&gt;

&lt;p&gt;The API is very simple, with 3 concrete classes to &lt;a href=&quot;https://developer.apple.com/documentation/uikit/uifeedbackgenerator&quot;&gt;UIFeedbackGenerator&lt;/a&gt;. Use accordingly to your scenario.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;c1&quot;&gt;// UI &quot;impact&quot;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;UIImpactFeedbackGenerator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;light&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;impactOccurred&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;UIImpactFeedbackGenerator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;medium&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;impactOccurred&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;UIImpactFeedbackGenerator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;heavy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;impactOccurred&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Selection changed&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;UISelectionFeedbackGenerator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;selectionChanged&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Notifications&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;UINotificationFeedbackGenerator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;notificationOccurred&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;UINotificationFeedbackGenerator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;notificationOccurred&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;UINotificationFeedbackGenerator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;notificationOccurred&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;warning&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// To be complete, this is the vibration using AudioToolbox&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;AudioServicesPlaySystemSoundWithCompletion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kSystemSoundID_Vibrate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;pitfall-does-not-work-along-with-other-audio-session&quot;&gt;Pitfall: Does not work along with other audio session&lt;/h2&gt;

&lt;p&gt;There is a &lt;a href=&quot;https://developer.apple.com/documentation/audiotoolbox/1405202-audioservicesplayalertsound&quot;&gt;note&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;However, the device does not vibrate if your app’s audio session is configured with the AVAudioSessionCategoryPlayAndRecord or AVAudioSessionCategoryRecord audio session category.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;While the note is for &lt;code class=&quot;highlighter-rouge&quot;&gt;AudioServicesPlayAlertSound&lt;/code&gt;, it is applicable to &lt;code class=&quot;highlighter-rouge&quot;&gt;AudioServicesPlaySystemSound&lt;/code&gt; too.&lt;/p&gt;

&lt;p&gt;As long as you have a audio session (via AVAudioPlayer, AVCaptureMovieFileOutput, etc), then the phone will NOT vibrate.&lt;/p&gt;
</description>
        <pubDate>Mon, 30 Apr 2018 09:49:03 +0800</pubDate>
        <link>https://samwize.com/2018/04/30/how-to-vibrate-an-iphone/</link>
        <guid isPermaLink="true">https://samwize.com/2018/04/30/how-to-vibrate-an-iphone/</guid>
        
        
      </item>
    
      <item>
        <title>What is Bundle?</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/documentation/foundation/bundle&quot;&gt;Bundle&lt;/a&gt; represents a directory. It &lt;a href=&quot;https://developer.apple.com/library/content/documentation/CoreFoundation/Conceptual/CFBundles/AboutBundles/AboutBundles.html&quot;&gt;groups resources&lt;/a&gt; together.&lt;/p&gt;

&lt;h2 id=&quot;application&quot;&gt;Application&lt;/h2&gt;

&lt;p&gt;In a typical application, all of your assets, images, strings, resources and code will be in the “main bundle”.&lt;/p&gt;

&lt;p&gt;To be convenient, resource classes provide sensible default to use.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// NSLocalizedString function signature has a default bundle&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;NSLocalizedString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tableName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bundle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;comment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;a href=&quot;https://stackoverflow.com/q/24991791/242682&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;default&lt;/code&gt;&lt;/a&gt; is &lt;code class=&quot;highlighter-rouge&quot;&gt;Bundle.main&lt;/code&gt;. So you don’t have to specify explicitly.&lt;/p&gt;

&lt;p&gt;Without surprise, &lt;a href=&quot;https://developer.apple.com/documentation/uikit/uiimage/1624146-init&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UIImage&lt;/code&gt; initialization&lt;/a&gt; uses the main bundle too. And if you want to specific another bundle you could use the &lt;a href=&quot;https://developer.apple.com/documentation/uikit/uiimage/1624154-init&quot;&gt;other init&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But the default to use main bundle is not applicable to frameworks and playgrounds.&lt;/p&gt;

&lt;h2 id=&quot;framework&quot;&gt;Framework&lt;/h2&gt;

&lt;p&gt;When you are developing a framework, you should NOT use &lt;code class=&quot;highlighter-rouge&quot;&gt;Bundle.main&lt;/code&gt;, because that is the app’s bundle.&lt;/p&gt;

&lt;p&gt;Your resources is in your framework’s bundle.&lt;/p&gt;

&lt;p&gt;Therefore the default main bundle that &lt;code class=&quot;highlighter-rouge&quot;&gt;NSLocalizedString&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;UIImage&lt;/code&gt; use will fail in when you are developing a framework.&lt;/p&gt;

&lt;p&gt;The correct way:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;frameworkBundle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyFrameworkClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;stringInFramework&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSLocalizedString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;frameworkBundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;comment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;imageInFramework&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;named&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;img&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;frameworkBundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;compatibleWith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Bundle(for:)&lt;/code&gt; conveniently find the bundle that contains the class. You could use any other class in your framework to replace &lt;code class=&quot;highlighter-rouge&quot;&gt;MyFrameworkClass&lt;/code&gt;. It works because all code and resources will be in the same bundle for a framework.&lt;/p&gt;

&lt;h2 id=&quot;playground&quot;&gt;Playground&lt;/h2&gt;

&lt;p&gt;Playground is another special case.&lt;/p&gt;

&lt;p&gt;Try running this in playground to see the &lt;code class=&quot;highlighter-rouge&quot;&gt;bundlePath&lt;/code&gt; (the file URL path).&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;Bundle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bundlePath&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;Bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Framework1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bundlePath&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;Bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Framework2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bundlePath&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The URL will look like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~/Library/Developer/XCPGDevices/x-x-x/data/Containers/Bundle/Application/y-y-y/UIPlayground-28059-1.app
~/Library/Developer/Xcode/DerivedData/App-xyz/Build/Products/Debug-iphonesimulator/Framework1.framework
~/Library/Developer/Xcode/DerivedData/App-xyz/Build/Products/Debug-iphonesimulator/Framework2.framework
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you add your resources to the “Resources” group in Playground, then the main bundle will contain the resources.&lt;/p&gt;

&lt;p&gt;But if you need a resource from a framework, then you need the bundle for the framework.&lt;/p&gt;

&lt;h2 id=&quot;the-complicated-case&quot;&gt;The Complicated Case&lt;/h2&gt;

&lt;p&gt;In our previous tutorial that &lt;a href=&quot;/2017/10/05/adding-playground-to-an-existing-project/&quot;&gt;uses Playground to create application’s UI&lt;/a&gt;, the scenario is complicated because the same resource is used in 2 targets:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The app&lt;/li&gt;
  &lt;li&gt;The framework for playground (&lt;code class=&quot;highlighter-rouge&quot;&gt;MyUIPlaygroundFramework&lt;/code&gt;)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For such case, the resource has to specify the bundle correctly.&lt;/p&gt;

&lt;p&gt;The trick is to make use of a class that &lt;strong&gt;exists in both&lt;/strong&gt; the app and framework.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bundle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CommonClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When you use in app, &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle&lt;/code&gt; will be main bundle.&lt;/p&gt;

&lt;p&gt;When you use in framework, &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle&lt;/code&gt; will be the framework’s bundle.&lt;/p&gt;
</description>
        <pubDate>Fri, 27 Apr 2018 17:01:16 +0800</pubDate>
        <link>https://samwize.com/2018/04/27/what-is-bundle/</link>
        <guid isPermaLink="true">https://samwize.com/2018/04/27/what-is-bundle/</guid>
        
        
        <category>iOS</category>
        
      </item>
    
  </channel>
</rss>
