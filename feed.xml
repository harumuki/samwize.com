<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>@samwize</title>
    <description>¯\_(ツ)_/¯
</description>
    <link>https://samwize.com/</link>
    <atom:link href="https://samwize.com/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Fri, 01 Jun 2018 10:43:53 +0800</pubDate>
    <lastBuildDate>Fri, 01 Jun 2018 10:43:53 +0800</lastBuildDate>
    <generator>Jekyll v3.6.2</generator>
    
      <item>
        <title>How my iOS Code evolved in Last 10 Years</title>
        <description>&lt;p&gt;I released my first iOS app in 2008, the year that iPhone changed the world.&lt;/p&gt;

&lt;p&gt;Recently, in time for World Cup 2018, I release v3 of the &lt;a href=&quot;http://just2us.com/sgfootball/&quot;&gt;same app&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As I rewrite the app – from Objective-C to Swift – it dawned on me how much things have changed.&lt;/p&gt;

&lt;p&gt;How much the tools have improved. How different designs and architecture are. How much my code has evolved.&lt;/p&gt;

&lt;p&gt;As I look at the code evolving from &lt;strong&gt;v1 -&amp;gt; v2 -&amp;gt; v3&lt;/strong&gt; (thanks source control), I feel like reading my diary. It tells my story in iOS development.&lt;/p&gt;

&lt;h2 id=&quot;v1-2008&quot;&gt;v1 (2008)&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;SVN Source Control (git not popular back then)&lt;/li&gt;
  &lt;li&gt;AppDelegate is 1,600+ lines long!&lt;/li&gt;
  &lt;li&gt;Code form is inconsistent
    &lt;ul&gt;
      &lt;li&gt;Multiple line breaks&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Commented out many code for &lt;em&gt;some&lt;/em&gt; reason&lt;/li&gt;
  &lt;li&gt;Table view cell are constructed with nibs, then configured with &lt;code class=&quot;highlighter-rouge&quot;&gt;viewWithTag&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Models are dictionaries and arrays&lt;/li&gt;
  &lt;li&gt;1 month to finish&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;v2-2014&quot;&gt;v2 (2014)&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;iOS 6 is a big change with cleaner interface&lt;/li&gt;
  &lt;li&gt;Wrote better abstraction
    &lt;ul&gt;
      &lt;li&gt;Replace &lt;code class=&quot;highlighter-rouge&quot;&gt;Type1ViewController&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Type2ViewController&lt;/code&gt;, … etc with &lt;code class=&quot;highlighter-rouge&quot;&gt;OddsViewController&lt;/code&gt;, which configure the cell according to the type&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Still Objective-C (no Swift yet)&lt;/li&gt;
  &lt;li&gt;Use of Cocoapods libraries&lt;/li&gt;
  &lt;li&gt;Use of my own private library&lt;/li&gt;
  &lt;li&gt;Storyboard&lt;/li&gt;
  &lt;li&gt;Helpful models, but with lots of mutation func&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;v3-2018&quot;&gt;v3 (2018)&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Objective-C to Swift
    &lt;ul&gt;
      &lt;li&gt;Strongly typed language eliminates many crashes. Almost no crash.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Better namings of everything
    &lt;ul&gt;
      &lt;li&gt;Xcode now can rename methods and types&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Scalable UI
    &lt;ul&gt;
      &lt;li&gt;Auto Layout for any device size or orientation&lt;/li&gt;
      &lt;li&gt;Dynamic (Font) Type&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;No more storyboard
    &lt;ul&gt;
      &lt;li&gt;All UI created by code with constraints&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Better Architecture
    &lt;ul&gt;
      &lt;li&gt;Clearer responsibilities&lt;/li&gt;
      &lt;li&gt;Reasonable dependencies&lt;/li&gt;
      &lt;li&gt;MVVM with RxSwift&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Unit Tests with API fixtures&lt;/li&gt;
  &lt;li&gt;Fastlane for managing certs, provisioning profiles, building and uploading releases&lt;/li&gt;
  &lt;li&gt;7 days to rewrite&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 01 Jun 2018 07:21:02 +0800</pubDate>
        <link>https://samwize.com/2018/06/01/evolution-of-my-code-in-last-10-years/</link>
        <guid isPermaLink="true">https://samwize.com/2018/06/01/evolution-of-my-code-in-last-10-years/</guid>
        
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>How to Download IPA Files on macOS High Sierra</title>
        <description>&lt;p&gt;macOS, or more specifially since iTunes v12.7, no longer stores the IPA files.&lt;/p&gt;

&lt;p&gt;There are a number of ways to find an app’s IPA, such as the many untrusted, dangerous sites with &lt;em&gt;their signed IPA&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Be safe, read on.&lt;/p&gt;

&lt;h2 id=&quot;1-download-apple-configurator-2&quot;&gt;1. Download Apple Configurator 2&lt;/h2&gt;

&lt;p&gt;This is Apple’s app for configuring multiple devices for schools and businesses.&lt;/p&gt;

&lt;p&gt;Download it from Mac Store &lt;a href=&quot;https://itunes.apple.com/app/id1037126344?at=11luru&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;2-sign-in&quot;&gt;2. Sign In&lt;/h2&gt;

&lt;p&gt;Go to the app &amp;gt; Account &amp;gt; Sign In using your personal iTunes account.&lt;/p&gt;

&lt;h2 id=&quot;3-update-the-apps&quot;&gt;3. Update The Apps&lt;/h2&gt;

&lt;p&gt;Go to Action &amp;gt; Update, and select the apps to update (or all).&lt;/p&gt;

&lt;h2 id=&quot;4-find-in-folder&quot;&gt;4. Find in folder&lt;/h2&gt;

&lt;p&gt;The IPAs will be here:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;~/Library/Group Containers/K36BKF7T3D.group.com.apple.configurator/Library/Caches/Assets/TemporaryItems/MobileApps&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Note that they are in a &lt;strong&gt;cache&lt;/strong&gt;, which means it will be deleted anytime, so copy it to somewhere while it is there.&lt;/p&gt;
</description>
        <pubDate>Wed, 30 May 2018 22:16:00 +0800</pubDate>
        <link>https://samwize.com/2018/05/30/how-to-download-ipa-files-on-macos-high-sierra/</link>
        <guid isPermaLink="true">https://samwize.com/2018/05/30/how-to-download-ipa-files-on-macos-high-sierra/</guid>
        
        
        <category>Tips</category>
        
      </item>
    
      <item>
        <title>Guide to Moya for API Services and Testing</title>
        <description>&lt;p&gt;Moya is a very high-level library, enforcing you to create your API services with a strict set of protocol methods. Doing so, you will automatically design API with best practices.&lt;/p&gt;

&lt;p&gt;If Moya is high-level, then Alamofire is mid-level, and URLSession is low-level.&lt;/p&gt;

&lt;p&gt;You can perfectly live without Moya, and use Alamofire directly.&lt;/p&gt;

&lt;h2 id=&quot;what-moya-does&quot;&gt;What Moya does&lt;/h2&gt;

&lt;p&gt;In essence, Moya is creating this &lt;a href=&quot;https://github.com/Moya/Moya/tree/master/docs&quot;&gt;pipeline&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/moya-pipeline.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Target is a collection of your API endpoints/service, enforced by implementing &lt;code class=&quot;highlighter-rouge&quot;&gt;TargetType&lt;/code&gt; protocol.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Endpoint&lt;/code&gt; is a semi-internal structure in Moya that you may or may not deal with.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Request&lt;/code&gt; is a Alamofire’s type, which you have to form when making network calls with Alamofire.&lt;/p&gt;

&lt;p&gt;Moya simplify your workflow such that make a request from your target’s provider.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;provider&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MoyaProvider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;MyService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;provider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;allPopularMovies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Similar to handling Alamofire result&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Read on to see how &lt;code class=&quot;highlighter-rouge&quot;&gt;MyService&lt;/code&gt; (target) is designed.&lt;/p&gt;

&lt;h2 id=&quot;designing-target&quot;&gt;Designing Target&lt;/h2&gt;

&lt;p&gt;A target is an enum, with the API as cases.&lt;/p&gt;

&lt;p&gt;Then implement the protocol &lt;code class=&quot;highlighter-rouge&quot;&gt;TargetType&lt;/code&gt;, and you will have to &lt;a href=&quot;https://github.com/Moya/Moya/blob/master/docs/Targets.md&quot;&gt;conform to 7 methods&lt;/a&gt;. The example shows for only &lt;code class=&quot;highlighter-rouge&quot;&gt;path&lt;/code&gt;, which are the endpoints for each case.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TargetType&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;allPopularMovies&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;movie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;allPopularMovies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/movies/popular&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;movie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;movieId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/movies/&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;movieId&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I will not go into details for the other 6 methods, as they are easy to understand from the method names. You can also refer to Moya’s &lt;a href=&quot;https://github.com/Moya/Moya/blob/master/docs/Examples/Basic.md&quot;&gt;basic example&lt;/a&gt; and &lt;a href=&quot;https://github.com/Moya/Moya/tree/master/docs/Examples&quot;&gt;more&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;testingstubbing&quot;&gt;Testing/Stubbing&lt;/h2&gt;

&lt;p&gt;Instead, I will discuss on unit testing with Moya.&lt;/p&gt;

&lt;p&gt;Too much stubbing is bad in testing, but for server-client API, stubbing is good because it gives:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;consistent response independent from server&lt;/li&gt;
  &lt;li&gt;immediate response&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Moya is built with &lt;a href=&quot;https://github.com/Moya/Moya/blob/master/docs/Testing.md&quot;&gt;testing&lt;/a&gt; in mind. But I didn’t like that &lt;code class=&quot;highlighter-rouge&quot;&gt;sampleData&lt;/code&gt; is a required method in &lt;code class=&quot;highlighter-rouge&quot;&gt;TargetType&lt;/code&gt; protocol.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Because if you stub there, then your production app will contain the stubs.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If stub with JSON files (aka test fixtures), then your app will have to include those files..&lt;/p&gt;

&lt;p&gt;My solution is to stub only when creating a mock provider in my &lt;strong&gt;unit tests&lt;/strong&gt;. Therefore in my Target, simply return nothing for &lt;code class=&quot;highlighter-rouge&quot;&gt;sampleData&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;sampleData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Data&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then in unit test target, set up like this:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;APITests&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;XCTestCase&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;provider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MoyaProvider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;MyService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;!&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setUp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setUp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// A mock provider with a mocking `endpointClosure` that stub immediately&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;provider&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MoyaProvider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;MyService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;endpointClosure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;customEndpointClosure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;stubClosure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MoyaProvider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;immediatelyStub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;customEndpointClosure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Endpoint&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Endpoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;absoluteString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                        &lt;span class=&quot;nv&quot;&gt;sampleResponseClosure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;networkResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testSampleData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
                        &lt;span class=&quot;nv&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                        &lt;span class=&quot;nv&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                        &lt;span class=&quot;nv&quot;&gt;httpHeaderFields&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The gist is that I create a mock provider using a custom &lt;code class=&quot;highlighter-rouge&quot;&gt;endpointClousure&lt;/code&gt;, which in the &lt;code class=&quot;highlighter-rouge&quot;&gt;sampleResponseClosure&lt;/code&gt;, I use my own &lt;code class=&quot;highlighter-rouge&quot;&gt;testSampleData&lt;/code&gt;, which is implemented with an extension in the unit test.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyService&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;testSampleData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Data&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;allPopularMovies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// Returning all-popular-movies.json&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;APITests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;forResource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;all-popular-movies&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;withExtension&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;json&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try!&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;contentsOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once again:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sampleData&lt;/code&gt; - &lt;code class=&quot;highlighter-rouge&quot;&gt;TargetType&lt;/code&gt; protocol method which we don’t utilize&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;testSampleData&lt;/code&gt; - custom extension in unit test that returns a test fixture JSON&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 23 May 2018 07:10:15 +0800</pubDate>
        <link>https://samwize.com/2018/05/23/guide-to-using-moya-for-api-services/</link>
        <guid isPermaLink="true">https://samwize.com/2018/05/23/guide-to-using-moya-for-api-services/</guid>
        
        
        <category>API</category>
        
        <category>Testing</category>
        
      </item>
    
      <item>
        <title>Photos App &amp; EXIF Location Data</title>
        <description>&lt;p&gt;Location, or any metadata, can be saved in 2 places:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;In Photos app’s database&lt;/li&gt;
  &lt;li&gt;In the jpg/heic/dng/mov files&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You WILL have to do both for an iOS app, because if you don’t, then you will lose the information along the way eg importing.&lt;/p&gt;

&lt;h2 id=&quot;1-photos-apps-database&quot;&gt;1. Photos app’s database&lt;/h2&gt;

&lt;p&gt;Let’s start with the easy one.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/documentation/photos/phassetcreationrequest&quot;&gt;PHAssetCreationRequest&lt;/a&gt; makes it very easy to add the location data to the database.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;PHPhotoLibrary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;shared&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;performChanges&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;creationRequest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PHAssetCreationRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;forAsset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;creationRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;latestLocation&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;creationRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addResource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;photo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;photoData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can also set the &lt;code class=&quot;highlighter-rouge&quot;&gt;creationDate&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;isFavorite&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;the-problem&quot;&gt;The Problem&lt;/h2&gt;

&lt;p&gt;If you do (1), but not (2), then when the photo is imported into macOS/Windows, surprisingly, even using Apple’s Photo app, metadata will be lost.&lt;/p&gt;

&lt;p&gt;When importing, only the &lt;strong&gt;metadata in the file&lt;/strong&gt; is used.&lt;/p&gt;

&lt;p&gt;So you need to write metadata to the file, and that is HARDER.&lt;/p&gt;

&lt;h2 id=&quot;2-writing-metadata-to-file&quot;&gt;2. Writing metadata to file&lt;/h2&gt;

&lt;p&gt;If you are using AVFoundation to capture photo, then it is relatively easy. There is a &lt;a href=&quot;https://developer.apple.com/documentation/avfoundation/avcapturephoto/2875953-filedatarepresentation&quot;&gt;variant of &lt;code class=&quot;highlighter-rouge&quot;&gt;fileDataRepresentation&lt;/code&gt;&lt;/a&gt; that can take in the metadata.&lt;/p&gt;

&lt;p&gt;This is what you do in the &lt;code class=&quot;highlighter-rouge&quot;&gt;AVCapturePhotoCaptureDelegate&lt;/code&gt; method:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;photoOutput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AVCapturePhotoOutput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;didFinishProcessingPhoto&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;photo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AVCapturePhoto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;metadata&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;photo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;metadata&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kCGImagePropertyGPSDictionary&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gpsMetadata&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;photoData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;photo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fileDataRepresentation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;withReplacementMetadata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;replacementEmbeddedThumbnailPhotoFormat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;photo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;embeddedThumbnailPhotoFormat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;replacementEmbeddedThumbnailPixelBuffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;replacementDepthData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;photo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;depthData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With the &lt;code class=&quot;highlighter-rouge&quot;&gt;photoData&lt;/code&gt;, you can save to file or add to Photos using &lt;code class=&quot;highlighter-rouge&quot;&gt;PHAssetCreationRequest&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;using-image-io-and-other-frameworks&quot;&gt;Using Image I/O and other frameworks&lt;/h2&gt;

&lt;p&gt;If you are not capturing photo using AVFoundation, then you don’t have the luxury of the above to get the &lt;code class=&quot;highlighter-rouge&quot;&gt;fileDataRepresentation&lt;/code&gt; along with the metadata.&lt;/p&gt;

&lt;p&gt;In that case, you have to add metadata manually to the original image data.&lt;/p&gt;

&lt;p&gt;Image I/O Framework provides methods to &lt;a href=&quot;https://developer.apple.com/library/content/qa/qa1895/_index.html&quot;&gt;Modifying Image Metadata Without Recompressing Image (QA1895)&lt;/a&gt;, using &lt;a href=&quot;https://developer.apple.com/documentation/imageio/1465189-cgimagedestinationcopyimagesourc?language=objc&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CGImageDestinationCopyImageSource&lt;/code&gt;&lt;/a&gt;, which supports JPEG, PNG, PSD, TIFF.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;options_dict&lt;/code&gt; in the sample code is the metadata dictionary.&lt;/p&gt;

&lt;p&gt;Check out S/O answers like &lt;a href=&quot;https://stackoverflow.com/a/5294574/242682&quot;&gt;this&lt;/a&gt; or &lt;a href=&quot;https://stackoverflow.com/a/43376828/242682&quot;&gt;this&lt;/a&gt; (using Core Media).&lt;/p&gt;

&lt;p&gt;Assets Library framework (deprecated) also has it’s own methods to &lt;a href=&quot;https://developer.apple.com/library/content/qa/qa1622/_index.html&quot;&gt;Accessing Image Metadata in iOS (QA1622)&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;metadata&quot;&gt;Metadata&lt;/h2&gt;

&lt;p&gt;Wonder what kind of structure is &lt;code class=&quot;highlighter-rouge&quot;&gt;metadata&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;Metadata is a dictionary of dictionaries.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/documentation/imageio/cgimageproperties&quot;&gt;CGImageProperties&lt;/a&gt; has a reference to the dictionaries you can define. For example, &lt;a href=&quot;https://developer.apple.com/documentation/imageio/cgimageproperties/gps_dictionary_keys&quot;&gt;GPS has it’s own dictionary keys&lt;/a&gt;, so does &lt;a href=&quot;https://developer.apple.com/documentation/imageio/cgimageproperties/exif_dictionary_keys&quot;&gt;EXIF&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// gpsMetadata and exifMetadata are 2 dictionaries&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kCGImagePropertyGPSDictionary&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gpsMetadata&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kCGImagePropertyExifDictionary&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exifMetadata&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There is a helper on turning &lt;code class=&quot;highlighter-rouge&quot;&gt;CLLocation&lt;/code&gt; into the &lt;a href=&quot;https://stackoverflow.com/a/5314634/242682&quot;&gt;GPS data in a dictionary&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A &lt;a href=&quot;https://gist.github.com/kwylez/a4b6ec261e52970e1fa5dd4ccfe8898f&quot;&gt;Swift extension&lt;/a&gt; is kindly available too.&lt;/p&gt;
</description>
        <pubDate>Thu, 17 May 2018 11:55:05 +0800</pubDate>
        <link>https://samwize.com/2018/05/17/photos-app-and-exif-location-data/</link>
        <guid isPermaLink="true">https://samwize.com/2018/05/17/photos-app-and-exif-location-data/</guid>
        
        
      </item>
    
      <item>
        <title>How to Vibrate an iPhone</title>
        <description>&lt;h2 id=&quot;1-audiotoolbox&quot;&gt;1. AudioToolbox&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Target &amp;gt; Linked Frameworks and Libraries &amp;gt; Add &lt;strong&gt;AudioToolbox&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;import AudioToolbox&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AudioServicesPlaySystemSoundWithCompletion(kSystemSoundID_Vibrate, nil)&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It is that simple using &lt;a href=&quot;https://developer.apple.com/documentation/audiotoolbox/1405248-audioservicesplaysystemsound&quot;&gt;AudioServicesPlaySystemSound API&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;2-haptic-api&quot;&gt;2. Haptic API&lt;/h2&gt;

&lt;p&gt;In iOS 10, there is a new API, making use of the new haptic engine in iPhone.&lt;/p&gt;

&lt;p&gt;The API is very simple, with 3 concrete classes to &lt;a href=&quot;https://developer.apple.com/documentation/uikit/uifeedbackgenerator&quot;&gt;UIFeedbackGenerator&lt;/a&gt;. Use accordingly to your scenario.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;c1&quot;&gt;// UI &quot;impact&quot;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;UIImpactFeedbackGenerator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;light&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;impactOccurred&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;UIImpactFeedbackGenerator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;medium&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;impactOccurred&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;UIImpactFeedbackGenerator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;heavy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;impactOccurred&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Selection changed&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;UISelectionFeedbackGenerator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;selectionChanged&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Notifications&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;UINotificationFeedbackGenerator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;notificationOccurred&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;UINotificationFeedbackGenerator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;notificationOccurred&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;UINotificationFeedbackGenerator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;notificationOccurred&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;warning&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// To be complete, this is the vibration using AudioToolbox&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;AudioServicesPlaySystemSoundWithCompletion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kSystemSoundID_Vibrate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;pitfall-does-not-work-along-with-other-audio-session&quot;&gt;Pitfall: Does not work along with other audio session&lt;/h2&gt;

&lt;p&gt;There is a &lt;a href=&quot;https://developer.apple.com/documentation/audiotoolbox/1405202-audioservicesplayalertsound&quot;&gt;note&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;However, the device does not vibrate if your app’s audio session is configured with the AVAudioSessionCategoryPlayAndRecord or AVAudioSessionCategoryRecord audio session category.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;While the note is for &lt;code class=&quot;highlighter-rouge&quot;&gt;AudioServicesPlayAlertSound&lt;/code&gt;, it is applicable to &lt;code class=&quot;highlighter-rouge&quot;&gt;AudioServicesPlaySystemSound&lt;/code&gt; too.&lt;/p&gt;

&lt;p&gt;As long as you have a audio session (via AVAudioPlayer, AVCaptureMovieFileOutput, etc), then the phone will NOT vibrate.&lt;/p&gt;
</description>
        <pubDate>Mon, 30 Apr 2018 09:49:03 +0800</pubDate>
        <link>https://samwize.com/2018/04/30/how-to-vibrate-an-iphone/</link>
        <guid isPermaLink="true">https://samwize.com/2018/04/30/how-to-vibrate-an-iphone/</guid>
        
        
      </item>
    
      <item>
        <title>What is Bundle?</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/documentation/foundation/bundle&quot;&gt;Bundle&lt;/a&gt; represents a directory. It &lt;a href=&quot;https://developer.apple.com/library/content/documentation/CoreFoundation/Conceptual/CFBundles/AboutBundles/AboutBundles.html&quot;&gt;groups resources&lt;/a&gt; together.&lt;/p&gt;

&lt;h2 id=&quot;application&quot;&gt;Application&lt;/h2&gt;

&lt;p&gt;In a typical application, all of your assets, images, strings, resources and code will be in the “main bundle”.&lt;/p&gt;

&lt;p&gt;To be convenient, resource classes provide sensible default to use.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// NSLocalizedString function signature has a default bundle&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;NSLocalizedString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tableName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bundle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;comment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;a href=&quot;https://stackoverflow.com/q/24991791/242682&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;default&lt;/code&gt;&lt;/a&gt; is &lt;code class=&quot;highlighter-rouge&quot;&gt;Bundle.main&lt;/code&gt;. So you don’t have to specify explicitly.&lt;/p&gt;

&lt;p&gt;Without surprise, &lt;a href=&quot;https://developer.apple.com/documentation/uikit/uiimage/1624146-init&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UIImage&lt;/code&gt; initialization&lt;/a&gt; uses the main bundle too. And if you want to specific another bundle you could use the &lt;a href=&quot;https://developer.apple.com/documentation/uikit/uiimage/1624154-init&quot;&gt;other init&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But the default to use main bundle is not applicable to frameworks and playgrounds.&lt;/p&gt;

&lt;h2 id=&quot;framework&quot;&gt;Framework&lt;/h2&gt;

&lt;p&gt;When you are developing a framework, you should NOT use &lt;code class=&quot;highlighter-rouge&quot;&gt;Bundle.main&lt;/code&gt;, because that is the app’s bundle.&lt;/p&gt;

&lt;p&gt;Your resources is in your framework’s bundle.&lt;/p&gt;

&lt;p&gt;Therefore the default main bundle that &lt;code class=&quot;highlighter-rouge&quot;&gt;NSLocalizedString&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;UIImage&lt;/code&gt; use will fail in when you are developing a framework.&lt;/p&gt;

&lt;p&gt;The correct way:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;frameworkBundle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyFrameworkClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;stringInFramework&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSLocalizedString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;frameworkBundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;comment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;imageInFramework&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;named&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;img&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;frameworkBundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;compatibleWith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Bundle(for:)&lt;/code&gt; conveniently find the bundle that contains the class. You could use any other class in your framework to replace &lt;code class=&quot;highlighter-rouge&quot;&gt;MyFrameworkClass&lt;/code&gt;. It works because all code and resources will be in the same bundle for a framework.&lt;/p&gt;

&lt;h2 id=&quot;playground&quot;&gt;Playground&lt;/h2&gt;

&lt;p&gt;Playground is another special case.&lt;/p&gt;

&lt;p&gt;Try running this in playground to see the &lt;code class=&quot;highlighter-rouge&quot;&gt;bundlePath&lt;/code&gt; (the file URL path).&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;Bundle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bundlePath&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;Bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Framework1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bundlePath&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;Bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Framework2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bundlePath&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The URL will look like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~/Library/Developer/XCPGDevices/x-x-x/data/Containers/Bundle/Application/y-y-y/UIPlayground-28059-1.app
~/Library/Developer/Xcode/DerivedData/App-xyz/Build/Products/Debug-iphonesimulator/Framework1.framework
~/Library/Developer/Xcode/DerivedData/App-xyz/Build/Products/Debug-iphonesimulator/Framework2.framework
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you add your resources to the “Resources” group in Playground, then the main bundle will contain the resources.&lt;/p&gt;

&lt;p&gt;But if you need a resource from a framework, then you need the bundle for the framework.&lt;/p&gt;

&lt;h2 id=&quot;the-complicated-case&quot;&gt;The Complicated Case&lt;/h2&gt;

&lt;p&gt;In our previous tutorial that &lt;a href=&quot;/2017/10/05/adding-playground-to-an-existing-project/&quot;&gt;uses Playground to create application’s UI&lt;/a&gt;, the scenario is complicated because the same resource is used in 2 targets:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The app&lt;/li&gt;
  &lt;li&gt;The framework for playground (&lt;code class=&quot;highlighter-rouge&quot;&gt;MyUIPlaygroundFramework&lt;/code&gt;)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For such case, the resource has to specify the bundle correctly.&lt;/p&gt;

&lt;p&gt;The trick is to make use of a class that &lt;strong&gt;exists in both&lt;/strong&gt; the app and framework.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bundle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CommonClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When you use in app, &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle&lt;/code&gt; will be main bundle.&lt;/p&gt;

&lt;p&gt;When you use in framework, &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle&lt;/code&gt; will be the framework’s bundle.&lt;/p&gt;
</description>
        <pubDate>Fri, 27 Apr 2018 17:01:16 +0800</pubDate>
        <link>https://samwize.com/2018/04/27/what-is-bundle/</link>
        <guid isPermaLink="true">https://samwize.com/2018/04/27/what-is-bundle/</guid>
        
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>Setup AppDelegate Without Storyboard</title>
        <description>&lt;p&gt;When you create a new project in Xcode, the default boilerplate includes a &lt;code class=&quot;highlighter-rouge&quot;&gt;Main.storyboard&lt;/code&gt; with a view controller that will be initialized when the app is launched.&lt;/p&gt;

&lt;p&gt;If you are going with no-storyboard approach, then you need 2 steps to remove the storyboard.&lt;/p&gt;

&lt;h2 id=&quot;1-remove-mainstoryboard&quot;&gt;1. Remove Main.storyboard&lt;/h2&gt;

&lt;p&gt;Delete the storyboard file.&lt;/p&gt;

&lt;p&gt;The only reference to the storyboard file is in the target settings.&lt;/p&gt;

&lt;p&gt;Go to App Target &amp;gt; General &amp;gt; Deployment Info &amp;gt; Main Interface &amp;gt; delete “Main”.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/xcode-main-interface.jpg&quot; alt=&quot;&quot; class=&quot;border&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Leave it blank, as we will create the main interface with code in the next step.&lt;/p&gt;

&lt;h2 id=&quot;2-create-main-window&quot;&gt;2. Create main window&lt;/h2&gt;

&lt;p&gt;We need to create the window manually, when the app is launched.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;didFinishLaunchingWithOptions&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;launchOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;UIApplicationLaunchOptionsKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]?)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;window&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIScreen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bounds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rootViewController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;makeKeyAndVisible&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That’s it! Not that hard at all without storyboard.&lt;/p&gt;
</description>
        <pubDate>Wed, 04 Apr 2018 22:29:45 +0800</pubDate>
        <link>https://samwize.com/2018/04/04/setup-appdelegate-without-storyboard/</link>
        <guid isPermaLink="true">https://samwize.com/2018/04/04/setup-appdelegate-without-storyboard/</guid>
        
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>Nested UIViewControllers Using Container</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/library/content/featuredarticles/ViewControllerPGforiPhoneOS/ImplementingaContainerViewController.html&quot;&gt;Container view controller&lt;/a&gt; is a new concept from iOS 5.&lt;/p&gt;

&lt;p&gt;Yet prior to iOS 5, we have always been using containers, just that we didn’t know..&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UINavigationController&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;UITabBarController&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;UISplitViewController&lt;/code&gt; – they are all container view controllers, without us knowing!&lt;/p&gt;

&lt;h2 id=&quot;what-is-a-container&quot;&gt;What is a container?&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;A container view controller embeds the content of other view controllers into its own root view. A container view controller may mix custom views with the contents of its child view controllers to facilitate navigation or to create unique interfaces.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For example, a &lt;code class=&quot;highlighter-rouge&quot;&gt;UINavigationController&lt;/code&gt; manages a navigation bar (a custom view) and a stack of child view controllers (only one of which is visible at a time), and provides an API to add and remove child view controllers from the stack.&lt;/p&gt;

&lt;p&gt;Your custom container is a &lt;strong&gt;parent&lt;/strong&gt; (aka root) view controller and will be managing it’s &lt;strong&gt;children&lt;/strong&gt; view controllers. It is up to the container to render the whole view.&lt;/p&gt;

&lt;h2 id=&quot;when-should-you-use-container-view-controllers&quot;&gt;When should you use Container View Controllers?&lt;/h2&gt;

&lt;p&gt;It is not entirely clear when developers should use, or not use.&lt;/p&gt;

&lt;p&gt;Remember: Container is a technique for managing multiple view controllers, usually handling the navigation and the transition effect. It is &lt;em&gt;entirely possible to not use&lt;/em&gt; custom container, and we obviously could not use it prior to iOS 5.&lt;/p&gt;

&lt;p&gt;What is an alternative?&lt;/p&gt;

&lt;p&gt;An alternative is to manage multiple views (not view controllers).&lt;/p&gt;

&lt;p&gt;When possible, you should NOT use container, especially if you are using simple views (not full blown view controller). &lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/a/5789009/242682&quot;&gt;Defines UIView vs UIViewController&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;scenario-nested-view-controllers&quot;&gt;Scenario: Nested View Controllers&lt;/h3&gt;

&lt;p&gt;Let’s discuss a very common scenario where we use container to simple nest other view controllers.&lt;/p&gt;

&lt;p&gt;If you use Xcode interface builder, you can easily drag a container view to the storyboard, and automatically a child view controller will be added onto the storyboard.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/xcode-container-nested.png&quot; alt=&quot;Drag and drop 2 container views&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Using container in this way is simply to nest multiple view controllers in a parent view controller.&lt;/p&gt;

&lt;p&gt;Note: “Child A” and “Child B” are simply &lt;code class=&quot;highlighter-rouge&quot;&gt;UIView&lt;/code&gt;, aka container view, defined as:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A region of a view controller that can include a child view controller&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There is a benefit to using container in a storyboard. In the screenshot, “Child B” is actually right on top and obscuring “Child A”.&lt;/p&gt;

&lt;p&gt;Yet, because of container, you can see and design the individual child view controllers!&lt;/p&gt;

&lt;p&gt;But, if you are coming from &lt;em&gt;no-storyboard pure coding way&lt;/em&gt;, then using container and nested view controllers will not be an apparent solution. Because with code, you don’t have the problem of interface builder, and you are used to creating custom views (in your mind!), even when they overlap.&lt;/p&gt;

&lt;p&gt;I prefer the way of no-storyboard, so for the scenario of simply nesting multiple views, you should not use container.&lt;/p&gt;

&lt;h3 id=&quot;checklist-to-using-container&quot;&gt;Checklist to using container&lt;/h3&gt;

&lt;p&gt;If you answer all/many YES to this checklist, then go ahead and use container.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Child view controller is independent to the parent&lt;/li&gt;
  &lt;li&gt;Child view controller is equivalent to a screen&lt;/li&gt;
  &lt;li&gt;Child view controller determines the status bar style&lt;/li&gt;
  &lt;li&gt;Child view controller requires &lt;code class=&quot;highlighter-rouge&quot;&gt;viewDidAppear&lt;/code&gt; etc events&lt;/li&gt;
  &lt;li&gt;Child is a view controller, and not just a view&lt;/li&gt;
  &lt;li&gt;Parent view controller navigate (push/popping/mixing) the child view controllers&lt;/li&gt;
  &lt;li&gt;Parent view controller controls the transition effects when navigating&lt;/li&gt;
  &lt;li&gt;Parent view controller probably showing 1 or 2 child at 1 time&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If not, fallback to regular views.&lt;/p&gt;

&lt;h2 id=&quot;adding-a-child-view-controller&quot;&gt;Adding a child view controller&lt;/h2&gt;

&lt;p&gt;You need &lt;a href=&quot;https://developer.apple.com/library/content/featuredarticles/ViewControllerPGforiPhoneOS/ImplementingaContainerViewController.html#//apple_ref/doc/uid/TP40007457-CH11-SW13&quot;&gt;these steps&lt;/a&gt;:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Container view controller to call &lt;code class=&quot;highlighter-rouge&quot;&gt;addChildViewController&lt;/code&gt;, so that UIKit knows your container is now managing the child view controller.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Add the child’s view to your container’s view hierarchy.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Setup auto layout constraints for the child’s view.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Child view controller to call &lt;code class=&quot;highlighter-rouge&quot;&gt;didMoveToParentViewController&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Creating the child in Parent's viewDidLoad&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;child&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyChildViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;addChildViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addSubview&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Setup auto layout constraints for child.view..&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;didMove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;toParentViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To remove a child view controller, you undo the with the corresponding methods.&lt;/p&gt;

&lt;h2 id=&quot;the-awkward-design-of-container-view-controller&quot;&gt;The (awkward) design of container view controller&lt;/h2&gt;

&lt;p&gt;You might have noticed by now.&lt;/p&gt;

&lt;p&gt;A container (parent) view controller is simply &lt;code class=&quot;highlighter-rouge&quot;&gt;UIViewController&lt;/code&gt;, and the children are also &lt;code class=&quot;highlighter-rouge&quot;&gt;UIViewController&lt;/code&gt;. Kind of bad design overloading 2 types.&lt;/p&gt;

&lt;p&gt;Then there are some methods specifically for them:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;addChildViewController(_:)&lt;/code&gt; - only parent should call&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;removeFromParentViewController()&lt;/code&gt; - only child should call&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;willMove(toParentViewController:)&lt;/code&gt; - only child should call&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;didMove(toParentViewController:)&lt;/code&gt; - only child should call&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You have to be careful what you can, and should, call.&lt;/p&gt;

&lt;p&gt;Rotation and appearance callbacks are automatically propagated from parent to children.&lt;/p&gt;
</description>
        <pubDate>Wed, 21 Mar 2018 16:33:12 +0800</pubDate>
        <link>https://samwize.com/2018/03/21/nested-uiviewcontrollers-using-container-views/</link>
        <guid isPermaLink="true">https://samwize.com/2018/03/21/nested-uiviewcontrollers-using-container-views/</guid>
        
        
        <category>UI</category>
        
      </item>
    
      <item>
        <title>How to Setup Free SSL for Github Pages</title>
        <description>&lt;p&gt;SSL/HTTPS is now &lt;a href=&quot;https://searchengineland.com/effective-july-2018-googles-chrome-browser-will-mark-non-https-sites-as-not-secure-291623&quot;&gt;almost mandatory&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Good news is, we can easily setup SSL with &lt;a href=&quot;https://www.Cloudflare.com&quot;&gt;Cloudflare&lt;/a&gt;, and it’s free!&lt;/p&gt;

&lt;h2 id=&quot;requirements&quot;&gt;Requirements&lt;/h2&gt;

&lt;p&gt;Make sure you already have a website hosted on Github Pages, and serving via your own domain name.&lt;/p&gt;

&lt;p&gt;If not, &lt;a href=&quot;/2015/09/02/how-to-host-a-website-on-github-pages/&quot;&gt;get your website running&lt;/a&gt; first.&lt;/p&gt;

&lt;p&gt;Then register a &lt;a href=&quot;https://www.Cloudflare.com&quot;&gt;Cloudflare&lt;/a&gt; account.&lt;/p&gt;

&lt;h2 id=&quot;setup-on-cloudflare&quot;&gt;Setup on Cloudflare&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;In Cloudflare &amp;gt; “Add Site” &amp;gt; Enter your website domain name&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Cloudflare automatically copy your DNS records, but you should double check them&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In your domain registrar, change the nameservers to that provided by Cloudflare – eg. &lt;code class=&quot;highlighter-rouge&quot;&gt;mia.ns.Cloudflare.com&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;yichun.ns.Cloudflare.com&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That’s it!&lt;/p&gt;

&lt;h2 id=&quot;the-thing-about-page-rules&quot;&gt;The Thing About Page Rules&lt;/h2&gt;

&lt;p&gt;Cloudflare’s Page Rules is like nginx configuration. You can rewrite URLs, configure cache settings, redirects, etc.&lt;/p&gt;

&lt;p&gt;For simple redirection/forwarding, you &lt;a href=&quot;https://support.cloudflare.com/hc/en-us/articles/200168306-Is-there-a-tutorial-for-Page-Rules-#redirects&quot;&gt;need 1 page rule&lt;/a&gt; for every redirect.&lt;/p&gt;

&lt;p&gt;Cloudflare free plan provides only 3 page rules.&lt;/p&gt;

&lt;p&gt;Argh, that’s the caveat of being free.&lt;/p&gt;
</description>
        <pubDate>Tue, 20 Mar 2018 17:58:01 +0800</pubDate>
        <link>https://samwize.com/2018/03/20/how-to-setup-free-ssl-for-github-pages/</link>
        <guid isPermaLink="true">https://samwize.com/2018/03/20/how-to-setup-free-ssl-for-github-pages/</guid>
        
        
        <category>Website</category>
        
        <category>Github</category>
        
      </item>
    
      <item>
        <title>Swift Lint to Improve Code Quality</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://github.com/realm/SwiftLint&quot;&gt;SwiftLint&lt;/a&gt; helps to enforce coding style.&lt;/p&gt;

&lt;p&gt;It is useful when working in a team because warnings &amp;amp; errors are produced when the code is &lt;em&gt;not up to standard&lt;/em&gt;. The rules are fully customizable according to a team needs.&lt;/p&gt;

&lt;p&gt;This guide will be on how to setup &lt;a href=&quot;https://github.com/realm/SwiftLint&quot;&gt;SwiftLint&lt;/a&gt; for an existing project, and with Fastlane.&lt;/p&gt;

&lt;h2 id=&quot;step-1-install-the-tool&quot;&gt;Step 1. Install the tool&lt;/h2&gt;

&lt;p&gt;Add to &lt;code class=&quot;highlighter-rouge&quot;&gt;Podfile&lt;/code&gt; and do a &lt;code class=&quot;highlighter-rouge&quot;&gt;pod install&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pod 'SwiftLint'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;step-2-run-script-on-build&quot;&gt;Step 2. Run script on build&lt;/h2&gt;

&lt;p&gt;In &lt;strong&gt;Target &amp;gt; Build Phases &amp;gt; New Run Script Phase&lt;/strong&gt;, add&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;${PODS_ROOT}/SwiftLint/swiftlint&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, whenever you build the target, swiftlint will run.&lt;/p&gt;

&lt;p&gt;If you run with an existing project, it is likely to have warnings/errors. This is because the default rules are being used.&lt;/p&gt;

&lt;h2 id=&quot;step-3-customize-the-rules&quot;&gt;Step 3. Customize the rules&lt;/h2&gt;

&lt;p&gt;You can find &lt;a href=&quot;https://github.com/realm/SwiftLint/blob/master/Rules.md&quot;&gt;all the rules&lt;/a&gt; in the wiki. By default, around 70% are enabled.&lt;/p&gt;

&lt;p&gt;You can &lt;a href=&quot;https://github.com/realm/SwiftLint#configuration&quot;&gt;customize the rules&lt;/a&gt; with a &lt;code class=&quot;highlighter-rouge&quot;&gt;.swiftlint.yml&lt;/code&gt; file in the root folder.&lt;/p&gt;

&lt;p&gt;Let’s take a look at how the configuration file works:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# You can disable rules that have been enabled by default&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;disabled_rules&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;identifier_name&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;force_cast&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Similarly, you can enable rules that have been disabled by default&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;opt_in_rules&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;first_where&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Exclude directories that you don't want to lint&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;excluded&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Pods&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;fastlane&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Use &quot;xcode&quot; so that when you build, the result will be shown in Xcode&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;reporter&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;xcode&quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Other reporters: json, csv, checkstyle, junit, html, emoji&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# The rule `function_body_length` by default triggers warning at 40, error at 100&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# This example increases by 3 times&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;function_body_length&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;warning&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;120&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;300&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Sometimes, you want to dig into the &lt;a href=&quot;https://github.com/realm/SwiftLint/tree/master/Source/SwiftLintFramework/Rules&quot;&gt;code for each rule&lt;/a&gt; to understand how it works.&lt;/p&gt;

&lt;p&gt;And you can also create &lt;a href=&quot;https://github.com/realm/SwiftLint#defining-custom-rules&quot;&gt;custom rules&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;step-4-integrate-with-fastlane&quot;&gt;Step 4. Integrate with fastlane&lt;/h2&gt;

&lt;p&gt;You can already see the warnings whenever you build in Xcode.&lt;/p&gt;

&lt;p&gt;Integrating with Fastlane is for another purpose – to generate a HTML report.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Add a lane in Fastfile&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;desc&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Run lint&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;lane&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:lint&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;swiftlint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;mode: :lint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;executable: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Pods/SwiftLint/swiftlint&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;reporter: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;html&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;output_file: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;swiftlint-results.html&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;ignore_exit_status: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The difference with using fastlane is that the reporter is set to &lt;strong&gt;html&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;You can run &lt;code class=&quot;highlighter-rouge&quot;&gt;fastlane lint&lt;/code&gt; manually, and open up swiftlint-results.html to see all the violations.&lt;/p&gt;

&lt;h2 id=&quot;step-5-autocorrect&quot;&gt;Step 5. Autocorrect&lt;/h2&gt;

&lt;p&gt;Swiftlint has magic.&lt;/p&gt;

&lt;p&gt;For some rules, the tool can automatically fix your code! You are lucky if a rule &lt;a href=&quot;https://github.com/realm/SwiftLint/blob/master/Rules.md&quot;&gt;&lt;strong&gt;supports autocorrection&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Add another lane that run autocorrect mode&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;desc&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Run lint autocorrect&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;lane&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:lint_autocorrect&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;swiftlint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;mode: :autocorrect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;executable: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Pods/SwiftLint/swiftlint&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;config_file: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.swiftlint-autocorrect.yml&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note that we use a different config file &lt;code class=&quot;highlighter-rouge&quot;&gt;.swiftlint-autocorrect.yml&lt;/code&gt;. And in this file, we use another approach to specify the rules – whitelisting.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Only work with these rules&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;whitelist_rules&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;trailing_whitespace&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;trailing_newline&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;vertical_whitespace&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Run &lt;code class=&quot;highlighter-rouge&quot;&gt;fastlane lint_autocorrect&lt;/code&gt; and watch the magic happens.&lt;/p&gt;

&lt;h2 id=&quot;step-6-disable-rules-in-code&quot;&gt;Step 6: Disable rules in code&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Rules are meant to be broken.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Sometimes, you knowingly break rules.&lt;/p&gt;

&lt;p&gt;When that happens, and you really want it that way, you can disable the rule &lt;a href=&quot;https://github.com/realm/SwiftLint#disable-rules-in-code&quot;&gt;in code&lt;/a&gt; on a case-by-case basis.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// swiftlint:disable force_cast&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Now the rule force_cast is disabled&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;noWarning&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as!&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Re-enable back the rules&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// swiftlint:enable force_cast&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Disable with `this` (inline), `next` (next line) or `previous`&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;noWarning&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as!&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// swiftlint:disable:this force_cast&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;summary-the-approach-for-an-existing-project&quot;&gt;Summary: The approach for an existing project&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Use the default rules&lt;/li&gt;
  &lt;li&gt;Build&lt;/li&gt;
  &lt;li&gt;Fix a rule by either:
    &lt;ol&gt;
      &lt;li&gt;Autocorrect, if possible&lt;/li&gt;
      &lt;li&gt;Remove it by adding to &lt;code class=&quot;highlighter-rouge&quot;&gt;disabled_rules&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Customize it&lt;/li&gt;
      &lt;li&gt;Disable in code&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When all the default rules are “fixed”, go through the rules that are disabled by default. Add them to &lt;code class=&quot;highlighter-rouge&quot;&gt;opt_in_rules&lt;/code&gt;, if useful.&lt;/p&gt;

&lt;h2 id=&quot;bonus-rule-trailing_whitespace&quot;&gt;Bonus: Rule trailing_whitespace&lt;/h2&gt;

&lt;p&gt;“Lines should not have trailing whitespace.”&lt;/p&gt;

&lt;p&gt;Xcode by default will have whitespace for empty lines, following the indentation. This is unecessary, a bad default, which you can change.&lt;/p&gt;

&lt;p&gt;Enable in &lt;strong&gt;Xcode Preferences &amp;gt; Text Editing &amp;gt; Including whitespace-only lines&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/xcode-preference-whitelines.jpg&quot; alt=&quot;Xcode Preferences&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 08 Mar 2018 13:43:08 +0800</pubDate>
        <link>https://samwize.com/2018/03/08/swift-lint-to-improve-code-quality/</link>
        <guid isPermaLink="true">https://samwize.com/2018/03/08/swift-lint-to-improve-code-quality/</guid>
        
        
        <category>Swift</category>
        
        <category>Code</category>
        
      </item>
    
  </channel>
</rss>
