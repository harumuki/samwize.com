<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>@samwize</title>
    <description>¯\_(ツ)_/¯
</description>
    <link>https://samwize.com/</link>
    <atom:link href="https://samwize.com/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Thu, 30 Jul 2020 17:37:12 +0800</pubDate>
    <lastBuildDate>Thu, 30 Jul 2020 17:37:12 +0800</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>Apple Is Guilty</title>
        <description>&lt;p&gt;I am an iPhone developer since 2008, and I am grateful for the mobile revolution that they started.&lt;/p&gt;

&lt;p&gt;But now, I find Apple &lt;em&gt;guilty&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Apple stifles innovation.&lt;/strong&gt; Even if they’re not a monopoly, they are definitely a bully. (Do watch the &lt;a href=&quot;https://youtu.be/H6eYLCxxQdA&quot;&gt;congress hearing&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;Tim Cook said:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;We apply all rules to all developers equally.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;Equality my ass.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/netflix-app-store-email.jpg&quot; alt=&quot;&quot; class=&quot;border&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.bloomberg.com/news/articles/2020-07-29/apple-considered-taking-40-cut-from-subscriptions-emails-show&quot;&gt;Netflix&lt;/a&gt; has a &lt;strong&gt;special deal&lt;/strong&gt; where they pay only 15%, while other developers pay 30%. Other &lt;em&gt;“reader apps”&lt;/em&gt; also had special treatment.&lt;/p&gt;

&lt;p&gt;Or if you can &lt;a href=&quot;https://techcrunch.com/2020/06/18/interview-apples-schiller-says-position-on-hey-app-is-unchanged-and-no-rules-changes-are-imminent/&quot;&gt;kick up a fuss&lt;/a&gt;, some SVP will do something for you.&lt;/p&gt;

&lt;p&gt;The treatments are &lt;a href=&quot;https://youdownloadtheappanditdoesntwork.com&quot;&gt;never consistent&lt;/a&gt;, partly because the &lt;strong&gt;rules are always changing&lt;/strong&gt;, and app reviewers varied in their line of work.&lt;/p&gt;

&lt;p&gt;I have &lt;a href=&quot;/2020/04/19/taking-down-concert-camera/&quot;&gt;no&lt;/a&gt; &lt;a href=&quot;/2019/09/20/i-am-no-longer-surprise-over-app-store-review-rejections/&quot;&gt;shortage&lt;/a&gt; of app review rejections, and the latest came 2 days ago, and it again show how inconsistent the rules are.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/radio_streams_need_authorization.jpg&quot; alt=&quot;&quot; class=&quot;border&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://just2us.com/sgradio/&quot;&gt;SG Radio&lt;/a&gt; is an Internet radio app that I have launched 10 years ago. Surprisingly, they (or this app reviewer) now deem streaming radio stations as IP infringement and asked for authorization documents.&lt;/p&gt;

&lt;p&gt;I am worried about my livelihood, which is &lt;em&gt;solely&lt;/em&gt; on Apple platform.&lt;/p&gt;

&lt;p&gt;Today, I am seriously considering other open platforms.&lt;/p&gt;

&lt;p&gt;As &lt;a href=&quot;https://daringfireball.net/2020/07/parsing_cooks_opening_statement&quot;&gt;Daring Fireball&lt;/a&gt; puts it:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;To omit the fact that there was — dating back to the mid-’90s, well over a decade before the iPhone App Store — a thriving market for software sold (and downloaded) directly over a thing called “The Internet” is sophistry.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/images/broken-apple.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 30 Jul 2020 16:51:43 +0800</pubDate>
        <link>https://samwize.com/2020/07/30/apple-is-guilty/</link>
        <guid isPermaLink="true">https://samwize.com/2020/07/30/apple-is-guilty/</guid>
        
        
        <category>Apple</category>
        
      </item>
    
      <item>
        <title>What Is Wrong With Xcode 12 Tabs</title>
        <description>&lt;p&gt;In new Xcode 12, there is a “new” tab system. There is a tabs within tabs. Something along &lt;em&gt;window tab&lt;/em&gt; or &lt;em&gt;document tab&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I cannot figure out what’s the point, except it frustrates me with how I navigate to previous/next tab using CMD+SHIFT+[ or ].&lt;/p&gt;

&lt;p&gt;And they haven’t fix in Beta 3.. so I switch back to the original tabs I know.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/xcode-12-tab-settings.jpg&quot; alt=&quot;Xcode Preference - Change to Open in place&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 28 Jul 2020 10:02:02 +0800</pubDate>
        <link>https://samwize.com/2020/07/28/what-is-wrong-with-xcode-12-tabs/</link>
        <guid isPermaLink="true">https://samwize.com/2020/07/28/what-is-wrong-with-xcode-12-tabs/</guid>
        
        
        <category>Xcode</category>
        
      </item>
    
      <item>
        <title>Platform Conditional Codes</title>
        <description>&lt;p&gt;Swift has provided us quite a few ways to write codes that work for specific platform, version, and language. Examples:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;Run code only for only iOS 13&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Run code only for Swift 5&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Run code only if can import SwiftUI&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;available&quot;&gt;#available&lt;/h2&gt;

&lt;p&gt;This is a &lt;strong&gt;runtime check&lt;/strong&gt;, so you can use in regular conditional statements.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;#available(iOS 13.6, macOSApplicationExtension 10.15, *)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;someOtherBoolean&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Fallback code&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://docs.swift.org/swift-book/ReferenceManual/Statements.html#grammar_availability-condition&quot;&gt;grammar&lt;/a&gt; for details.&lt;/p&gt;

&lt;p&gt;The trailing &lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt; denotes that it is available for all other platforms, so that future ones such as &lt;code class=&quot;highlighter-rouge&quot;&gt;glassOS&lt;/code&gt; will be supported, when release.&lt;/p&gt;

&lt;h2 id=&quot;available-1&quot;&gt;@available&lt;/h2&gt;

&lt;p&gt;This is an &lt;a href=&quot;https://docs.swift.org/swift-book/ReferenceManual/Attributes.html&quot;&gt;attribute&lt;/a&gt; that applies to types and properties. The grammar is same as &lt;code class=&quot;highlighter-rouge&quot;&gt;#available&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;@available&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iOS&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;My12Monkeys&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can also specify for language version:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;@available&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;swift&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// NOTE: Must be a lower case 's'&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;swift5Only&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can also annotate more info like this:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;@available&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iOS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;deprecated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;No reason&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;renamed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Singapore&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Singapura&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can also stack multiple attributes.&lt;/p&gt;

&lt;h2 id=&quot;canimport&quot;&gt;canImport()&lt;/h2&gt;

&lt;p&gt;This &lt;a href=&quot;https://github.com/apple/swift-evolution/blob/master/proposals/0075-import-test.md&quot;&gt;tests for modules&lt;/a&gt; availability.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#if canImport(SwiftUI)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// SwiftUI code&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#else&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Fallback to UIKit&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#endif&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;related&quot;&gt;Related&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/2019/02/26/preprocessor-codes-for-swift/&quot;&gt;Preprocessor Codes for Swift&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 22 Jul 2020 21:45:49 +0800</pubDate>
        <link>https://samwize.com/2020/07/22/platform-conditional-codes/</link>
        <guid isPermaLink="true">https://samwize.com/2020/07/22/platform-conditional-codes/</guid>
        
        
      </item>
    
      <item>
        <title>NavigationView for iOS and macOS</title>
        <description>&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NavigationView&lt;/code&gt; is the SwiftUI component to creating the UIKit’s &lt;em&gt;equivalent&lt;/em&gt; of &lt;code class=&quot;highlighter-rouge&quot;&gt;UINavigationController&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;UI/NSSplitViewController&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;While it is possible to share code between iOS and macOS, this post will show how to do for each platform individually, for clarity.&lt;/p&gt;

&lt;p&gt;There are also 2 types to know:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Standard Navigation: push and pop like &lt;code class=&quot;highlighter-rouge&quot;&gt;UINavigationController&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Split view/columns&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;ios-standard-navigation&quot;&gt;iOS: Standard Navigation&lt;/h2&gt;

&lt;p&gt;This is simple, using the &lt;code class=&quot;highlighter-rouge&quot;&gt;StackNavigationViewStyle()&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;NavigationView&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// This is the root view&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;NavigationLink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;destination&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Pushed view&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Push&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;navigationViewStyle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;StackNavigationViewStyle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;ios-split-view&quot;&gt;iOS: Split view&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/documentation/swiftui/navigationview&quot;&gt;NavigationView&lt;/a&gt; inits with a &lt;code class=&quot;highlighter-rouge&quot;&gt;ViewBuilder&lt;/code&gt; where the first view is the first panel, usually the sidebar. The subsequent views are the placeholders for the other panels.&lt;/p&gt;

&lt;p&gt;The navigation view uses &lt;code class=&quot;highlighter-rouge&quot;&gt;DoubleColumnNavigationViewStyle()&lt;/code&gt;, which is a split view with 2 columns. But you can do similarly for 3 columns.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SplitView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;NavigationView&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;panel1&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// View 1&lt;/span&gt;

            &lt;span class=&quot;kt&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Placeholder for Panel 2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// View 2&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;navigationViewStyle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;DoubleColumnNavigationViewStyle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;panel1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;VStack&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Panel 1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;NavigationLink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;destination&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;panel2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Change panel 2&lt;/span&gt;
                &lt;span class=&quot;kt&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Go to Panel 2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;panel2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Actual Panel 2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;macos&quot;&gt;macOS&lt;/h2&gt;

&lt;p&gt;The biggest difference with macOS is that:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;You need to provide the sizes for the panels, using &lt;code class=&quot;highlighter-rouge&quot;&gt;frame&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;There’s no &lt;code class=&quot;highlighter-rouge&quot;&gt;StackNavigationViewStyle()&lt;/code&gt;, so only column style is available&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SplitView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;NavigationView&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;panel1&lt;/span&gt;

            &lt;span class=&quot;kt&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Placeholder for Panel 2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;maxWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;infinity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;maxHeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;infinity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Fill content view&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// MUST provide the &quot;window size&quot;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;minWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;800&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;maxWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;infinity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;minHeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;maxHeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;infinity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;panel1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;VStack&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Panel 1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;NavigationLink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;destination&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;panel2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;kt&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Go to Panel 2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;minWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;idealWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;150&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;maxWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;maxHeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;infinity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Sidebar width&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;panel2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Panel 2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;maxWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;infinity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;maxHeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;infinity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Fill content view&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A typical layout is to have a smaller sidebar on the left, and a content view that fills the rest of the window.&lt;/p&gt;

&lt;p&gt;Again, &lt;code class=&quot;highlighter-rouge&quot;&gt;NavigationView&lt;/code&gt; can manage multiple columns.&lt;/p&gt;
</description>
        <pubDate>Tue, 21 Jul 2020 18:02:18 +0800</pubDate>
        <link>https://samwize.com/2020/07/21/guide-to-navigationview-for-ios-and-macos/</link>
        <guid isPermaLink="true">https://samwize.com/2020/07/21/guide-to-navigationview-for-ios-and-macos/</guid>
        
        
        <category>SwiftUI</category>
        
      </item>
    
      <item>
        <title>How to Present Full Screen Modal in SwiftUI</title>
        <description>&lt;p&gt;There is a new modifier in SwiftUI 2.0, announced in WWDC 2020, for iOS 14 (beta). &lt;em&gt;But the &lt;a href=&quot;https://developer.apple.com/documentation/swiftui/view/fullscreencover(ispresented:ondismiss:content:)&quot;&gt;API&lt;/a&gt; is actually back dated to iOS 13.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;fullscreencover&quot;&gt;fullScreenCover&lt;/h2&gt;

&lt;p&gt;It works similarly to &lt;a href=&quot;https://developer.apple.com/documentation/swiftui/view/sheet(ispresented:ondismiss:content:)&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sheet&lt;/code&gt;&lt;/a&gt;, but full screen.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PresentFullScreen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;@State&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;isPresentedFullScreen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Present Full Screen&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;isPresentedFullScreen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;toggle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fullScreenCover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;isPresented&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isPresentedFullScreen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;New Screen Presented&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Dismiss&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;isPresentedFullScreen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;toggle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;passing-an-item&quot;&gt;Passing an Item&lt;/h2&gt;

&lt;p&gt;You could also pass an optional Item binding. Then when it is non-nil, the view will be displayed.&lt;/p&gt;

&lt;p&gt;So if you have an item such as &lt;code class=&quot;highlighter-rouge&quot;&gt;@State var book = Book()&lt;/code&gt;, you can pass that into &lt;code class=&quot;highlighter-rouge&quot;&gt;fullScreenCover(item:)&lt;/code&gt;, then you can use it in the presented view.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fullScreenCover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;BookView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Tue, 21 Jul 2020 11:50:27 +0800</pubDate>
        <link>https://samwize.com/2020/07/21/how-to-present-full-screen-modal-in-swiftui/</link>
        <guid isPermaLink="true">https://samwize.com/2020/07/21/how-to-present-full-screen-modal-in-swiftui/</guid>
        
        
        <category>SwiftUI</category>
        
      </item>
    
      <item>
        <title>How to Localize Resources in Swift Packages</title>
        <description>&lt;p&gt;At last, in Swift 5.3, the updated Swift Package Manager (SPM) now supports resources! Yipee~&lt;/p&gt;

&lt;p&gt;This post is a guide to adding resources to your package.&lt;/p&gt;

&lt;h2 id=&quot;1-add-to-target&quot;&gt;1. Add to Target&lt;/h2&gt;

&lt;p&gt;The convention is to add them in a “Resources” subfolder for the &lt;strong&gt;target&lt;/strong&gt;. So if you have a target called &lt;code class=&quot;highlighter-rouge&quot;&gt;MyTarget&lt;/code&gt;, you will add resources to&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/Sources/MyTarget/Resources/&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;But you could actually add to &lt;em&gt;anywhere&lt;/em&gt; in “MyTarget”.&lt;/p&gt;

&lt;h2 id=&quot;2-edit-packageswift&quot;&gt;2. Edit Package.swift&lt;/h2&gt;

&lt;p&gt;Add &lt;code class=&quot;highlighter-rouge&quot;&gt;defaultLocalization&lt;/code&gt; to the &lt;strong&gt;package&lt;/strong&gt; descriptor.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;MyPackage&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;defaultLocalization&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;3-implicit--explicit-resources&quot;&gt;3. Implicit &amp;amp; Explicit Resources&lt;/h2&gt;

&lt;p&gt;Xcode automatically recognize for these &lt;strong&gt;known resources&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;XIB, storyboards&lt;/li&gt;
  &lt;li&gt;Core Data xcdatamodeld&lt;/li&gt;
  &lt;li&gt;Asset Catalogs&lt;/li&gt;
  &lt;li&gt;strings files&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.lproj&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So for the above known resources, there is nothing else to do.&lt;/p&gt;

&lt;p&gt;For for other resources, you need to declare them explicitly.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;targets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;MyLibrary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;resources&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;flu.jpg&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;pandemic.json&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Do NOT process&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;process&lt;/code&gt; will have Xcode optimize the resource for the platform, while &lt;code class=&quot;highlighter-rouge&quot;&gt;copy&lt;/code&gt; will not.&lt;/p&gt;

&lt;h2 id=&quot;4-expose-in-the-package&quot;&gt;4. Expose in the package&lt;/h2&gt;

&lt;p&gt;You should &lt;strong&gt;expose resources from within the package&lt;/strong&gt;, instead of having the app accessing them directly. So let’s say you have this localized string “Okay”, you will publicly expose with&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;localizedOkay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSLocalizedString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Okay&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bundle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;comment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There is something new here: &lt;code class=&quot;highlighter-rouge&quot;&gt;Bundle.module&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This is a generated code for the package (specifically the target)! Prior to this, we make use of &lt;code class=&quot;highlighter-rouge&quot;&gt;Bundle(name:inFramework:)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You cannot (and it does not make sense) to use &lt;code class=&quot;highlighter-rouge&quot;&gt;Bundle.module&lt;/code&gt; in an app. Though it doesn’t stop you from exposing it with&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bundleForMyTarget&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bundle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;module&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then in the app, you can use &lt;code class=&quot;highlighter-rouge&quot;&gt;NSLocalizedString(&quot;Okay&quot;, bundle: bundleForMyTarget, comment: &quot;&quot;)&lt;/code&gt;. &lt;em&gt;Just suggesting.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;pitfall-app-must-add-localization&quot;&gt;PITFALL: App must add localization&lt;/h2&gt;

&lt;p&gt;Even if a package supports a certain localization, the app has to add it first under the app’s Project &amp;gt; Localizations.&lt;/p&gt;

&lt;p&gt;It seems like Xcode will optimize and strip out localizations, if they are not supported in the app.&lt;/p&gt;
</description>
        <pubDate>Thu, 16 Jul 2020 15:52:09 +0800</pubDate>
        <link>https://samwize.com/2020/07/16/how-to-localize-resources-in-swift-packages/</link>
        <guid isPermaLink="true">https://samwize.com/2020/07/16/how-to-localize-resources-in-swift-packages/</guid>
        
        
        <category>SPM</category>
        
      </item>
    
      <item>
        <title>Ideal Xcode Project Structure</title>
        <description>&lt;p&gt;The &lt;a href=&quot;https://developer.apple.com/documentation/swiftui/fruta_building_a_feature-rich_app_with_swiftui&quot;&gt;Fruta sample code&lt;/a&gt; provides a good example of a project structure that supports multi-platforms.&lt;/p&gt;

&lt;h2 id=&quot;use-group-as-folder&quot;&gt;Use Group as Folder&lt;/h2&gt;

&lt;p&gt;Every group in Xcode is an actual folder.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Stop using logical groups without folder.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-main-groups&quot;&gt;The Main Groups&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Shared&lt;/li&gt;
  &lt;li&gt;iOS&lt;/li&gt;
  &lt;li&gt;iOS Clip&lt;/li&gt;
  &lt;li&gt;iOS Widgets&lt;/li&gt;
  &lt;li&gt;macOS&lt;/li&gt;
  &lt;li&gt;macOS Widgets&lt;/li&gt;
  &lt;li&gt;Packages&lt;/li&gt;
  &lt;li&gt;Playgrounds&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Platforms &amp;amp; extensions have their own group. Within them, structure as per your selected architecture eg. MVVM, VIPER. Or any logical grouping that makes the most sense.&lt;/p&gt;

&lt;h2 id=&quot;shared-code&quot;&gt;Shared Code&lt;/h2&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;Shared&lt;/code&gt; group is for code used in &lt;strong&gt;all&lt;/strong&gt; platforms. In Fruta, almost all the code is under &lt;code class=&quot;highlighter-rouge&quot;&gt;Shared&lt;/code&gt;. Only few Swift files are in the platform specific group.&lt;/p&gt;

&lt;p&gt;Even the &lt;code class=&quot;highlighter-rouge&quot;&gt;@main App&lt;/code&gt; is in Shared, and it runs for all: iOS, macOS, widgets, clips. It works because it uses preprocessor code. Alternatively, we could create specific Swift file for each platform.&lt;/p&gt;

&lt;p&gt;You can even breakdown further eg. &lt;code class=&quot;highlighter-rouge&quot;&gt;Shared-iOS&lt;/code&gt;. It is up to you as needed.&lt;/p&gt;

&lt;h2 id=&quot;packages&quot;&gt;Packages&lt;/h2&gt;

&lt;p&gt;Local packages within the projects. Eg. &lt;code class=&quot;highlighter-rouge&quot;&gt;Fruta-Networking&lt;/code&gt;. This is also shared code, but in a formal self contained package. Later on, they can also be moved out of the project to become an external dependency.&lt;/p&gt;

&lt;p&gt;These packages are selectively added to the targets; they can be excluded in a certain target.&lt;/p&gt;

&lt;h2 id=&quot;use-of-preprocessor-code&quot;&gt;Use of Preprocessor Code&lt;/h2&gt;

&lt;p&gt;Aka &lt;em&gt;Active Compilation Conditions&lt;/em&gt; (NEW!) under build settings. Yet not exactly new, since before this, we already have been adding to &lt;a href=&quot;/2019/02/26/preprocessor-codes-for-swift/&quot;&gt;Other Swift Flags&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;With that, we can write preprocessors such as &lt;code class=&quot;highlighter-rouge&quot;&gt;#if APPCLIP&lt;/code&gt;, or &lt;code class=&quot;highlighter-rouge&quot;&gt;#if ENABLE_DANCE_MONKEY_FEATURE&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We can also use &lt;code class=&quot;highlighter-rouge&quot;&gt;#if os(iOS)&lt;/code&gt; etc.&lt;/p&gt;

&lt;h2 id=&quot;playgrounds&quot;&gt;Playgrounds&lt;/h2&gt;

&lt;p&gt;Playground is a scratchpad. Nice to try out some codes, or even to explain certain concepts.&lt;/p&gt;

&lt;h2 id=&quot;tests&quot;&gt;Tests&lt;/h2&gt;

&lt;p&gt;The Fruta project did not tests. Generally, you have 2 types of tests:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Unit Testing&lt;/li&gt;
  &lt;li&gt;UI Testing&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Therefore each platform will have to create 2 test targets eg. &lt;code class=&quot;highlighter-rouge&quot;&gt;FrutaiOSUnitTests&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;FrutaiOSUITests&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;That’s a lot of tests, if you’re testing 😄&lt;/p&gt;
</description>
        <pubDate>Tue, 30 Jun 2020 15:22:35 +0800</pubDate>
        <link>https://samwize.com/2020/06/30/ideal-xcode-project-structure/</link>
        <guid isPermaLink="true">https://samwize.com/2020/06/30/ideal-xcode-project-structure/</guid>
        
        
        <category>Xcode</category>
        
      </item>
    
      <item>
        <title>SwiftUI and Data Flow</title>
        <description>&lt;p&gt;WWDC 2020 has clarify much on how we should manage data flow when using SwiftUI.&lt;/p&gt;

&lt;p&gt;I had a hard time understanding the role of &lt;code class=&quot;highlighter-rouge&quot;&gt;StateObject&lt;/code&gt;, until I watched &lt;a href=&quot;https://developer.apple.com/videos/play/wwdc2020/10040&quot;&gt;Session 10040: Data Essentials in SwiftUI&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/videos/play/wwdc2020/10040&quot;&gt;&lt;img src=&quot;/images/source-of-truth-timeline.jpg&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://developer.apple.com/documentation/swiftui/managing-model-data-in-your-app&quot;&gt;Apple documentation&lt;/a&gt; was also helped.&lt;/p&gt;

&lt;h2 id=&quot;the-right-way-to-use&quot;&gt;The right way to use&lt;/h2&gt;

&lt;p&gt;It is very important to know how to use the various components correctly.&lt;/p&gt;

&lt;p&gt;I have been writing in SwfitUI 1.0, and now I know I have bugs. I have misused &lt;code class=&quot;highlighter-rouge&quot;&gt;@ObservedObject&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here are a few things to remind myself.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;SwiftUI might create or recreate a view at any time,&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt; is a descriptor of the view, not like typical &lt;code class=&quot;highlighter-rouge&quot;&gt;UIView&lt;/code&gt;. They are lightweight. It is unwise to override &lt;code class=&quot;highlighter-rouge&quot;&gt;View.init&lt;/code&gt;. If you have &lt;em&gt;anything&lt;/em&gt; to do with states and data objects, you do it using one of the state components provided.&lt;/p&gt;

&lt;p&gt;The state is &lt;strong&gt;attached&lt;/strong&gt; to the view by SwiftUI.&lt;/p&gt;

&lt;p&gt;App Hierarchy: &lt;code class=&quot;highlighter-rouge&quot;&gt;App&lt;/code&gt; -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Scene&lt;/code&gt; -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The most important decision is to decide &lt;strong&gt;where to store the truth&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Is it a global truth for the app, or across scenes, or is it for an individual view?&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;stateobject-vs-observedobject&quot;&gt;StateObject vs ObservedObject&lt;/h2&gt;

&lt;p&gt;One of the most common &lt;a href=&quot;https://stackoverflow.com/q/62544115/242682&quot;&gt;question&lt;/a&gt; is how to use these 2 correctly.&lt;/p&gt;

&lt;p&gt;We initialise with &lt;code class=&quot;highlighter-rouge&quot;&gt;@StateObject&lt;/code&gt; when we want the view/scene/app to hold on to the truth.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;LibraryView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;@StateObject&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;book&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Hold on to the 1 truth&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;BookView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Pass it to another view&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We declare &lt;code class=&quot;highlighter-rouge&quot;&gt;@ObservedObject&lt;/code&gt;, but never initialize it. When declared in a view, it becomes the view’s dependency. Some view higher up will have to pass to it. In this case, &lt;code class=&quot;highlighter-rouge&quot;&gt;LibraryView&lt;/code&gt; pass the source of truth to &lt;code class=&quot;highlighter-rouge&quot;&gt;BookView&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;BookView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;@ObservedObject&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Book&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// From external source&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Mon, 29 Jun 2020 15:01:38 +0800</pubDate>
        <link>https://samwize.com/2020/06/29/swiftui-and-data-flow/</link>
        <guid isPermaLink="true">https://samwize.com/2020/06/29/swiftui-and-data-flow/</guid>
        
        
        <category>SwiftUI</category>
        
      </item>
    
      <item>
        <title>New Property Wrapper in 2020</title>
        <description>&lt;p&gt;WWDC 2020 introduced a few more property wrappers. &lt;a href=&quot;/2019/12/04/guide-to-property-wrapper/&quot;&gt;I don’t take system wrappers lightly&lt;/a&gt;, as they must be introduced for very good reason. So better know them well.&lt;/p&gt;

&lt;p&gt;They are available in iOS 14, macOS 11 (aka 10.16), tvOS 14, and watchOS 7. &lt;em&gt;Let’s stick with just the year.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Some of the new 2020 APIs: &lt;a href=&quot;https://developer.apple.com/documentation/swiftui/appstorage&quot;&gt;AppStorage&lt;/a&gt;, &lt;a href=&quot;https://developer.apple.com/documentation/swiftui/scenestorage&quot;&gt;SceneStorage&lt;/a&gt;, &lt;a href=&quot;https://developer.apple.com/documentation/swiftui/scaledmetric&quot;&gt;ScaledMetric&lt;/a&gt;, &lt;a href=&quot;https://developer.apple.com/documentation/swiftui/stateobject&quot;&gt;StateObject&lt;/a&gt;, &lt;a href=&quot;https://developer.apple.com/documentation/swiftui/uiapplicationdelegateadaptor&quot;&gt;UIApplicationDelegateAdaptor&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;appstorage-for-userdefaults&quot;&gt;@AppStorage for UserDefaults&lt;/h2&gt;

&lt;p&gt;AppStorage is the &lt;strong&gt;persistent storage&lt;/strong&gt; provided by SwiftUI, with &lt;code class=&quot;highlighter-rouge&quot;&gt;UserDefaults&lt;/code&gt; as the underlying backing data. The following code will persist the email across launched.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AppStorageView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;@AppStorage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;email&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;email&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;initial@hey.com&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;TextField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Email Address&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Any change to the underlying &lt;code class=&quot;highlighter-rouge&quot;&gt;UserDefaults&lt;/code&gt; will &lt;em&gt;publish&lt;/em&gt; the changes, therefore updating the SwiftUI view.&lt;/p&gt;

&lt;h2 id=&quot;scenestorage-for-scenes&quot;&gt;@SceneStorage for scenes&lt;/h2&gt;

&lt;p&gt;It is another persistent storage for SwiftUI, but for &lt;strong&gt;each scene state restoration&lt;/strong&gt;. You’re not familiar with scene lifecycle, it is introduced in &lt;a href=&quot;https://developer.apple.com/videos/play/wwdc2019/212/&quot;&gt;2019&lt;/a&gt; for multi-windows.&lt;/p&gt;

&lt;p&gt;Unlike AppStorage,&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The underlying data that backs SceneStorage is not available to you&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;NOTE: This can only be used with &lt;a href=&quot;https://developer.apple.com/documentation/swiftui/app-structure-and-behavior&quot;&gt;SwiftUI App + Scene structure&lt;/a&gt;. If you’re using the &lt;em&gt;old&lt;/em&gt; AppDelegate way, there will be fatal error “@SceneStorage is only for use with SwiftUI App Lifecycle”.&lt;/p&gt;

&lt;h2 id=&quot;stateobject&quot;&gt;@StateObject&lt;/h2&gt;

&lt;p&gt;Initiating with &lt;code class=&quot;highlighter-rouge&quot;&gt;@ObservedObject&lt;/code&gt; in a view is &lt;a href=&quot;https://developer.apple.com/documentation/swiftui/managing-model-data-in-your-app&quot;&gt;&lt;strong&gt;unsafe&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;@ObservedObject&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;myModel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// UNSAFE&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;SwiftUI might create or recreate a view at any time, so it’s important that initializing a view with a given set of inputs always results in the same view. As a result, it’s unsafe to create an observed object inside a view.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Instead, use &lt;code class=&quot;highlighter-rouge&quot;&gt;@StateObject&lt;/code&gt; for a view (or structure), &lt;strong&gt;when it can be the owner&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;For external dependencies, stick to &lt;code class=&quot;highlighter-rouge&quot;&gt;@ObservedObject&lt;/code&gt; and also &lt;code class=&quot;highlighter-rouge&quot;&gt;@EnvironmentObject&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;@StateObject&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;myModel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;@ObservedObject&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;externalModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ExternalModel&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;@EnvironmentObject&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;globalModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;GlobalModel&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can also create &lt;code class=&quot;highlighter-rouge&quot;&gt;StateObject&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;App&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;Scene&lt;/code&gt; – if they can be the owner and should hold on to the truth.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyApp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Or for Scene&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;@StateObject&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;store&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;scaledmetric&quot;&gt;@ScaledMetric&lt;/h2&gt;

&lt;p&gt;This scales a float according to the user’s Dynamic Type settings. All along, only fonts are scaled automatically. Now we can scale an image like this:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;@ScaledMetric&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGFloat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;Image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;systemName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;bolt.fill&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;resizable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;uiapplicationdelegateadaptor&quot;&gt;@UIApplicationDelegateAdaptor&lt;/h2&gt;

&lt;p&gt;If you are mixing UIKit’s AppDelegate and SwiftUI, then this is a way to access the app delegate. I don’t see any reason why this is even needed, but here’s the gist:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;@UIApplicationMain&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AppDelegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIResponder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIApplicationDelegate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;@UIApplicationDelegateAdaptor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;AppDelegate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;appDelegate&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;appDelegate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Fri, 26 Jun 2020 17:34:58 +0800</pubDate>
        <link>https://samwize.com/2020/06/26/new-property-wrapper-in-2020/</link>
        <guid isPermaLink="true">https://samwize.com/2020/06/26/new-property-wrapper-in-2020/</guid>
        
        
        <category>Swift</category>
        
        <category>SwiftUI</category>
        
      </item>
    
      <item>
        <title>Download All WWDC 2020 Videos</title>
        <description>&lt;p&gt;In &lt;a href=&quot;/2016/06/16/swift-script-to-download-all-wwdc-2016-videos-and-pdfs-automatically/&quot;&gt;2016&lt;/a&gt;, I wrote a &lt;a href=&quot;https://github.com/samwize/wwdc-dl&quot;&gt;Swift script&lt;/a&gt; to download all the WWDC PDFs and videos from the command line.&lt;/p&gt;

&lt;p&gt;I have fixed for WWDC 2020. You can download the &lt;a href=&quot;https://github.com/samwize/wwdc-dl/releases/tag/wwdc2020&quot;&gt;binary&lt;/a&gt;, then download all with:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./wwdc-dl -a
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The script is still in a mess. Prime time for re-writing in Swift 5.3, with the &lt;a href=&quot;https://swift.org/blog/argument-parser/&quot;&gt;proper CLI support&lt;/a&gt;. &lt;em&gt;But I am more likely to spend the time exploring SwiftUI 2.0, Catalyst, and awesome new features.&lt;/em&gt; 😁&lt;/p&gt;

&lt;p&gt;What’s more, the official app will catch up eventually.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/wwdc-2020-downloaded.jpg&quot; alt=&quot;All in one place&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;apple-developer-app&quot;&gt;Apple Developer App&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&quot;https://apps.apple.com/app/id640199958&quot;&gt;Apple Developer app&lt;/a&gt; is getting better. You can download videos, play them at 2x speed (unfortunately, there’s the fastest), and there’s even has a code section for easy copying!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/apple-developer-code-copy.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;But there’s still much room for improvement, as it is clearly a Catalyst app for iPhone.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/apple-developer-app-on-imac.jpg&quot; alt=&quot;On my iMac 27&amp;quot;..&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I still prefer to download all and browse them in Finder, and playing at variable speed (1.75x, 3x, whatever) with VLC player. I can also take snapshots easily (especially since 2020 there’s no PDF).&lt;/p&gt;

&lt;p&gt;Features will eventually catch up. Just like Swift UI 2.0. Just last week I was still brooding over how to make certain layouts and features, but now it is all doable.&lt;/p&gt;
</description>
        <pubDate>Thu, 25 Jun 2020 11:25:25 +0800</pubDate>
        <link>https://samwize.com/2020/06/25/download-all-wwdc-2020-videos/</link>
        <guid isPermaLink="true">https://samwize.com/2020/06/25/download-all-wwdc-2020-videos/</guid>
        
        
        <category>WWDC</category>
        
      </item>
    
  </channel>
</rss>
