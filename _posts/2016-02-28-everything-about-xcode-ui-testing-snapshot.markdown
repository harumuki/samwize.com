---
layout: post
title: "Everything About Xcode UI Testing"
date: 2016-02-28T23:05:42+08:00
categories: [iOS]
---

A previous post on using [fastlane's snapshot](http://samwize.com/2015/12/09/automate-screenshots-capture-using-snapshot-via-xcode-ui-testing/) for automating screenshots capture provided some good tips.

This post focus on Xcode UI Testing (not snapshot), and is more comprehensive, as there could be weird buggy behaviours just on running the UI automation.


## Recording Interactions

Xcode can generate code as you interact with your app. Start by creating a **UI Testing target**.

The record button is disabled at first, because you need to successfully run test once. To do that, go to **Product > Test**. Also ensure your test cases are listed in your app target scheme under Test.


## Use Accessibility Identifier

The code generated by Xcode will try to refer to elements using **Accessibility Identifier**, such as:

```swift
app.buttons["back"].tap()
```

Note that **"back"** is an identifier, compared to **"Back"** the name in English.

You should NOT be using the accessibility name since that could be localized, so running in different languages would not work as expected.

Pitfall: Some components such as `UIBarButtonItem` don't have the accessibility identifier field under identifier inspector. You could still add it as user defined runtime attributes as `accessibilityIdentifier` with type String.


## Selecting row in table view

```swift
# To select row 0
app.tables.cells.elementBoundByIndex(0).tap()
```


## Force Tap

For strange (aka bugs), certain devices running certain languages might not be able to tap on an element, even if it should be tappable.

> Assertion Failure: UI Testing Failure - Unable to find hit point for Button

The [solution](https://forums.developer.apple.com/thread/24131) is to force tap. When an element is un-tappable, get it's coordinate, and make a tap.

```swift
extension XCUIElement {
    func forceTap() {
        if self.hittable {
            self.tap()
        } else {
            let coordinate: XCUICoordinate = self.coordinateWithNormalizedOffset(CGVectorMake(0.0, 0.0))
            coordinate.tap()
        }  
    }
}
```

For example, if the error is thrown when a button is `tap()`, you can change to `forceTap()`:

```swift
app.buttons["back"].forceTap()
```


## Sleep

The way to sleep is using `sleep(durationInSeconds)`. That simple.


## Testing iPad vs iPhone

Most likely the UI for iPhone and iPad is different. To handle, you should have 2 test cases:

```swift
func testSnapshotPhone() {
    guard UIDevice.currentDevice().userInterfaceIdiom == .Phone else { return }
    // Capture screenshots for iPhone
}

func testSnapshotPad() {
    guard UIDevice.currentDevice().userInterfaceIdiom == .Pad else { return }
    // Capture screenshots for iPad
}
```
