<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>@samwize</title>
    <description>¯\_(ツ)_/¯
</description>
    <link>http://samwize.com/</link>
    <atom:link href="http://samwize.com/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Thu, 02 Nov 2017 17:53:56 +0800</pubDate>
    <lastBuildDate>Thu, 02 Nov 2017 17:53:56 +0800</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>Guide to Creating Custom UIView</title>
        <description>&lt;p&gt;This is a guide to creating custom &lt;code class=&quot;highlighter-rouge&quot;&gt;UIView&lt;/code&gt; using Auto Layout, without Nib/Storyboard, and in Swift 4.&lt;/p&gt;

&lt;h2 id=&quot;why-custom-uiview&quot;&gt;Why custom UIView?&lt;/h2&gt;

&lt;p&gt;We create custom view when the controls from UIKit is not sufficient to do your job.&lt;/p&gt;

&lt;p&gt;Custom view will be composed of other views, with certain custom behaviours.&lt;/p&gt;

&lt;p&gt;There are often times when you construct your storyboard or init your view controller with multiple views, but they could – alternatively – be accomplished with a custom view.&lt;/p&gt;

&lt;h2 id=&quot;about-initializers&quot;&gt;About Initializers&lt;/h2&gt;

&lt;p&gt;It is important to learn the fundamental about &lt;a href=&quot;https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Initialization.html&quot;&gt;Swift initialization&lt;/a&gt;. It is a complex and lengthy topic, but will be useful in understanding because our custom view subclass &lt;code class=&quot;highlighter-rouge&quot;&gt;UIView&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;designated-initializer&quot;&gt;Designated initializer&lt;/h3&gt;

&lt;p&gt;You specify a designated initializer by &lt;em&gt;not&lt;/em&gt; specifying &lt;code class=&quot;highlighter-rouge&quot;&gt;convenience&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Subclass MUST call it’s superclass designated initializer – not difficult to reason because without so, the superclass would not be completely initialized.&lt;/p&gt;

&lt;h3 id=&quot;convenience-initializer&quot;&gt;Convenience initializer&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;convenience&lt;/code&gt; is secondary/optional, and is simply shortcut to calling designated initializer.&lt;/p&gt;

&lt;h3 id=&quot;required-init&quot;&gt;Required init&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;required&lt;/code&gt; specify that subclasses must implement the initialization. &lt;code class=&quot;highlighter-rouge&quot;&gt;UIView&lt;/code&gt; has such an init because it conforms to &lt;a href=&quot;https://developer.apple.com/documentation/foundation/nscoding&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NSCoding&lt;/code&gt;&lt;/a&gt;, a protocol for the view to be encoded and decoded for archiving.&lt;/p&gt;

&lt;p&gt;Our custom view has to implement (it is an override, but without the override modifier), and decode to init the view.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;required&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;coder&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;aDecoder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSCoder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;coder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aDecoder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Custom decoding..&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;But, you probably will not have any custom decoding, because archiving a view is a bad idea (instead you should archive the model).&lt;/p&gt;

&lt;p&gt;The corresponding func is &lt;a href=&quot;https://developer.apple.com/documentation/foundation/nscoding/1413933-encode&quot;&gt;encoding&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;our-custom-view-initializers&quot;&gt;Our custom view initializers&lt;/h2&gt;

&lt;p&gt;With the basics of initializers explained, a custom view will usually need a few inits like this:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AppIconView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIView&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;// #1&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;required&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;coder&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;aDecoder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSCoder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;coder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aDecoder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;setupView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// #2&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGRect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;setupView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;    
    
    &lt;span class=&quot;c1&quot;&gt;// #3&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;convenience&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zero&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;setupView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setupView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;translatesAutoresizingMaskIntoConstraints&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
        
        &lt;span class=&quot;c1&quot;&gt;// Create, add and layout the children views ..&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;There are 3 inits and here is why:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Because &lt;code class=&quot;highlighter-rouge&quot;&gt;UIView&lt;/code&gt; &lt;strong&gt;required&lt;/strong&gt; it&lt;/li&gt;
  &lt;li&gt;Because #3 will need to call a designated initializer (we choose #2 over #1)&lt;/li&gt;
  &lt;li&gt;Our own initializer with the data for the view&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In each of the init, we will call &lt;code class=&quot;highlighter-rouge&quot;&gt;setupView()&lt;/code&gt; – which is the one place where we will layout the custom view.&lt;/p&gt;

&lt;h3 id=&quot;translatesautoresizingmaskintoconstraints&quot;&gt;translatesAutoresizingMaskIntoConstraints&lt;/h3&gt;

&lt;p&gt;Every view that uses auto layout should set &lt;code class=&quot;highlighter-rouge&quot;&gt;translatesAutoresizingMaskIntoConstraints&lt;/code&gt; to false. That is the very first thing to do in &lt;code class=&quot;highlighter-rouge&quot;&gt;setupView()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This is because in days before we have Auto Layout, there is the concept of auto resizing. Via &lt;code class=&quot;highlighter-rouge&quot;&gt;autoresizingMask&lt;/code&gt;, a view will auto resize, similar to auto layout.&lt;/p&gt;

&lt;p&gt;But we don’t use auto resize anymore, now that we have auto layout.&lt;/p&gt;

&lt;h3 id=&quot;intrinsic-content-size&quot;&gt;Intrinsic Content Size&lt;/h3&gt;

&lt;p&gt;The &lt;strong&gt;natural size&lt;/strong&gt; for it’s content eg. &lt;code class=&quot;highlighter-rouge&quot;&gt;UILabel&lt;/code&gt; intrinsic size is the length of the text.&lt;/p&gt;

&lt;p&gt;Apple’s &lt;a href=&quot;https://developer.apple.com/library/content/documentation/UserExperience/Conceptual/AutolayoutPG/AnatomyofaConstraint.html#//apple_ref/doc/uid/TP40010853-CH9-SW21&quot;&gt;auto layout guide&lt;/a&gt; has a section on it, and a &lt;a href=&quot;https://developer.apple.com/library/content/documentation/UserExperience/Conceptual/AutolayoutPG/ViewswithIntrinsicContentSize.html&quot;&gt;cook book&lt;/a&gt; of common scenarios.&lt;/p&gt;

&lt;p&gt;How does it work?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;It generates a pair of constraints for each dimension (width &amp;amp; height). The pair constrain the compression resistance (priority 750) and content hugging (priority 250).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Intrinsic content size simplifies auto layout, reducing number of constraints needed, because those constraints are added for you. You only need to manage the priority.&lt;/p&gt;

&lt;p&gt;It is a helper, and you ought to understand that it adds constraints for you.&lt;/p&gt;

&lt;p&gt;Let’s say we want our custom view to have a fixed height, but varying width, we can override the &lt;code class=&quot;highlighter-rouge&quot;&gt;intrinsicContentSize&lt;/code&gt; like this.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;intrinsicContentSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGSize&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Your calculated or fixed height&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIViewNoIntrinsicMetric&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As a rule of thumb: &lt;strong&gt;custom view should never create constraint for it’s own width and height&lt;/strong&gt; (obviously also not for it’s postion x &amp;amp; y).&lt;/p&gt;

&lt;p&gt;But sometimes you want to &lt;em&gt;conveniently constraint your size&lt;/em&gt;. This is where intrinsic content size comes in.&lt;/p&gt;

&lt;h3 id=&quot;fitting-size&quot;&gt;Fitting Size&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Intrinsic size is an input&lt;/strong&gt; to Auto Layout engine (which in turn generates/output constraints about it’s size).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fitting size is an output&lt;/strong&gt; from Auto Layout engine.&lt;/p&gt;

&lt;p&gt;Fitting size is the size calculated to fit the content.&lt;/p&gt;

&lt;p&gt;Use &lt;a href=&quot;https://developer.apple.com/documentation/uikit/uiview/1622624-systemlayoutsizefitting&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;systemLayoutSizeFitting(_:)&lt;/code&gt;&lt;/a&gt;. The parameter &lt;code class=&quot;highlighter-rouge&quot;&gt;targetSize&lt;/code&gt; is the smallest or largest size that meets the constraint.&lt;/p&gt;

&lt;p&gt;Eg. To know the smallest possible size of our content view, call &lt;code class=&quot;highlighter-rouge&quot;&gt;appView.systemLayoutSizeFitting(UILayoutFittingCompressedSize)&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;the-thing-with-uistackview&quot;&gt;The thing with UIStackView&lt;/h3&gt;

&lt;p&gt;It is easily misled to think stack view has intrinsic size. Using a stack view, it seems the width and height constraints are not required.&lt;/p&gt;

&lt;p&gt;But NO, stack view intrinsic size is always &lt;code class=&quot;highlighter-rouge&quot;&gt;UIViewNoIntrinsicMetric&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;What really happened is that Auto Layout engine calculate the fitting size (an output) for the stack.&lt;/p&gt;

&lt;p&gt;So how do you get the fitting size?&lt;/p&gt;

&lt;p&gt;Simply &lt;code class=&quot;highlighter-rouge&quot;&gt;stack.systemLayoutSizeFitting(UILayoutFittingCompressedSize)&lt;/code&gt;.&lt;/p&gt;
</description>
        <pubDate>Wed, 01 Nov 2017 10:42:21 +0800</pubDate>
        <link>http://samwize.com/2017/11/01/guide-to-creating-custom-uiview/</link>
        <guid isPermaLink="true">http://samwize.com/2017/11/01/guide-to-creating-custom-uiview/</guid>
        
        
        <category>UI</category>
        
      </item>
    
      <item>
        <title>Adding Playground to an Existing Project</title>
        <description>&lt;p&gt;Playground is a very useful tool, especially for building UI, as you can preview them almost right away, saving many hours building and running on simulator.&lt;/p&gt;

&lt;p&gt;New in Xcode 9, we can now &lt;a href=&quot;http://help.apple.com/xcode/mac/9.0/#/devc9b33111c&quot;&gt;add custom framework to Playground&lt;/a&gt;, therefore providing a quick way to integrate with existing project.&lt;/p&gt;

&lt;p&gt;This post will show how to add Playground to an existing project, using Cocoapods along in it, and interacting with UI controls for instant feedback.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/xcode-playground-ui-live.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;open-your-project-workspace&quot;&gt;1. Open your project workspace&lt;/h2&gt;

&lt;p&gt;I am assuming you are already using workspace.&lt;/p&gt;

&lt;p&gt;But if you are not, open the .xcodeproj and File &amp;gt; Save As Workspace.&lt;/p&gt;

&lt;h2 id=&quot;add-new-target&quot;&gt;2. Add new target&lt;/h2&gt;

&lt;p&gt;Select &lt;strong&gt;File &amp;gt; New &amp;gt; Target &amp;gt; Cocoa Touch Framework&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/xcode-template-ios-cocoa-touch-framework.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s name the target “MyUIFramework”.&lt;/p&gt;

&lt;p&gt;This target builds the framework, which provides code available to use in Playground.&lt;/p&gt;

&lt;h2 id=&quot;add-files-to-target&quot;&gt;3. Add files to target&lt;/h2&gt;

&lt;p&gt;Add a new Swift file, making sure it is available to the target.&lt;/p&gt;

&lt;p&gt;In File Inspector, make sure the target “MyUIFramework” is checked.&lt;/p&gt;

&lt;p&gt;You can also add existing files to the framework, exposing them to Playground later.&lt;/p&gt;

&lt;h2 id=&quot;build-the-framework&quot;&gt;4. Build the framework&lt;/h2&gt;

&lt;p&gt;Select the Scheme and Build.&lt;/p&gt;

&lt;p&gt;You must manually build each time you made changes to the framework.&lt;/p&gt;

&lt;h2 id=&quot;add-playground&quot;&gt;5. Add Playground&lt;/h2&gt;

&lt;p&gt;In the workspace, &lt;strong&gt;File &amp;gt; New &amp;gt; Playground &amp;gt; Single View&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In the Playground page, we can import the framwork, and set up a live view.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PlaygroundSupport&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIKit&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyUIFramework&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyViewController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIViewController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;loadView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;backgroundColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;red&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Add subviews ...&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;PlaygroundPage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;liveView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You create your views in &lt;code class=&quot;highlighter-rouge&quot;&gt;loadView&lt;/code&gt;, and see them in Live View (select Show Assistant Editor).&lt;/p&gt;

&lt;p&gt;Just like Playground, code changes will be reflected &lt;em&gt;almost&lt;/em&gt; right away.&lt;/p&gt;

&lt;h2 id=&quot;using-cocoapods&quot;&gt;6. Using Cocoapods&lt;/h2&gt;

&lt;p&gt;You cannot import a Cocoapods module in playground, yet.&lt;/p&gt;

&lt;p&gt;If the Swift file requires the use of Cocoapods, you have to make it available to the target as specified in Podfile.&lt;/p&gt;

&lt;p&gt;We make &lt;a href=&quot;https://github.com/robb/Cartography&quot;&gt;Cartography&lt;/a&gt;, an awesome library for constructing autolayout, for the framework:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;MyUIFramework&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pod&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Cartography&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;~&amp;gt; 1.1.0&#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pod install&lt;/code&gt;, build framework again, and you will now be able to &lt;code class=&quot;highlighter-rouge&quot;&gt;import Cartography&lt;/code&gt; in Playground too.&lt;/p&gt;

&lt;p&gt;Because now 2 targets are using the same Cargography lib, it is cleaner to &lt;a href=&quot;https://www.natashatherobot.com/cocoapods-installing-same-pod-multiple-targets/&quot;&gt;define shared pods&lt;/a&gt; in Podfile. We leave that as an exercise for you.&lt;/p&gt;
</description>
        <pubDate>Thu, 05 Oct 2017 16:26:25 +0800</pubDate>
        <link>http://samwize.com/2017/10/05/adding-playground-to-an-existing-project/</link>
        <guid isPermaLink="true">http://samwize.com/2017/10/05/adding-playground-to-an-existing-project/</guid>
        
        
        <category>Playground</category>
        
      </item>
    
      <item>
        <title>Steps to Create Swift Framework + Cocoapods</title>
        <description>&lt;h2 id=&quot;create-framework-project&quot;&gt;1. Create framework project&lt;/h2&gt;

&lt;p&gt;Select Xcode &amp;gt; File &amp;gt; New &amp;gt; Project &amp;gt; iOS &amp;gt; &lt;strong&gt;Cocoa Touch Framework&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/xcode-template-ios-cocoa-touch-framework.jpg&quot; alt=&quot;Cocoa Touch Framework&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A Cocoa Touch Framework is for iOS, and can use UIKit framework. If you are developing a framework that does not require UIKit, you may select iMac &amp;gt; &lt;strong&gt;Cocoa Framework&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;add-your-source&quot;&gt;2. Add your source&lt;/h2&gt;

&lt;p&gt;As a simple example, add &lt;code class=&quot;highlighter-rouge&quot;&gt;MyFramework.swift&lt;/code&gt;. I tend to keep my source file under &lt;code class=&quot;highlighter-rouge&quot;&gt;/Source&lt;/code&gt;, but it’s to your own preference.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyFramework&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;shared&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyFramework&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This provide the client/app &lt;code class=&quot;highlighter-rouge&quot;&gt;MyFramework.shared.foo()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Notice that the class is &lt;strong&gt;public&lt;/strong&gt;, and the members are implicitly public too.&lt;/p&gt;

&lt;p&gt;Read about &lt;a href=&quot;/2017/04/20/access-levels-in-swift/&quot;&gt;access level&lt;/a&gt;, if needed. In short, to expose your classes and methods, it need to be public or open.&lt;/p&gt;

&lt;h2 id=&quot;create-cocoapods-spec&quot;&gt;3. Create Cocoapods Spec&lt;/h2&gt;

&lt;p&gt;In your framework root directory, run&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pod spec create MyFramework
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This will create a default &lt;code class=&quot;highlighter-rouge&quot;&gt;MyFramework.podspec&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You will need to edit the podspec file to your needs. My bare minimum:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;Pod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;         &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;MyFramework&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;version&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;0.0.1&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;summary&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;A short description of MyFramework.&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;description&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;DESC&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
  A much much longer description of MyFramework.
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;                   DESC&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;homepage&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;http://EXAMPLE/MyFramework&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;license&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Copyleft&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;author&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Junda&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;junda@just2us.com&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;source&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;.&#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# s.source       = { :git =&amp;gt; &quot;https://github/samwize/MyFramework&quot;, :tag =&amp;gt; &quot;#{s.version}&quot; }&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;source_files&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Source/**/*.swift&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;s.name&lt;/code&gt; is the pod name, that will subsequently be used in Podfile&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;s.source&lt;/code&gt; is using path to its current directory. This is temporary and you should uncomment and edit the source that points to the repository URL, when you have pushed to git.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;s.source_files&lt;/code&gt; is edited to include those  in &lt;code class=&quot;highlighter-rouge&quot;&gt;/Source&lt;/code&gt; directory and only for Swift files.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Run &lt;code class=&quot;highlighter-rouge&quot;&gt;pod spec lint&lt;/code&gt; to check if the podspec is ok. There will be 1 error on “Unsupported download strategy”, but we can ignore that for now.&lt;/p&gt;

&lt;h2 id=&quot;add-pod-to-project&quot;&gt;4. Add pod to project&lt;/h2&gt;

&lt;p&gt;Open the project that will be using the pod.&lt;/p&gt;

&lt;p&gt;Add to &lt;code class=&quot;highlighter-rouge&quot;&gt;Podfile&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;pod&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;MyFramework&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;../MyFramework&#39;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# pod &#39;MyFramework&#39;, :git =&amp;gt; &#39;https://github.com/samwize/MyFramework&#39;, :branch =&amp;gt; &#39;master&#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We use the local path, assuming MyFramework and the project are in the same folder.&lt;/p&gt;

&lt;p&gt;Once again, uncomment the 2nd line that points to the git repository when you have pushed it.&lt;/p&gt;

&lt;p&gt;With that, &lt;code class=&quot;highlighter-rouge&quot;&gt;pod install&lt;/code&gt; and start developing with the pod!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: The benefit of a local path is that you can make edit a Swift file in MyFramework, and it will be reflected right away in the project – very convenient.&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 01 Oct 2017 15:32:49 +0800</pubDate>
        <link>http://samwize.com/2017/10/01/creating-a-swift-framework-cocoapods/</link>
        <guid isPermaLink="true">http://samwize.com/2017/10/01/creating-a-swift-framework-cocoapods/</guid>
        
        
        <category>Swift</category>
        
      </item>
    
      <item>
        <title>Guide to Using Codable Struct for JSON</title>
        <description>&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Codable&lt;/code&gt; is a new feature introduced along with Swfit 4 for encoding and decoding models easily, making third party libraries such as SwiftyJSON and Unbox obsolete. It is part of Foundation framework, and is a must know if you use JSON format.&lt;/p&gt;

&lt;h2 id=&quot;the-basic&quot;&gt;The Basic&lt;/h2&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Animal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Codable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;numberOfLegs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Add &lt;code class=&quot;highlighter-rouge&quot;&gt;Codable&lt;/code&gt; as a trait to your type, and that’s it.&lt;/p&gt;

&lt;p&gt;You enjoy &lt;strong&gt;automatic encoding and decoding&lt;/strong&gt;, thanks to default extension for the &lt;code class=&quot;highlighter-rouge&quot;&gt;Codable&lt;/code&gt; protocol.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;numberOfLegs&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;It works automatically as long as the members are &lt;code class=&quot;highlighter-rouge&quot;&gt;Codable&lt;/code&gt; type. Later section will explain what to do if your type cannot conform to &lt;code class=&quot;highlighter-rouge&quot;&gt;Codable&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Codable&lt;/code&gt; is actually made up of 2 protocols – &lt;code class=&quot;highlighter-rouge&quot;&gt;Encodable&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Decodable&lt;/code&gt; – and you can use one if you don’t need the other. In this post, we will highlight for both encoding and decoding, but feel free to decouple them.&lt;/p&gt;

&lt;h2 id=&quot;encoding-to-json-string&quot;&gt;Encoding to JSON string&lt;/h2&gt;

&lt;p&gt;With a &lt;code class=&quot;highlighter-rouge&quot;&gt;Codable&lt;/code&gt; type you can encode to JSON string easily.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;animal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Animal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;numberOfLegs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;encoder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;JSONEncoder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;encoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outputFormatting&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prettyPrinted&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try!&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;animal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;encoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;utf8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You probably will omit the pretty print in production code.&lt;/p&gt;

&lt;h2 id=&quot;decoding-from-json-string&quot;&gt;Decoding from JSON string&lt;/h2&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;decoder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;JSONDecoder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;jsonData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jsonString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;using&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;utf8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;animal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try!&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;decoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Animal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jsonData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;what-about-plist&quot;&gt;What about plist?&lt;/h2&gt;

&lt;p&gt;This post is about JSON, but it is trivial to encode/decode other formats.&lt;/p&gt;

&lt;p&gt;Simply change &lt;code class=&quot;highlighter-rouge&quot;&gt;JSONEncoder&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;JSONDecoder&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;PropertyListEncoder&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;PropertyListDecoder&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;when-you-need-a-different-key-name&quot;&gt;When you need a different key name&lt;/h2&gt;

&lt;p&gt;Let’s say for the JSON, you want the key name to be “number_of_legs” (snake cased), instead of “numberOfLegs”.&lt;/p&gt;

&lt;p&gt;To customize the JSON key names, add &lt;code class=&quot;highlighter-rouge&quot;&gt;CodingKeys&lt;/code&gt; enum to the struct.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Animal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Codable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;numberOfLegs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CodingKeys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CodingKey&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numberOfLegs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;number_of_legs&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now, there is some magic performed by the compiler with the &lt;code class=&quot;highlighter-rouge&quot;&gt;CodingKeys&lt;/code&gt; enum. The compiler only recognize the enum name “CodingKeys”, reserved as the keys for the struct.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: &lt;code class=&quot;highlighter-rouge&quot;&gt;CodingKeys&lt;/code&gt; is a compiler recognized enum, while &lt;code class=&quot;highlighter-rouge&quot;&gt;CodingKey&lt;/code&gt; is the protocol.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You may in fact have your own type that implements the &lt;code class=&quot;highlighter-rouge&quot;&gt;CodingKey&lt;/code&gt; protocol. Read on.&lt;/p&gt;

&lt;h2 id=&quot;when-you-need-a-nested-structure&quot;&gt;When you need a nested structure&lt;/h2&gt;

&lt;p&gt;When your struct is flat, but maps to a nested structure in the JSON, you have more work to do.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;anatomy&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;numberOfLegs&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Firstly, you have to add your keys for the nested. We add &lt;code class=&quot;highlighter-rouge&quot;&gt;AnatomyCodingKeys&lt;/code&gt; which implements &lt;code class=&quot;highlighter-rouge&quot;&gt;CodingKey&lt;/code&gt; protocol.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Animal&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;numberOfLegs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CodingKeys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CodingKey&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;anatomy&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AnatomyCodingKeys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CodingKey&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numberOfLegs&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then you implement &lt;code class=&quot;highlighter-rouge&quot;&gt;Encodable&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Decodable&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Animal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Encodable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;encoder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Encoder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// #1&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;container&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;keyedBy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CodingKeys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// #2 and #3&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;anatomyContainer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;container&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;nestedContainer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;keyedBy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AnatomyCodingKeys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;forKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;anatomy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// #4&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;anatomyContainer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numberOfLegs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;forKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numberOfLegs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The encoding process is as such:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Get the main container with keys as per &lt;code class=&quot;highlighter-rouge&quot;&gt;CodingKeys&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Get the nested container, which is in the main container at the key “anatomy” (of &lt;code class=&quot;highlighter-rouge&quot;&gt;CodingKeys&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Main container has keys as per &lt;code class=&quot;highlighter-rouge&quot;&gt;AnatomyCodingKeys&lt;/code&gt; (aka “keyed by”)&lt;/li&gt;
  &lt;li&gt;Encode each type with key&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The decoding is similar.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Animal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Decodable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;decoder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Decoder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;container&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;decoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;keyedBy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CodingKeys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;anatomyContainer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;container&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;nestedContainer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;keyedBy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AnatomyCodingKeys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;forKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;anatomy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;numberOfLegs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;anatomyContainer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;forKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numberOfLegs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;error-with-a-dictionary-member&quot;&gt;Error with a Dictionary member&lt;/h2&gt;

&lt;p&gt;Let’s look at an unexpected scenario, a struct having a Dictionary as it’s member.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Sword&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Codable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Dictionary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Codable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Sword&lt;/code&gt; has a flexible member &lt;code class=&quot;highlighter-rouge&quot;&gt;properties&lt;/code&gt;, which basically can store any key-value pair. But there will be a compile error.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Type &#39;Sword&#39; does not conform to protocol &#39;Encodable&#39;
Type &#39;Sword&#39; does not conform to protocol &#39;Decodable&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The problem is because a &lt;code class=&quot;highlighter-rouge&quot;&gt;Dictionary&lt;/code&gt; is not a Codable, even thought the values in it is.&lt;/p&gt;

&lt;p&gt;It such case, you will need dynamic coding keys, an advanced topic.&lt;/p&gt;

&lt;h2 id=&quot;dynamic-coding-keys&quot;&gt;Dynamic Coding Keys&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/documentation/foundation/archives_and_serialization/using_json_with_custom_types&quot;&gt;Apple codable playground&lt;/a&gt; provides a sample code on how you can have a dynamic key eg. the keys are not defined exhausively in the &lt;code class=&quot;highlighter-rouge&quot;&gt;CodingKeys&lt;/code&gt; enum.&lt;/p&gt;

&lt;p&gt;In our scenario, that’s what we want for the Dictionary, where the keys in it can be any string.&lt;/p&gt;

&lt;p&gt;Create &lt;code class=&quot;highlighter-rouge&quot;&gt;DynamicKey&lt;/code&gt;, which implements &lt;code class=&quot;highlighter-rouge&quot;&gt;CodingKey&lt;/code&gt;, but it only can be init with a string.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;DynamicKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CodingKey&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;stringValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;stringValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stringValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stringValue&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;intValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;intValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then we extend &lt;code class=&quot;highlighter-rouge&quot;&gt;KeyedEncodingContainer&lt;/code&gt; to provide the method to encode the dictionary.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;KeyedEncodingContainer&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;DynamicKey&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    
    &lt;span class=&quot;k&quot;&gt;mutating&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;encodeDynamicKeyValues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withDictionary&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dictionary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dictionary&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dynamicKey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;DynamicKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;stringValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;forKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dynamicKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;forKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dynamicKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Type &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; not supported&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The above &lt;code class=&quot;highlighter-rouge&quot;&gt;encodeDynamicKeyValues&lt;/code&gt; has a shortfall: you need to add to the types supported. The above code illustrated only for String and Int. &lt;em&gt;If you know of a better approach, let me know!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;To use, in &lt;code class=&quot;highlighter-rouge&quot;&gt;encode(to:)&lt;/code&gt;,&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;propertiesContainer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;container&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;nestedContainer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;keyedBy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;DynamicKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;forKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;properties&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;properties&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;propertiesContainer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;encodeDynamicKeyValues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;withDictionary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I will leave the implementation of &lt;code class=&quot;highlighter-rouge&quot;&gt;KeyedDecodingContainer&lt;/code&gt; as an exercise :)&lt;/p&gt;

&lt;p&gt;Or check &lt;a href=&quot;https://gist.github.com/samwize/a82f29a1fb34091cd61fc06934568f82&quot;&gt;my gist&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;what-is-a-container&quot;&gt;What is a container?&lt;/h2&gt;

&lt;p&gt;If you need to customize the encoding and decoding, you will need to grasp the concept of containers.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/2017/08/03/wwdc-2017-whats-new-in-foundation/&quot;&gt;&lt;img src=&quot;/images/wwdc-foundation-codable.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A container is one of 3 types:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Keyed Container – provides values by keys, like a dictionary&lt;/li&gt;
  &lt;li&gt;Unkeyed Container – provides ordered values without keys, like an array&lt;/li&gt;
  &lt;li&gt;Single Value Container – a single raw value&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In encoding/decoding, you need to use the correct type of container as per the JSON/whatever structure you have.&lt;/p&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;

&lt;p&gt;Codable is &lt;a href=&quot;https://github.com/apple/swift/blob/master/stdlib/public/core/Codable.swift&quot;&gt;open source&lt;/a&gt;, so we can dig it and understand how it works internally.&lt;/p&gt;

&lt;p&gt;A more useful resource provided by Apple is the &lt;a href=&quot;https://developer.apple.com/documentation/foundation/archives_and_serialization/using_json_with_custom_types&quot;&gt;playground for custom type&lt;/a&gt;, showing how we could achieve dynamic coding keys.&lt;/p&gt;

&lt;p&gt;Apple has a &lt;a href=&quot;https://developer.apple.com/documentation/foundation/archives_and_serialization/encoding_and_decoding_custom_types&quot;&gt;basic guide&lt;/a&gt;. Other good guides include &lt;a href=&quot;http://swiftjson.guide&quot;&gt;swiftjson.guide&lt;/a&gt; and &lt;a href=&quot;https://www.raywenderlich.com/172145/encoding-decoding-and-serialization-in-swift-4&quot;&gt;raywenderlich’s&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 26 Sep 2017 12:30:24 +0800</pubDate>
        <link>http://samwize.com/2017/09/26/guide-to-using-codable-struct-for-json-the-new-thing-in-swift-4/</link>
        <guid isPermaLink="true">http://samwize.com/2017/09/26/guide-to-using-codable-struct-for-json-the-new-thing-in-swift-4/</guid>
        
        
        <category>Swift</category>
        
      </item>
    
      <item>
        <title>Migrating to Swift 4 and @objc</title>
        <description>&lt;p&gt;Swift’s official &lt;a href=&quot;https://swift.org/migration-guide-swift4/&quot;&gt;migration guide&lt;/a&gt; gives a good overview.&lt;/p&gt;

&lt;p&gt;Using the migration assistant in the new Xcode 9 would have helped to rename most of the SDK changes, such as moving string contants to enum cases.&lt;/p&gt;

&lt;p&gt;This post will highlight the other trickly cases.&lt;/p&gt;

&lt;h2 id=&quot;distinguish-single-tuple-from-multiple-argument-function-types-se-0110&quot;&gt;Distinguish single-tuple from multiple-argument function types [SE-0110]&lt;/h2&gt;

&lt;p&gt;There is an issue with Swift 3 in distinguishing between the type of the argument in a closure.&lt;/p&gt;

&lt;p&gt;Is it a tuple with 2 arguments?&lt;/p&gt;

&lt;p&gt;Or is it 2 arguments?&lt;/p&gt;

&lt;p&gt;Proposal &lt;a href=&quot;https://github.com/apple/swift-evolution/blob/master/proposals/0110-distingish-single-tuple-arg.md&quot;&gt;SE-0110&lt;/a&gt; seeks to correct that.&lt;/p&gt;

&lt;p&gt;In short, to declare a function type with 1 tuple, you will need to double enclose with brackets:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Xcode will also suggest rewriting &lt;code class=&quot;highlighter-rouge&quot;&gt;f: (Void) -&amp;gt; ()&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;f: () -&amp;gt; ()&lt;/code&gt;, because your probably just mean that.&lt;/p&gt;

&lt;h2 id=&quot;objc-has-to-be-explicit-se-0160&quot;&gt;@objc has to be explicit [SE-0160]&lt;/h2&gt;

&lt;p&gt;The biggest change is to do with Objective-C inference.&lt;/p&gt;

&lt;p&gt;The details is in the proposal &lt;a href=&quot;https://github.com/apple/swift-evolution/blob/master/proposals/0160-objc-inference.md&quot;&gt;SE-0160&lt;/a&gt; (it’s long).&lt;/p&gt;

&lt;p&gt;The change is not only source breaking, but worse, could introduce bugs unknowingly. This is because you could still build and run, but if some of your type/method is no longer available to Objective-C runtime (because @objc is no longer inferred anymore), the method will just fail to respond.&lt;/p&gt;

&lt;p&gt;That’s why this change is big, and you should test all parts of your user flow.&lt;/p&gt;

&lt;h4 id=&quot;the-switch-in-project-settings&quot;&gt;The switch in project settings&lt;/h4&gt;

&lt;p&gt;After migrating to Swift 4, &lt;strong&gt;Swift 3 @objc Inference&lt;/strong&gt; remains &lt;strong&gt;On&lt;/strong&gt;, for good reason because as we said, this change is breaking.&lt;/p&gt;

&lt;p&gt;There is benefits to switching it to off – that is not to infer @objc for all types. Things will be faster, binary smaller.&lt;/p&gt;

&lt;p&gt;When you switch to &lt;strong&gt;Off&lt;/strong&gt; (default), make sure your app still works well. You could unknowingly introduce bugs (likely not crash) because some functions are no longer inferred to be available to Objective-C runtime.&lt;/p&gt;

&lt;h4 id=&quot;when-it-doesnt-work&quot;&gt;When it doesn’t work..&lt;/h4&gt;

&lt;p&gt;To fix, you can add 2 annotations to tell the compiler it is to be available for Objective-C runtime.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@objc&lt;/code&gt; can be added to a function.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@objcMembers&lt;/code&gt; can  be added to a type, and all members and functions will be infered, unless, of course, if the function uses pure Swift features eg. tuple.&lt;/p&gt;

&lt;h4 id=&quot;extensions-cannot-override-yet&quot;&gt;Extensions cannot override yet&lt;/h4&gt;

&lt;p&gt;Another common error as a result is to do with extension methods that are overriden.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Super&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Remember, without @objc, this is not available to objc &lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Sub&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Super&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The above code will have error “declarations in extensions cannot override yet”.&lt;/p&gt;

&lt;p&gt;The fix is to add @objc to the function in the extension.&lt;/p&gt;

&lt;h4 id=&quot;summary-of-code-impact&quot;&gt;Summary of code impact&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Subclass of &lt;code class=&quot;highlighter-rouge&quot;&gt;NSObject&lt;/code&gt; no NOT infer as @objc&lt;/li&gt;
  &lt;li&gt;Run your tests&lt;/li&gt;
  &lt;li&gt;Check all app flow to make sure they are working, if not add &lt;code class=&quot;highlighter-rouge&quot;&gt;@objc&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;@objcMembers&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Add @objc to extension functions that needs to be overriden&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;dynamic&lt;/code&gt; must have @objc – this is easy to fix because compiler will have error&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 20 Sep 2017 16:37:53 +0800</pubDate>
        <link>http://samwize.com/2017/09/20/migrating-to-swift-4-and-xcode-9/</link>
        <guid isPermaLink="true">http://samwize.com/2017/09/20/migrating-to-swift-4-and-xcode-9/</guid>
        
        
        <category>Swift</category>
        
        <category>Xcode</category>
        
      </item>
    
      <item>
        <title>How to Change iOS App Icon Programmatically (iOS 10.3)</title>
        <description>&lt;p&gt;Changing the app icon is just &lt;a href=&quot;https://developer.apple.com/documentation/uikit/uiapplication/2806818-setalternateiconname&quot;&gt;1 line of code&lt;/a&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;setAlternateIconName&lt;/code&gt;, but there are many pitfalls, and the lack of guide on how to do it.&lt;/p&gt;

&lt;h2 id=&quot;the-code&quot;&gt;The Code&lt;/h2&gt;

&lt;p&gt;Let’s start with the easy part, which is the code to change the app icon programmatically.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;#available(iOS 10.3, *)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;newAppIconName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;AppIcon-2&quot;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shared&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alternateIconName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newAppIconName&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;UIApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shared&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setAlternateIconName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newAppIconName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You might thought you can put the code in app delegate when the app is launched, but no, that will have this un-helpful error:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Error Domain=NSCocoaErrorDomain Code=3072 “The operation was cancelled.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;pitfall-code-must-be-called-in-view-controller&quot;&gt;Pitfall: Code must be called in view controller&lt;/h2&gt;

&lt;p&gt;You must call &lt;code class=&quot;highlighter-rouge&quot;&gt;setAlternateIconName&lt;/code&gt; only in view controller, and in main thread.&lt;/p&gt;

&lt;p&gt;Why?&lt;/p&gt;

&lt;p&gt;Because the user will be shown this alert:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/appicon-change-alert.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you want to run the code in app delegate, make sure it is run in main queue, and visible in the main window.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;pitfall-you-cannot-avoid-the-system-alert&quot;&gt;Pitfall: You cannot avoid the system alert&lt;/h2&gt;

&lt;p&gt;The alert and the text “You have changed the icon for …” cannot be changed, nor removed.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&quot;https://developer.apple.com/ios/human-interface-guidelines/graphics/app-icon/&quot;&gt;Apple Human Interface Guildeline (HIG)&lt;/a&gt;, they did mention that changing the app icon is a user triggered action.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You can perform tricks to dismiss the alert, or cover with another screen, but that is against the HIG.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This is also why in the code there is a &lt;code class=&quot;highlighter-rouge&quot;&gt;guard&lt;/code&gt; statement. It prevents setting the icon name again, and therefore triggering the alert, if it already is that icon.&lt;/p&gt;

&lt;h2 id=&quot;the-infoplist&quot;&gt;The Info.plist&lt;/h2&gt;

&lt;p&gt;Now that you understand the code and how it works, let’s setup the app’s Info.plist.&lt;/p&gt;

&lt;p&gt;The following has to be added:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-plist&quot;&gt;&amp;lt;key&amp;gt;CFBundleIcons&amp;lt;/key&amp;gt;
&amp;lt;dict&amp;gt;
  &amp;lt;key&amp;gt;CFBundlePrimaryIcon&amp;lt;/key&amp;gt;
  &amp;lt;dict&amp;gt;
    &amp;lt;key&amp;gt;CFBundleIconFiles&amp;lt;/key&amp;gt;
    &amp;lt;array&amp;gt;
      &amp;lt;string&amp;gt;AppIcon&amp;lt;/string&amp;gt;
    &amp;lt;/array&amp;gt;
    &amp;lt;key&amp;gt;UIPrerenderedIcon&amp;lt;/key&amp;gt;
    &amp;lt;true/&amp;gt;
  &amp;lt;/dict&amp;gt;
  &amp;lt;key&amp;gt;CFBundleAlternateIcons&amp;lt;/key&amp;gt;
  &amp;lt;dict&amp;gt;
    &amp;lt;key&amp;gt;AppIcon-2&amp;lt;/key&amp;gt;
    &amp;lt;dict&amp;gt;
      &amp;lt;key&amp;gt;CFBundleIconFiles&amp;lt;/key&amp;gt;
      &amp;lt;array&amp;gt;
        &amp;lt;string&amp;gt;AppIcon-2&amp;lt;/string&amp;gt;
      &amp;lt;/array&amp;gt;
      &amp;lt;key&amp;gt;UIPrerenderedIcon&amp;lt;/key&amp;gt;
      &amp;lt;true/&amp;gt;
    &amp;lt;/dict&amp;gt;
  &amp;lt;/dict&amp;gt;
&amp;lt;/dict&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;a href=&quot;https://developer.apple.com/library/content/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html#//apple_ref/doc/uid/TP40009249-SW13&quot;&gt;keys are explained&lt;/a&gt;, but in short:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CFBundleIcons&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CFBundlePrimaryIcon&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CFBundleAlternateIcons&lt;/code&gt; - dictionary of alternative icons, with the key name as the name that you will use in code eg. “AppIcon-2”&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You may wonder what why “AppIcon-2” is repeated in &lt;code class=&quot;highlighter-rouge&quot;&gt;CFBundleIconFiles&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;That is actually the image file name (less the “png” or “@2x”). It need not be necessary the same as the key in &lt;code class=&quot;highlighter-rouge&quot;&gt;CFBundleAlternateIcons&lt;/code&gt;. For simplicity we used the same name.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;: If you need to support for iPad, read the last section on a critical pitfall.&lt;/p&gt;

&lt;h2 id=&quot;pitfall-cannot-use-asset-catalog&quot;&gt;Pitfall: Cannot use asset catalog&lt;/h2&gt;

&lt;p&gt;Strangely, alternative icons CANNOT be added to your asset catalog, unlike the primary icon.&lt;/p&gt;

&lt;p&gt;If you do that, you will see an un-helpful error again.&lt;/p&gt;

&lt;p&gt;You have to add “AppIcon-2.png”, “AppIcon-2@2x.png”, “AppIcon-2@3x.png” (180x180) to your app target.&lt;/p&gt;

&lt;h2 id=&quot;pitfall-you-need-completionhandler&quot;&gt;Pitfall: You need &lt;code class=&quot;highlighter-rouge&quot;&gt;completionHandler&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Although &lt;code class=&quot;highlighter-rouge&quot;&gt;setAlternateIconName&lt;/code&gt; can accept a nil &lt;code class=&quot;highlighter-rouge&quot;&gt;completionHandler&lt;/code&gt;, as declared in its signature, you shouldn’t because the app with CRASH, if somehow there is error.&lt;/p&gt;

&lt;p&gt;As &lt;a href=&quot;https://forums.developer.apple.com/thread/71463&quot;&gt;dlbuckley&lt;/a&gt; pointed out (as of Aug 2017),&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;This API isn’t quite ready to be released to us thugs&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;pitfall-not-working-or-crash-in-ipad&quot;&gt;Pitfall: Not working or Crash in iPad&lt;/h2&gt;

&lt;p&gt;This is another common one, and critical, because for the neglected iPad.&lt;/p&gt;

&lt;p&gt;You could run into error like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Error Domain=NSCocoaErrorDomain Code=4 &quot;The file doesn’t exist.&quot; 
UserInfo={NSUnderlyingError=0x60000005e0c0 {Error Domain=LSApplicationWorkspaceErrorDomain 
Code=-105 &quot;iconName not found in CFBundleAlternateIcons entry&quot; 
UserInfo={NSLocalizedDescription=iconName not found in CFBundleAlternateIcons entry}}}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In Apple’s &lt;a href=&quot;https://developer.apple.com/library/content/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html#//apple_ref/doc/uid/TP40009249-SW14&quot;&gt;obscure documentation&lt;/a&gt;, it pointed out:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Important: If your app contains iPad-specific versions of its icons, the system does not fall back to the alternate icons declared in the platform-agnostic version of CFBundleIcons key. Therefore, if you include any alternate icons in the CFBundleIcons key, you must include them again in your CFBundleIcons~ipad variant.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That means, in your “Info.plist”, you need to have a separate entry with &lt;code class=&quot;highlighter-rouge&quot;&gt;CFBundleIcons~ipad&lt;/code&gt; key!&lt;/p&gt;

&lt;p&gt;So, copy whatever in &lt;code class=&quot;highlighter-rouge&quot;&gt;CFBundleIcons&lt;/code&gt; and add for &lt;code class=&quot;highlighter-rouge&quot;&gt;CFBundleIcons~ipad&lt;/code&gt;.&lt;/p&gt;
</description>
        <pubDate>Sun, 20 Aug 2017 16:09:07 +0800</pubDate>
        <link>http://samwize.com/2017/08/20/how-to-change-ios-app-icon-programmatically-ios-10-3/</link>
        <guid isPermaLink="true">http://samwize.com/2017/08/20/how-to-change-ios-app-icon-programmatically-ios-10-3/</guid>
        
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>How Oracle screwed me for 2 months with an UNDERSCORE</title>
        <description>&lt;p&gt;&lt;em&gt;tldr; I was integrating Oracle’s mobile push SDK and was stuck for 2 months. Turned out they have an embarassing bug involving an underscore! Oracle’s Responsys/PushIO proved right – enterprise product sucks.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This post is my rant on how bad Oracle’s product is.&lt;/p&gt;

&lt;h2 id=&quot;the-ridiculous-bug&quot;&gt;The ridiculous bug&lt;/h2&gt;

&lt;p&gt;I spent 2 months to figure out why our iOS app did not display rich message pushed from Oracle’s platform. It boils down to an UNDERSCORE.&lt;/p&gt;

&lt;p&gt;Yes, freaking &lt;code class=&quot;highlighter-rouge&quot;&gt;_&lt;/code&gt;, generated in their API key is the reason why our app didn’t work.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/pushio-ridiculous-bug.jpg&quot; alt=&quot;&quot; class=&quot;border&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From Oracle’s developer support:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The bug is that your API key was generated with an underscore “_” and that is an invalid character for how the API key is used downstream.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;The fix should be pretty straighforward… create a new platform until you get one without underscores in the API key.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Wow.&lt;/p&gt;

&lt;p&gt;It is an embarassing bug, but what appal me more is how they deal with it.&lt;/p&gt;

&lt;h2 id=&quot;a-major-bug&quot;&gt;A major bug&lt;/h2&gt;

&lt;p&gt;Firstly, the bug affects majority of their users, since I took 3 tries, before getting a “valid” one.&lt;/p&gt;

&lt;p&gt;I estimate &lt;strong&gt;66% of users&lt;/strong&gt; could have generated “invalid” keys.&lt;/p&gt;

&lt;p&gt;The bug has big impact. All rich push messages will NOT be displayed in the app!&lt;/p&gt;

&lt;h2 id=&quot;not-fixing-their-sdk-quickly&quot;&gt;Not fixing their SDK quickly&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/pushio/PushIOManager_iOS/tags&quot;&gt;PushIO last release&lt;/a&gt; of their SDK is 16 Jun 2017, that is 2 months ago as of writing.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I give them the benefit of doubt, as I assume the bug only appear in that release, though I do believe the bug happens way before version 6.32.1.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The point is, a major bug should be fixed quickly. But Oracle did not.&lt;/p&gt;

&lt;p&gt;Not to mention this should be an easy fix. They could fix their API key generator, probably in a few lines of code. Somehow Oracle choose not to.&lt;/p&gt;

&lt;h2 id=&quot;lack-of-knowledge-on-the-issue&quot;&gt;Lack of knowledge on the issue&lt;/h2&gt;

&lt;p&gt;Our account manager and a couple of customer support officers did not know about the embarassing &lt;code class=&quot;highlighter-rouge&quot;&gt;_&lt;/code&gt; issue, until it escalated to their developer.&lt;/p&gt;

&lt;p&gt;It could mean:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;They don’t have many users and this issue never came up&lt;/li&gt;
  &lt;li&gt;They have a problem with communicating and sharing of such knowledge&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Either way, as a user, I am less confident with Oracle.&lt;/p&gt;

&lt;h2 id=&quot;we-took-2-long-months&quot;&gt;We took 2 long months&lt;/h2&gt;

&lt;p&gt;Why so long?&lt;/p&gt;

&lt;p&gt;While trying to investigate the issue and isolate the problem, I asked a simple quesion: &lt;em&gt;&lt;strong&gt;Is there an iOS sample code?&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Replies from “enterprise support” ain’t lightning fast.&lt;/p&gt;

&lt;p&gt;It took 2 weeks, before they finally have an answer – no, they don’t. Again, it reveals a lack of knowledgebase to such FAQ.&lt;/p&gt;

&lt;p&gt;Investigating why our push failed is tedious and slow, because I have to &lt;strong&gt;wait till the next day&lt;/strong&gt; to check the logs from an &lt;strong&gt;FTP server&lt;/strong&gt;. It feels so 1990s.&lt;/p&gt;

&lt;h2 id=&quot;a-problem-with-the-enterprise-suite-of-products&quot;&gt;A problem with the enterprise suite of products&lt;/h2&gt;

&lt;p&gt;Responsys is an enterprise email marketing tool – a slow and complicated web app. &lt;a href=&quot;https://mailchimp.com&quot;&gt;Mail Chimp&lt;/a&gt; on the other hand, a rival, is cool and user friendly.&lt;/p&gt;

&lt;p&gt;PushIO is a mobile push SDK, in a very crowded space since 2009, when Apple revolutionized push. It’s better rivals include &lt;a href=&quot;https://www.urbanairship.com&quot;&gt;Urban Airship&lt;/a&gt; and &lt;a href=&quot;https://onesignal.com/&quot;&gt;OneSignal&lt;/a&gt; (free!).&lt;/p&gt;

&lt;p&gt;In 2014, Oracle &lt;em&gt;eat&lt;/em&gt; Responsys, who in turn &lt;em&gt;eat&lt;/em&gt; PushIO – a in &lt;a href=&quot;https://www.bizjournals.com/denver/blog/boosters_bits/2014/01/repsonsys-buys-push-io-before-being.html&quot;&gt;&lt;strong&gt;$1.5 billion acquisition&lt;/strong&gt;&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;When a large corporation acquires a team and it’s product, it is the &lt;strong&gt;start of a downfall&lt;/strong&gt;. This case is messier since a fat clumpsy fish eat a fish which eat another small fish.&lt;/p&gt;

&lt;p&gt;The small fish (PushIO) probably died tragically.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/pushio-big-fish-eat-little-fish.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 06 Aug 2017 00:25:18 +0800</pubDate>
        <link>http://samwize.com/2017/08/06/how-oracle-screwed-me-with-an-underscore/</link>
        <guid isPermaLink="true">http://samwize.com/2017/08/06/how-oracle-screwed-me-with-an-underscore/</guid>
        
        
        <category>Rant</category>
        
        <category>API</category>
        
      </item>
    
      <item>
        <title>WWDC 2017 - What&#39;s New in Foundation</title>
        <description>&lt;p&gt;Summary of what’s new in Foundation, Swift 4, from &lt;a href=&quot;https://developer.apple.com/videos/play/wwdc2017/212/&quot;&gt;session 212&lt;/a&gt;. &lt;em&gt;Tip: You can download WWDC videos easily with &lt;a href=&quot;https://github.com/samwize/wwdc-dl&quot;&gt;wwdc-dl&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;key-paths&quot;&gt;Key Paths&lt;/h2&gt;

&lt;p&gt;Apple calls it Smart, because it is statically safe, and fast.&lt;/p&gt;

&lt;p&gt;It is built into Swift language, with a single &lt;code class=&quot;highlighter-rouge&quot;&gt;\&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/wwdc-foundation-keypath.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// To get via keypath&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ben&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;keyPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Kid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// To set via keypaht&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ben&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;keyPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Kid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nickname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Ben&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;appending-key-paths&quot;&gt;Appending Key Paths&lt;/h2&gt;

&lt;p&gt;You can append key path, provided the type you “chain” is the same.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/wwdc-foundation-keypath-appending.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So if you append, the final keypath is simply of type &lt;code class=&quot;highlighter-rouge&quot;&gt;Keypath&amp;lt;BirthdayParty, Double&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;There are more keypath types.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/wwdc-foundation-keypath-more.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;key-value-observation&quot;&gt;Key-Value Observation&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/images/wwdc-foundation-keypath-kvo.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// To use&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;observation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mia&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;observe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;observed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;change&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// observed is the updated &quot;mia&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;codablejson&quot;&gt;Codable/JSON&lt;/h2&gt;

&lt;p&gt;Swift also finally recognize the importance of JSON.&lt;/p&gt;

&lt;p&gt;You simply add the trait protocol &lt;code class=&quot;highlighter-rouge&quot;&gt;Codable&lt;/code&gt; to your model, and it will work (because of &lt;a href=&quot;http://samwize.com/2016/10/24/swift-protocol-development-guide/&quot;&gt;default protocol extension&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/wwdc-foundation-codable.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you want to customize the key names, you can simply add your own &lt;code class=&quot;highlighter-rouge&quot;&gt;CodingKeys&lt;/code&gt; as an enum in your model. See how the camel case “comment_count” is customized:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CodingKeys&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CodingKey&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;commentCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;comment_count&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Ok, actually &lt;code class=&quot;highlighter-rouge&quot;&gt;Codable&lt;/code&gt; is not only for JSON data, but for &lt;a href=&quot;https://developer.apple.com/documentation/foundation/archives_and_serialization&quot;&gt;other formats&lt;/a&gt; like Property List too. There is &lt;code class=&quot;highlighter-rouge&quot;&gt;JSONDecoder&lt;/code&gt;, and also &lt;code class=&quot;highlighter-rouge&quot;&gt;PropertyListDecoder&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;what-else-&quot;&gt;What Else ?&lt;/h2&gt;

&lt;p&gt;There is &lt;a href=&quot;https://www.raywenderlich.com/163857/whats-new-swift-4&quot;&gt;more&lt;/a&gt; in Swift 4, some small, some advanced API. Many were not touched in session 212.&lt;/p&gt;

&lt;p&gt;Not going to cover all, but here are some teasers:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;String is now a Collection&lt;/li&gt;
  &lt;li&gt;Multi-line string with &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;&quot;&quot;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Collection has more API such as &lt;code class=&quot;highlighter-rouge&quot;&gt;mapValues&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;MutableCollection.swapAt(_:_:)&lt;/code&gt;, default Dictionary value&lt;/li&gt;
  &lt;li&gt;Infer one-sided range eg. infer start and end index&lt;/li&gt;
  &lt;li&gt;Generic subscript&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;fileprivate&lt;/code&gt; &lt;a href=&quot;/2017/04/20/access-levels-in-swift/&quot;&gt;access level&lt;/a&gt; for extension across files&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/2017/09/20/migrating-to-swift-4-and-xcode-9/&quot;&gt;No more&lt;/a&gt; @objc inference&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 03 Aug 2017 16:17:08 +0800</pubDate>
        <link>http://samwize.com/2017/08/03/wwdc-2017-whats-new-in-foundation/</link>
        <guid isPermaLink="true">http://samwize.com/2017/08/03/wwdc-2017-whats-new-in-foundation/</guid>
        
        
        <category>Swift</category>
        
      </item>
    
      <item>
        <title>How to Use Git Bisect to Find the First Bad Commit</title>
        <description>&lt;p&gt;Git has a very powerful command for developers to &lt;strong&gt;systematically find the commit&lt;/strong&gt; that introduce a bug.&lt;/p&gt;

&lt;p&gt;You mark commits as &lt;code class=&quot;highlighter-rouge&quot;&gt;good&lt;/code&gt; OR &lt;code class=&quot;highlighter-rouge&quot;&gt;bad&lt;/code&gt;, and using divide-and-conquer strategy, you will find the first bad commit in a few pass (even with hundreds of commits).&lt;/p&gt;

&lt;h2 id=&quot;steps&quot;&gt;Steps&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 1. Mark current branch that has the bug
git bisect bad

# 2. Mark a tag that is working, or use a commit SHA directly
git bisect good v1.2.3

# 3. Git will automatically checkout the commit between the good and bad
#    You will have to identify if that commit is good or bad, and mark with 
git bisect bad
# OR
git bisect good
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Eventually, you will find the first bad commit.&lt;/p&gt;

&lt;p&gt;You can return to your previous branch with &lt;code class=&quot;highlighter-rouge&quot;&gt;git bisect reset&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For more features, refer to &lt;a href=&quot;https://git-scm.com/docs/git-bisect/&quot;&gt;git-scm doc&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;what-if-you-are-looking-for-the-first-change&quot;&gt;What if you are looking for the first change?&lt;/h2&gt;

&lt;p&gt;Sometimes, you are not finding the first commit that is &lt;strong&gt;bad&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Rather, you want to find the first commit that has &lt;strong&gt;new changes&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Since Git v2.7.0, they introduced &lt;code class=&quot;highlighter-rouge&quot;&gt;new&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;bad&lt;/code&gt; as new terms. If you want to use your own terms, or if you are using older version of git, you can define your terms.&lt;/p&gt;

&lt;p&gt;Example to have  &lt;code class=&quot;highlighter-rouge&quot;&gt;fixed&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;unfixed&lt;/code&gt;,&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git bisect start --term-new=fixed --term-old=unfixed
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then mark with,&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git bisect fixed
git bisect unfixed
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;what-is-the-very-first-commit-sha&quot;&gt;What is the very first commit SHA?&lt;/h2&gt;

&lt;p&gt;The “Initial Commit” SHA can be retrieved with:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git rev-list --max-parents=0 HEAD&lt;/code&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 27 Jul 2017 10:47:55 +0800</pubDate>
        <link>http://samwize.com/2017/07/27/how-to-use-git-bisect-to-find-the-first-bad-commit/</link>
        <guid isPermaLink="true">http://samwize.com/2017/07/27/how-to-use-git-bisect-to-find-the-first-bad-commit/</guid>
        
        
        <category>Git</category>
        
      </item>
    
      <item>
        <title>What Steve Jobs Thinks of React Native</title>
        <description>&lt;p&gt;Adobe announced they are &lt;a href=&quot;https://www.theverge.com/2017/7/25/16026236/adobe-flash-end-of-support-2020&quot;&gt;killing Flash&lt;/a&gt; in 2020.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.apple.com/hotnews/thoughts-on-flash/&quot;&gt;7 years ago&lt;/a&gt;, Steve Jobs explained why Apple and iPhone doesn’t support Flash.&lt;/p&gt;

&lt;p&gt;He was right.&lt;/p&gt;

&lt;h2 id=&quot;the-most-important-reason&quot;&gt;The most important reason&lt;/h2&gt;

&lt;p&gt;The sixth reason, the most important, he said:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;We know from painful experience that letting a third party layer of software come between the platform and the developer ultimately results in sub-standard apps and hinders the enhancement and progress of the platform.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;If developers grow dependent on third party development libraries and tools, they can only take advantage of platform enhancements if and when the third party chooses to adopt the new features.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;We cannot be at the mercy of a third party deciding if and when they will make our enhancements available to our developers.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;This becomes even worse if the third party is supplying a cross platform development tool.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Flash was a cross platform development tool.&lt;/p&gt;

&lt;p&gt;React Native is a cross platform development tool, too.&lt;/p&gt;

&lt;p&gt;I &lt;a href=&quot;http://samwize.com/2017/01/24/why-i-hate-react-native/&quot;&gt;hate React Native&lt;/a&gt;, and I briefly mentioned the &lt;a href=&quot;http://samwize.com/2017/01/09/react-native-for-ios-swift-developer/&quot;&gt;disadvantage of using another big dependency&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;These past events have once again reminded us to “bet” on good technologies, and who to trust.&lt;/p&gt;
</description>
        <pubDate>Wed, 26 Jul 2017 13:32:02 +0800</pubDate>
        <link>http://samwize.com/2017/07/26/what-steve-jobs-thinks-of-react-native/</link>
        <guid isPermaLink="true">http://samwize.com/2017/07/26/what-steve-jobs-thinks-of-react-native/</guid>
        
        
        <category>React Native</category>
        
      </item>
    
  </channel>
</rss>
