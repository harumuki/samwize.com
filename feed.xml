<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>@samwize</title>
    <description>¯\_(ツ)_/¯
</description>
    <link>http://samwize.com/</link>
    <atom:link href="http://samwize.com/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sat, 29 Oct 2016 15:17:21 +0800</pubDate>
    <lastBuildDate>Sat, 29 Oct 2016 15:17:21 +0800</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>The Thing About Responder Chain</title>
        <description>&lt;h2 id=&quot;who-are-responders&quot;&gt;Who are Responders?&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UIView&lt;/code&gt; is &lt;code class=&quot;highlighter-rouge&quot;&gt;UIResponder&lt;/code&gt; type&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UIViewController&lt;/code&gt; is also &lt;code class=&quot;highlighter-rouge&quot;&gt;UIResponder&lt;/code&gt; type&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;They are the common classes that deals with responding to touches, motion events and etcs.&lt;/p&gt;

&lt;h2 id=&quot;who-is-the-first-responder&quot;&gt;Who is the FIRST responder?&lt;/h2&gt;

&lt;p&gt;When user tap on a view, the system has to first find out &lt;em&gt;who is the first responder?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This is known as a &lt;strong&gt;hit-test phase&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;A hit testing phase starts from the lowest level (the window).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Hit test traverse up, while responder chain traverse down.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;hitTest:withEvent:&lt;/code&gt; will be called &lt;a href=&quot;http://stackoverflow.com/a/4961484/242682&quot;&gt;recursively&lt;/a&gt; into subviews (traverse up), until it reaches the &lt;strong&gt;leaf view&lt;/strong&gt;. That responder is the first.&lt;/p&gt;

&lt;h2 id=&quot;the-chain&quot;&gt;The Chain&lt;/h2&gt;

&lt;p&gt;After identifying the first responder, then the responder chain begins, starting with the first responder of course.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://developer.apple.com/library/ios/documentation/EventHandling/Conceptual/EventHandlingiPhoneOS/Art/iOS_responder_chain_2x.png&quot; alt=&quot;Responder Chain&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There are rules to finding the next responder.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The first responder passes the event to its view controller if it has one; if not, it passes to its superview.&lt;/li&gt;
  &lt;li&gt;If a view or its view controller cannot handle the event, it passes to the next responder (superview or parent view controller).&lt;/li&gt;
  &lt;li&gt;Each subsequent superview in the hierarchy follows the pattern described in the first two steps if it cannot handle the event or message.&lt;/li&gt;
  &lt;li&gt;Topmost view in the view hierarchy, or next&lt;/li&gt;
  &lt;li&gt;UIWindow, or next&lt;/li&gt;
  &lt;li&gt;Lastly, App Delegate&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;the-target-action-trick&quot;&gt;The target-action trick&lt;/h2&gt;

&lt;p&gt;You can set a target to nil, and it will traverse up the responder chain to find the action.&lt;/p&gt;

&lt;p&gt;An example from &lt;a href=&quot;http://swiftandpainless.com/utilize-the-responder-chain-for-target-action/&quot;&gt;swiftandpainless.com&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Sat, 29 Oct 2016 11:44:02 +0800</pubDate>
        <link>http://samwize.com/2016/10/29/the-thing-about-responder-chain/</link>
        <guid isPermaLink="true">http://samwize.com/2016/10/29/the-thing-about-responder-chain/</guid>
        
        
        <category>Swift</category>
        
      </item>
    
      <item>
        <title>Swift Protocol Development Guide</title>
        <description>&lt;p&gt;Not too long ago I briefly mentioned the use of protocol as the way of &lt;a href=&quot;http://samwize.com/2016/08/11/swift-is-a-protocol-oriented-programming-language/&quot;&gt;Protocol Oriented Programming&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Protocol is fantastic.&lt;/p&gt;

&lt;p&gt;Here is a guide on some of the common use of this Swift “feature”.&lt;/p&gt;

&lt;h2 id=&quot;declaring-a-protocol&quot;&gt;Declaring a Protocol&lt;/h2&gt;

&lt;p&gt;Protocol are likes classes. You need to give it a name.&lt;/p&gt;

&lt;p&gt;You will commonly find names with &lt;strong&gt;-able&lt;/strong&gt; suffixes eg. &lt;code class=&quot;highlighter-rouge&quot;&gt;TextRepresentable&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let’s use a make up example of &lt;code class=&quot;highlighter-rouge&quot;&gt;Codable&lt;/code&gt;, a protocol with a single function &lt;code class=&quot;highlighter-rouge&quot;&gt;code&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Codable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Any class now that extends &lt;code class=&quot;highlighter-rouge&quot;&gt;Codable&lt;/code&gt; will require the &lt;code class=&quot;highlighter-rouge&quot;&gt;code&lt;/code&gt; method.&lt;/p&gt;

&lt;h2 id=&quot;default-extension&quot;&gt;Default Extension&lt;/h2&gt;

&lt;p&gt;Having a default &lt;code class=&quot;highlighter-rouge&quot;&gt;extension&lt;/code&gt; makes things very convenient to use.&lt;/p&gt;

&lt;p&gt;For example, the default implementation below will always return true.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Codable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now, any type that implements the &lt;code class=&quot;highlighter-rouge&quot;&gt;Codable&lt;/code&gt; protocol get the default implementation, for FREE!&lt;/p&gt;

&lt;p&gt;Of course, you may still implement your own (and not use the default).&lt;/p&gt;

&lt;h2 id=&quot;default-extension-with-type&quot;&gt;Default Extension with Type&lt;/h2&gt;

&lt;p&gt;Now, suppose you want the default extension to use a &lt;code class=&quot;highlighter-rouge&quot;&gt;UIViewController&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;You can enforce that the default extension be of the type &lt;code class=&quot;highlighter-rouge&quot;&gt;UIViewController&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Codable&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIViewController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hidden&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// self is now a UIViewController!&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Of course, now any type that implements the &lt;code class=&quot;highlighter-rouge&quot;&gt;Codable&lt;/code&gt; protocol must be a &lt;code class=&quot;highlighter-rouge&quot;&gt;UIViewController&lt;/code&gt;, if it wants the default implementation.&lt;/p&gt;

&lt;h2 id=&quot;protocol-of-class-type&quot;&gt;Protocol of class type&lt;/h2&gt;

&lt;p&gt;You may enforce that a protocol is to be use by classes only (sorry structs and enums).&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Codable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This is needed especially for the scenario where you need a protocol to be &lt;code class=&quot;highlighter-rouge&quot;&gt;weak&lt;/code&gt; (to avoid &lt;a href=&quot;http://samwize.com/2016/08/05/reference-cycle-for-closures/&quot;&gt;retain cycle&lt;/a&gt;). Because:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;weak can only be applied to class or class-bound protocol.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;associated-types---using-self&quot;&gt;Associated Types - Using &lt;code class=&quot;highlighter-rouge&quot;&gt;Self&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Think of associated types as a placeholder for an unknown type.&lt;/p&gt;

&lt;p&gt;You can use &lt;code class=&quot;highlighter-rouge&quot;&gt;Self&lt;/code&gt; in the protocol declaration to refer to the actual type that implements it.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Codable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;So if later your &lt;code class=&quot;highlighter-rouge&quot;&gt;UIViewController&lt;/code&gt; implements it, &lt;code class=&quot;highlighter-rouge&quot;&gt;foo&lt;/code&gt; can be of the actual type.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Codable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;associated-types---using-associatedtype&quot;&gt;Associated Types - Using &lt;code class=&quot;highlighter-rouge&quot;&gt;associatedtype&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;You could in fact declare any generic type for a protocol.&lt;/p&gt;

&lt;p&gt;Here, we declare &lt;code class=&quot;highlighter-rouge&quot;&gt;Code&lt;/code&gt; as a generic type to be used in the protocol.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Codable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;associatedtype&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Code&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now, you can implement the actual type of &lt;code class=&quot;highlighter-rouge&quot;&gt;Code&lt;/code&gt;. We use &lt;code class=&quot;highlighter-rouge&quot;&gt;Int&lt;/code&gt; in this example:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ActualCodable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Codable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You can make the protocol &lt;a href=&quot;https://www.natashatherobot.com/swift-making-the-associated-type-parameter-readable-in-protocols/&quot;&gt;more readable&lt;/a&gt; if &lt;code class=&quot;highlighter-rouge&quot;&gt;foo&lt;/code&gt; does not describes your parameter name well. In the protocol declaration, you can use &lt;code class=&quot;highlighter-rouge&quot;&gt;_&lt;/code&gt; instead of naming it &lt;code class=&quot;highlighter-rouge&quot;&gt;foo&lt;/code&gt;, then in implementation use any name you want.&lt;/p&gt;

&lt;p&gt;Protocol is powerful :)&lt;/p&gt;
</description>
        <pubDate>Mon, 24 Oct 2016 15:43:06 +0800</pubDate>
        <link>http://samwize.com/2016/10/24/swift-protocol-development-guide/</link>
        <guid isPermaLink="true">http://samwize.com/2016/10/24/swift-protocol-development-guide/</guid>
        
        
        <category>Swift</category>
        
      </item>
    
      <item>
        <title>Continue Network Fetching Even When App Goes to Background</title>
        <description>&lt;h2 id=&quot;problem&quot;&gt;Problem&lt;/h2&gt;

&lt;p&gt;When an iOS app goes to background, network operations (GET/POST/Whatever) will be paused.&lt;/p&gt;

&lt;p&gt;For long running network operations, this is a problem because the the operation is paused, and the app most likely at some point in time will be killed by the OS.&lt;/p&gt;

&lt;p&gt;Then you have to start all over again.&lt;/p&gt;

&lt;h2 id=&quot;solution&quot;&gt;Solution&lt;/h2&gt;

&lt;p&gt;iOS provides a way to register your long running tasks, so that it gets another minute or more in the background.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://developer.apple.com/reference/uikit/uiapplication/1623031-beginbackgroundtaskwithexpiratio&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;beginBackgroundTaskWithExpirationHandler&lt;/code&gt;&lt;/a&gt; is the magic.&lt;/p&gt;

&lt;p&gt;Let’s see the code to using it:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;registerBackgroundTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 1. Register task with expiration handler&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;backgroundTask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sharedApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beginBackgroundTaskWithExpirationHandler&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 2. Code to handle if takes way too long&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// 3. Code for your long running task (synchronous case)&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// 4. End task&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;UIApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sharedApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;endBackgroundTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;backgroundTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;more-than-just-network-operations&quot;&gt;More than just network operations&lt;/h2&gt;

&lt;p&gt;While the situation cited in this post is on network operations, you should realize that any long running tasks can be registered.&lt;/p&gt;

&lt;p&gt;For example, if you have an image processing task that could take minutes, it can be extended as well.&lt;/p&gt;
</description>
        <pubDate>Sun, 16 Oct 2016 15:26:25 +0800</pubDate>
        <link>http://samwize.com/2016/10/16/continue-network-fetching-even-when-app-goes-to-background/</link>
        <guid isPermaLink="true">http://samwize.com/2016/10/16/continue-network-fetching-even-when-app-goes-to-background/</guid>
        
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>Should An Engineer Write Technical Blog?</title>
        <description>&lt;p&gt;Kristina Thai wrote &lt;a href=&quot;http://www.slideshare.net/KristinaThai/become-a-better-engineer-through-writing-62988419&quot;&gt;Become a Better Engineer Through Writing&lt;/a&gt;, and I felt she has made a good case on why we should all write.&lt;/p&gt;

&lt;p&gt;To be a good developer, there are some soft skills:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Communicates Well&lt;/li&gt;
  &lt;li&gt;Passion for learning&lt;/li&gt;
  &lt;li&gt;Able to teach/mentor&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Quoting from &lt;a href=&quot;http://www.shubhro.com/2014/12/27/software-engineers-should-write/&quot;&gt;Shubhro Saha&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Code and essays have a lot more in common. The product is a sequence of logical statements, bundled into modular units– whether it be functions or paragraphs.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Like good prose, good code is concise.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Bad code wastes CPU cycles; bad essays waste brain cycles.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There are 3 main channels where we could write:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Private journal&lt;/li&gt;
  &lt;li&gt;Public blog&lt;/li&gt;
  &lt;li&gt;StackOverflow&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;why-did-i-write-this-blog&quot;&gt;Why did I write this blog?&lt;/h2&gt;

&lt;p&gt;Here (&lt;a href=&quot;http://samwize.com&quot;&gt;samwize.com&lt;/a&gt;) is my public blog for my technical writing.&lt;/p&gt;

&lt;p&gt;But long before I started blogging, I have already been keeping a private journal, documenting the technical challenges I faced, the new things I learnt, the “cheatsheets” I need to refer to frequently, etc.&lt;/p&gt;

&lt;p&gt;It was until &lt;a href=&quot;http://just2me.com/2006/12/17/first-blood/&quot;&gt;2006&lt;/a&gt; (10 years ago!), that I begun writing on a public blog.&lt;/p&gt;

&lt;p&gt;I started blogging on my work with J2ME development (those were the days)!&lt;/p&gt;

&lt;p&gt;I don’t have reason to write a public blog at first, but now I am glad for these reasons:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I refer to my &lt;a href=&quot;http://samwize.com/2015/04/13/uiscrollview-content-view-constraints-autolayout/&quot;&gt;own&lt;/a&gt; &lt;a href=&quot;http://samwize.com/2016/02/28/everything-about-xcode-ui-testing-snapshot/&quot;&gt;guides&lt;/a&gt; &lt;a href=&quot;http://samwize.com/2015/10/27/implementing-nsfetchedresultscontroller-in-swift/&quot;&gt;frequently&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;I have &lt;a href=&quot;http://samwize.com/2015/11/06/guide-to-customizing-uitableview-section-header-footer/&quot;&gt;helped&lt;/a&gt; &lt;a href=&quot;http://samwize.com/2014/03/14/how-to-use-uiscrollview-with-autolayout/&quot;&gt;others&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Others have &lt;a href=&quot;http://samwize.com/2016/04/04/the-bug-to-do-with-uicollectionview-content-offset/&quot;&gt;helped&lt;/a&gt; me&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Always be a student - keep learning.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Always be a teacher - help others and become even better.&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 06 Oct 2016 16:19:30 +0800</pubDate>
        <link>http://samwize.com/2016/10/06/should-an-engineer-write-technical-blog/</link>
        <guid isPermaLink="true">http://samwize.com/2016/10/06/should-an-engineer-write-technical-blog/</guid>
        
        
        <category>Softskills</category>
        
      </item>
    
      <item>
        <title>App Review Now Bans Facebook Single Sign-On</title>
        <description>
</description>
        <pubDate>Thu, 29 Sep 2016 22:50:10 +0800</pubDate>
        <link>http://samwize.com/2016/09/29/app-review-now-bans-facebook-single-sign-on/</link>
        <guid isPermaLink="true">http://samwize.com/2016/09/29/app-review-now-bans-facebook-single-sign-on/</guid>
        
        
        <category>Apple</category>
        
      </item>
    
      <item>
        <title>Pitfall With Opening Universal Link</title>
        <description>&lt;p&gt;Universal link are familiar http links that iOS apps can now use to open apps, rather than opening the link in Safari web browser.&lt;/p&gt;

&lt;p&gt;If the app is installed, then the universal should work just fine.&lt;/p&gt;

&lt;p&gt;One pitfall is when the user &lt;strong&gt;disassociate&lt;/strong&gt; the link; as if telling iOS that the link should NOT open the app.&lt;/p&gt;

&lt;p&gt;We will explain how that happens and the solution.&lt;/p&gt;

&lt;h2 id=&quot;opening-a-universal-link&quot;&gt;Opening a Universal Link&lt;/h2&gt;

&lt;p&gt;We use Uber app as an example.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;https://m.uber.com/&quot;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;UIApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sharedApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;openURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The above will open Uber app.&lt;/p&gt;

&lt;h2 id=&quot;the-pitfall&quot;&gt;The Pitfall&lt;/h2&gt;

&lt;p&gt;The pitfall is when the user tap on the top right &lt;strong&gt;uber.com&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/uber-open-universal-link.jpg&quot; alt=&quot;Open Universal Link&quot; class=&quot;border&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Tapping on that will tell iOS that you, the user, do NOT want Uber app to be opened for the link.&lt;/p&gt;

&lt;p&gt;To be specific, it only affects the app that opened it. Other apps will still open fine. The reason is for user to &lt;em&gt;disable&lt;/em&gt; certain apps.&lt;/p&gt;

&lt;h2 id=&quot;the-solution&quot;&gt;The solution&lt;/h2&gt;

&lt;p&gt;When the universal link &lt;em&gt;doesn’t work&lt;/em&gt;, it will open Safari instead.&lt;/p&gt;

&lt;p&gt;In the webpage, you have to &lt;strong&gt;pull down&lt;/strong&gt; to reveal the &lt;em&gt;smart banner&lt;/em&gt; that will give you the option to re-open Uber app.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/uber-in-safari.jpg&quot; alt=&quot;Open Uber App, Again&quot; class=&quot;border&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Tap on &lt;strong&gt;OPEN&lt;/strong&gt;, and iOS will re-associate the universal link to work for your app.&lt;/p&gt;
</description>
        <pubDate>Mon, 26 Sep 2016 10:59:41 +0800</pubDate>
        <link>http://samwize.com/2016/09/26/pitfall-with-opening-universal-link/</link>
        <guid isPermaLink="true">http://samwize.com/2016/09/26/pitfall-with-opening-universal-link/</guid>
        
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>The Thing About Top &amp; Bottom Autolayout Guide</title>
        <description>&lt;p&gt;iOS 7 introduced the concept of a translucent tab/nav/status bar.&lt;/p&gt;

&lt;p&gt;In doing so, view controllers “extend” their views so that it is beneath the bar, giving a &lt;em&gt;there-but-not-there-blurry&lt;/em&gt; effect.&lt;/p&gt;

&lt;p&gt;To help view controllers to adapt to this iOS 7 concepts, know this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the view is now expanded to beneath the bar(s)&lt;/li&gt;
  &lt;li&gt;to know the area that is NOT beneath the bar, you have to use the top &amp;amp; bottom layout guide (these are 2 properties in view controller)&lt;/li&gt;
  &lt;li&gt;hence when you add subviews, they should usually be &lt;strong&gt;between&lt;/strong&gt; the layout guides&lt;/li&gt;
  &lt;li&gt;however, for scroll view, they should &lt;strong&gt;extend&lt;/strong&gt; beyond the guides, with an inset using the layout guides&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;if-you-have-scroll-view-with-translucent-bar&quot;&gt;If you have Scroll View with Translucent Bar&lt;/h2&gt;

&lt;p&gt;Assuming you use scroll view (including table/collection views) with a translucent nav and tab bar, this is how you configure your storyboard for the view controller:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Enable &lt;strong&gt;Adjust Scroll View Insets&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Enable &lt;strong&gt;Under Top Bars&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Enable &lt;strong&gt;Under Bottom Bars&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Pin the scroll view to &lt;strong&gt;Superview&lt;/strong&gt; top, bottom, left, right&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Why this works?&lt;/p&gt;

&lt;p&gt;When you enable &lt;strong&gt;Under Top/Bottom Bars&lt;/strong&gt;, it tells the view controller’s root view to extend the edges. Programatically you can set &lt;a href=&quot;https://developer.apple.com/reference/uikit/uiviewcontroller/1621515-edgesforextendedlayout&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;edgesForExtendedLayout&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We make the scroll view the same rect as it’s superview, that is the view controller’s root view.&lt;/p&gt;

&lt;p&gt;Then enable &lt;strong&gt;Adjust Scroll View Insets&lt;/strong&gt; so that view controller automatically make the inset fall between the top &amp;amp; bottom layout guide!&lt;/p&gt;

&lt;h2 id=&quot;trivial&quot;&gt;Trivial&lt;/h2&gt;

&lt;p&gt;The top and bottom layout guides are &lt;a href=&quot;https://developer.apple.com/reference/uikit/uilayoutsupport&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UILayoutSupport&lt;/code&gt;&lt;/a&gt; protocol implemented by &lt;code class=&quot;highlighter-rouge&quot;&gt;UIViewController&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It is not &lt;code class=&quot;highlighter-rouge&quot;&gt;UILayoutGuide&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/reference/uikit/uilayoutguide&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UILayoutGuide&lt;/code&gt;&lt;/a&gt; is a different object. It is a useful object if you have constructed &lt;em&gt;dummy views&lt;/em&gt;, or container views, merely to help with autolayout.&lt;/p&gt;

&lt;p&gt;It replace the heavyweight dummy views with this lightweight object, which you can continue to place autolayout constraints with other views.&lt;/p&gt;

</description>
        <pubDate>Fri, 23 Sep 2016 15:32:08 +0800</pubDate>
        <link>http://samwize.com/2016/09/23/the-thing-about-top-and-bottom-autolayout-guide/</link>
        <guid isPermaLink="true">http://samwize.com/2016/09/23/the-thing-about-top-and-bottom-autolayout-guide/</guid>
        
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>Setup Your Own $5 VPN With Docker, OpenVPN and Digital Ocean</title>
        <description>&lt;p&gt;I have set up VPN on my virtual private servers before, but the experience has never been easy.&lt;/p&gt;

&lt;p&gt;Recently, I tried again, using Docker approach, and it is amazingly smooth. Done in 5 minutes!&lt;/p&gt;

&lt;p&gt;Stop spending a fortune on paid VPN services. You can get one at $5/month on Digital Ocean. For me, I didn’t spend a cent, since I am using existing instance that already runs my stuff (:&lt;/p&gt;

&lt;h2 id=&quot;the-pre-requisite&quot;&gt;The Pre-requisite&lt;/h2&gt;

&lt;p&gt;First you need a &lt;a href=&quot;https://m.do.co/c/69baaaf5a07b&quot;&gt;DigitalOcean&lt;/a&gt; account.&lt;/p&gt;

&lt;p&gt;I have been using Digital Ocean for a long time, and I recommend anyone who requires a dedicated server to use it. Register an account with my &lt;a href=&quot;https://m.do.co/c/69baaaf5a07b&quot;&gt;referral link&lt;/a&gt;, and get FREE $10 (that’s 2 months!) to start with.&lt;/p&gt;

&lt;p&gt;Set up a droplet running Ubuntu 14.x, in a geographical location of your liking. I actually have 2 droplets with this VPN setup, 1 in Singapore and 1 in US.&lt;/p&gt;

&lt;p&gt;Then &lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-getting-started&quot;&gt;install Docker&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;setting-up-openvpn&quot;&gt;Setting Up OpenVPN&lt;/h2&gt;

&lt;p&gt;We are using the work of &lt;a href=&quot;https://github.com/kylemanna/docker-openvpn&quot;&gt;kylemanna/docker-openvpn&lt;/a&gt; dockerfile.&lt;/p&gt;

&lt;p&gt;To setup the docker container (change &lt;code class=&quot;highlighter-rouge&quot;&gt;vpn.samwize.com&lt;/code&gt; to your domain/IP):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;OVPN_DATA=&quot;ovpn-data&quot;
docker run -v $OVPN_DATA:/etc/openvpn --rm kylemanna/openvpn ovpn_genconfig -u udp://vpn.samwize.com
docker run -v $OVPN_DATA:/etc/openvpn --rm -it kylemanna/openvpn ovpn_initpki
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You will be prompted to enter your EasyRSA passphrase. These are kept in your data volume &lt;code class=&quot;highlighter-rouge&quot;&gt;ovpn-data&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Run the docker container:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run -v $OVPN_DATA:/etc/openvpn -d -p 1194:1194/udp --cap-add=NET_ADMIN kylemanna/openvpn
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Next, generate the ovpn file for your computer to connect to the VPN later.&lt;/p&gt;

&lt;p&gt;Change &lt;code class=&quot;highlighter-rouge&quot;&gt;CLIENTNAME&lt;/code&gt; to your computer name (eg. &lt;code class=&quot;highlighter-rouge&quot;&gt;MacBook-Supreme&lt;/code&gt; for me ^^).&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run -v $OVPN_DATA:/etc/openvpn --rm -it kylemanna/openvpn easyrsa build-client-full CLIENTNAME nopass
docker run -v $OVPN_DATA:/etc/openvpn --rm kylemanna/openvpn ovpn_getclient CLIENTNAME &amp;gt; CLIENTNAME.ovpn
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;setting-up-your-client&quot;&gt;Setting up your Client&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CLIENTNAME.ovpn&lt;/code&gt; is generated on your server.&lt;/p&gt;

&lt;p&gt;You need to &lt;strong&gt;transfer the file to your computer&lt;/strong&gt;, eg. via SSH or &lt;a href=&quot;https://cyberduck.io&quot;&gt;Cyberduck&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Down a VPN software. For Mac, we can download &lt;a href=&quot;https://tunnelblick.net&quot;&gt;TunnelBlick&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Drag the &lt;code class=&quot;highlighter-rouge&quot;&gt;CLIENTNAME.ovpn&lt;/code&gt; file to TunnelBlick in the menu, and you should be good to use!&lt;/p&gt;
</description>
        <pubDate>Sat, 10 Sep 2016 22:09:52 +0800</pubDate>
        <link>http://samwize.com/2016/09/10/setup-your-own-vpn-with-docker-openvpn-and-digital-ocean/</link>
        <guid isPermaLink="true">http://samwize.com/2016/09/10/setup-your-own-vpn-with-docker-openvpn-and-digital-ocean/</guid>
        
        
        <category>VPS</category>
        
      </item>
    
      <item>
        <title>Drawing Images With UIBezierPath</title>
        <description>&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/library/ios/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/Introduction/Introduction.html#//apple_ref/doc/uid/TP40010156-CH1-SW1&quot;&gt;iOS Graphics System&lt;/a&gt; consists of 3 frameworks:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;UIKit - provide views on a high level&lt;/li&gt;
  &lt;li&gt;Core Graphics - lower level drawing support within UIKit views&lt;/li&gt;
  &lt;li&gt;Core Animation - ability to apply animation and transformation to UIKit views&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;performance-of-uiimage-vs-drawing-with-code&quot;&gt;Performance of UIImage vs Drawing with code&lt;/h2&gt;

&lt;p&gt;This &lt;a href=&quot;http://stackoverflow.com/a/22985255/242682&quot;&gt;answer&lt;/a&gt; explained well when is GPU used, and when is CPU used.&lt;/p&gt;

&lt;p&gt;Displaying a UIImage is (generally) faster, because after loading the image file (via CPU), the image is loaded onto the GPU. If you now display the image 100 times, it will be very fast, because the GPU already contains the image/texture.&lt;/p&gt;

&lt;p&gt;Drawing with code via Core Graphics is slower, because the drawing code happens in the CPU, before being loaded onto the GPU. If you are going to draw 100 times, there will be 100 trips from the CPU to the GPU.&lt;/p&gt;

&lt;p&gt;Quoting from Apple Doc:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The use of custom drawing code should be limited to situations where the content you display needs to change dynamically.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you need to combine standard UI elements with custom drawing, consider using a Core Animation layer to superimpose a custom view with a standard view so that you draw as little as possible.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;animation-effects&quot;&gt;Animation Effects&lt;/h2&gt;

&lt;p&gt;Before we jump into the large chunk of this post on drawing images, let’s know how animation effects can be applied to the image.&lt;/p&gt;

&lt;p&gt;Core Animation has a layer object, and this is actually a &lt;strong&gt;model that encapsulates animations properties&lt;/strong&gt; - geometry, timing and visual properties.&lt;/p&gt;

&lt;p&gt;By modifying this model, you achieve animation easily. The actual rendering is taken care of, and optimized for you.&lt;/p&gt;

&lt;h2 id=&quot;drawingcreating-paths&quot;&gt;Drawing/Creating Paths&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIBezierPath_class/index.html#//apple_ref/occ/cl/UIBezierPath&quot;&gt;UIBezierPath&lt;/a&gt; is the class to create vector-based shapes.&lt;/p&gt;

&lt;p&gt;You create paths with 2 types: &lt;strong&gt;straight lines&lt;/strong&gt; and &lt;strong&gt;curves&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;straight-lines&quot;&gt;1. Straight Lines&lt;/h3&gt;

&lt;p&gt;Assume you have 2 points (&lt;code class=&quot;highlighter-rouge&quot;&gt;CGPoint&lt;/code&gt;), you can draw a line with &lt;code class=&quot;highlighter-rouge&quot;&gt;addLineToPoint&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIBezierPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;moveToPoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;point1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addLineToPoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;point2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;curves&quot;&gt;2. Curves&lt;/h3&gt;

&lt;p&gt;There are 2 types of curves:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/types-of-bezier-curves.png&quot; alt=&quot;Types of curves&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Cubic curve - use &lt;code class=&quot;highlighter-rouge&quot;&gt;addCurve(to:controlPoint1:controlPoint2:)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Quadratic curve - use &lt;code class=&quot;highlighter-rouge&quot;&gt;addQuadCurve(to:controlPoint:)&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The difference is that a cubic curve has 2 control points.&lt;/p&gt;

&lt;p&gt;Bezier curve has &lt;a href=&quot;https://en.wikipedia.org/wiki/Bézier_curve&quot;&gt;complex mathematical relationship&lt;/a&gt;, if you are interested.&lt;/p&gt;

&lt;h3 id=&quot;underlying-cgpathref&quot;&gt;Underlying &lt;code class=&quot;highlighter-rouge&quot;&gt;CGPathRef&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UIBezierPath&lt;/code&gt; is really just a wrapper for &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/GraphicsImaging/Reference/CGPath/index.html#//apple_ref/c/tdef/CGPathRef&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CGPathRef&lt;/code&gt; data type&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can create &lt;code class=&quot;highlighter-rouge&quot;&gt;CGPath&lt;/code&gt;s directly then assign to a &lt;code class=&quot;highlighter-rouge&quot;&gt;UIBezierPath&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;fill--stroke&quot;&gt;Fill &amp;amp; Stroke&lt;/h3&gt;

&lt;p&gt;With a path constructed, you can then render by filling and stroking with colors.&lt;/p&gt;

&lt;p&gt;The code below with fill with red, and stroke a blue line 2 point wide.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;UIColor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;redColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setFill&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;UIColor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;blueColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setStroke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lineWidth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;stroke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;There is one thing about filling that you should know. The &lt;a href=&quot;http://stackoverflow.com/a/14841163/242682&quot;&gt;even-odd fill rule&lt;/a&gt; determines if a hole in a path is to be filled or not. By default, &lt;code class=&quot;highlighter-rouge&quot;&gt;usesEvenOddFillRule&lt;/code&gt; is false, so usually the hole will be filled.&lt;/p&gt;

&lt;h3 id=&quot;drawing-an-image&quot;&gt;Drawing an Image&lt;/h3&gt;

&lt;p&gt;You can also draw an image. Read the section on performance earlier. If you can use &lt;code class=&quot;highlighter-rouge&quot;&gt;UIImageView&lt;/code&gt;, then you should.&lt;/p&gt;

&lt;p&gt;Otherwize, you can use the draw methods in &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIImage_Class/&quot;&gt;UIImage&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;drawAtPoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;cgcontext-transformation&quot;&gt;CGContext Transformation&lt;/h3&gt;

&lt;p&gt;You can change the &lt;a href=&quot;https://developer.apple.com/library/tvos/documentation/GraphicsImaging/Reference/CGContext/index.html&quot;&gt;Current Transformation Matix (CTM)&lt;/a&gt; for the graphics context.&lt;/p&gt;

&lt;p&gt;For example, you can scale the drawing by 50%, then translate (20, 20):&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIGraphicsGetCurrentContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;CGContextSaveGState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;CGContextScaleCTM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;CGContextTranslateCTM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Draw and render your path etc, with respect to the origin.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// However, the CTM transformation will affect the render.&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;CGContextRestoreGState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Notice that you should save and restore the graphics states.&lt;/p&gt;

&lt;h3 id=&quot;rendering-uiimage&quot;&gt;Rendering UIImage&lt;/h3&gt;

&lt;p&gt;These are the steps to generate an &lt;code class=&quot;highlighter-rouge&quot;&gt;UIImage&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;UIGraphicsBeginImageContextWithOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIGraphicsGetCurrentContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Create your bezier path, fill, stroke, etc..&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIGraphicsGetImageFromCurrentImageContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;UIGraphicsEndImageContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;It is important that you pass 0.0 to &lt;code class=&quot;highlighter-rouge&quot;&gt;UIGraphicsBeginImageContextWithOptions&lt;/code&gt; so that the &lt;a href=&quot;/2016/04/19/pitfall-drawing-with-core-graphics-gives-blurry-lines/&quot;&gt;appropriate bitmap size&lt;/a&gt; is created for the (eg retina) device automatically.&lt;/p&gt;
</description>
        <pubDate>Thu, 25 Aug 2016 10:36:49 +0800</pubDate>
        <link>http://samwize.com/2016/08/25/drawing-images-with-uibezierpath/</link>
        <guid isPermaLink="true">http://samwize.com/2016/08/25/drawing-images-with-uibezierpath/</guid>
        
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>Out of Memory Crashes</title>
        <description>&lt;p&gt;Crashlytics has released a new feature to &lt;a href=&quot;http://crashlytics.com/blog/introducing-oom-reporting&quot;&gt;report out of memory (OOM) crashes&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We all know regular crashes - termination of an app due to some code (app or system libraries).&lt;/p&gt;

&lt;p&gt;OOM is another type of crash, which has been &lt;em&gt;ignored&lt;/em&gt; in Crashlytics reports until now.&lt;/p&gt;

&lt;p&gt;There are 2 types of OOM crashes:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Foreground OOM (FOOM) - this crashes like regular crashes&lt;/li&gt;
  &lt;li&gt;Background OOM (BOOM) - app is evicted from iOS&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The method to detect OOM is first introducted by Facebook, using a &lt;a href=&quot;https://code.facebook.com/posts/1146930688654547/reducing-fooms-in-the-facebook-ios-app/&quot;&gt;process of elimination&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/oom-crashes-why-app-is-launching.jpg&quot; alt=&quot;Why is the app starting?&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;crashlytics-ooms&quot;&gt;Crashlytics OOMs&lt;/h2&gt;

&lt;p&gt;Crashlytics has provided reporting on OOM-free sessions.&lt;/p&gt;

&lt;p&gt;Specifically, that is a percentage of sessions that are crash free from FOOM. Note: This is only for &lt;strong&gt;FOOM (Foreground OOM)&lt;/strong&gt;, since FOOM are similar to regular crashes while the app is in the foreground.&lt;/p&gt;

&lt;p&gt;Also, the number of sessions in Answers does NOT include OOM sessions that crashed.&lt;/p&gt;

&lt;p&gt;Crashlytics thrives in providing analytics to crashes, and the inclusion of OOM crashes will be very useful.&lt;/p&gt;

&lt;p&gt;Some &lt;a href=&quot;https://docs.fabric.io/apple/crashlytics/OOMs.html&quot;&gt;pointers&lt;/a&gt; on debugging and fixing these memory issues is provided.&lt;/p&gt;
</description>
        <pubDate>Mon, 22 Aug 2016 10:29:21 +0800</pubDate>
        <link>http://samwize.com/2016/08/22/out-of-memory-crashes/</link>
        <guid isPermaLink="true">http://samwize.com/2016/08/22/out-of-memory-crashes/</guid>
        
        
        <category>iOS</category>
        
      </item>
    
  </channel>
</rss>
