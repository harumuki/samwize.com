<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>@samwize</title>
    <description>¯\_(ツ)_/¯
</description>
    <link>https://samwize.com/</link>
    <atom:link href="https://samwize.com/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Mon, 30 Apr 2018 10:49:20 +0800</pubDate>
    <lastBuildDate>Mon, 30 Apr 2018 10:49:20 +0800</lastBuildDate>
    <generator>Jekyll v3.6.2</generator>
    
      <item>
        <title>How to Vibrate an iPhone</title>
        <description>&lt;h2 id=&quot;steps&quot;&gt;Steps&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Target &amp;gt; Linked Frameworks and Libraries &amp;gt; Add &lt;strong&gt;AudioToolbox&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;import AudioToolbox&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AudioServicesPlaySystemSoundWithCompletion(kSystemSoundID_Vibrate, nil)&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It is that simple using &lt;a href=&quot;https://developer.apple.com/documentation/audiotoolbox/1405248-audioservicesplaysystemsound&quot;&gt;AudioServicesPlaySystemSound API&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;pitfall-does-not-work-along-with-other-audio-session&quot;&gt;Pitfall: Does not work along with other audio session&lt;/h2&gt;

&lt;p&gt;There is a &lt;a href=&quot;https://developer.apple.com/documentation/audiotoolbox/1405202-audioservicesplayalertsound&quot;&gt;note&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;However, the device does not vibrate if your app’s audio session is configured with the AVAudioSessionCategoryPlayAndRecord or AVAudioSessionCategoryRecord audio session category.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;While the note is for &lt;code class=&quot;highlighter-rouge&quot;&gt;AudioServicesPlayAlertSound&lt;/code&gt;, it is applicable to &lt;code class=&quot;highlighter-rouge&quot;&gt;AudioServicesPlaySystemSound&lt;/code&gt; too.&lt;/p&gt;

&lt;p&gt;As long as you have a audio session (via AVAudioPlayer, AVCaptureMovieFileOutput, etc), then the phone will NOT vibrate.&lt;/p&gt;

&lt;p&gt;To make it work, use the new Haptic API.&lt;/p&gt;

&lt;h2 id=&quot;haptic-api&quot;&gt;Haptic API&lt;/h2&gt;

&lt;p&gt;In iOS 10, there is a new API, making use of the new haptic engine in iPhone.&lt;/p&gt;

&lt;p&gt;The API is very simple, with 3 concrete classes to &lt;a href=&quot;https://developer.apple.com/documentation/uikit/uifeedbackgenerator&quot;&gt;UIFeedbackGenerator&lt;/a&gt;. Use accordingly to your scenario.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;c1&quot;&gt;// UI &quot;impact&quot;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;UIImpactFeedbackGenerator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;light&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;impactOccurred&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;UIImpactFeedbackGenerator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;medium&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;impactOccurred&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;UIImpactFeedbackGenerator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;heavy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;impactOccurred&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Selection changed&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;UISelectionFeedbackGenerator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;selectionChanged&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Notifications&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;UINotificationFeedbackGenerator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;notificationOccurred&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;UINotificationFeedbackGenerator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;notificationOccurred&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;UINotificationFeedbackGenerator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;notificationOccurred&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;warning&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// To be complete, this is the vibration using AudioToolbox&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;AudioServicesPlaySystemSoundWithCompletion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kSystemSoundID_Vibrate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Mon, 30 Apr 2018 09:49:03 +0800</pubDate>
        <link>https://samwize.com/2018/04/30/how-to-vibrate-an-iphone/</link>
        <guid isPermaLink="true">https://samwize.com/2018/04/30/how-to-vibrate-an-iphone/</guid>
        
        
      </item>
    
      <item>
        <title>What is Bundle?</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/documentation/foundation/bundle&quot;&gt;Bundle&lt;/a&gt; represents a directory. It &lt;a href=&quot;https://developer.apple.com/library/content/documentation/CoreFoundation/Conceptual/CFBundles/AboutBundles/AboutBundles.html&quot;&gt;groups resources&lt;/a&gt; together.&lt;/p&gt;

&lt;h2 id=&quot;application&quot;&gt;Application&lt;/h2&gt;

&lt;p&gt;In a typical application, all of your assets, images, strings, resources and code will be in the “main bundle”.&lt;/p&gt;

&lt;p&gt;To be convenient, resource classes provide sensible default to use.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// NSLocalizedString function signature has a default bundle&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;NSLocalizedString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tableName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bundle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;comment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;a href=&quot;https://stackoverflow.com/q/24991791/242682&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;default&lt;/code&gt;&lt;/a&gt; is &lt;code class=&quot;highlighter-rouge&quot;&gt;Bundle.main&lt;/code&gt;. So you don’t have to specify explicitly.&lt;/p&gt;

&lt;p&gt;Without surprise, &lt;a href=&quot;https://developer.apple.com/documentation/uikit/uiimage/1624146-init&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UIImage&lt;/code&gt; initialization&lt;/a&gt; uses the main bundle too. And if you want to specific another bundle you could use the &lt;a href=&quot;https://developer.apple.com/documentation/uikit/uiimage/1624154-init&quot;&gt;other init&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But the default to use main bundle is not applicable to frameworks and playgrounds.&lt;/p&gt;

&lt;h2 id=&quot;framework&quot;&gt;Framework&lt;/h2&gt;

&lt;p&gt;When you are developing a framework, you should NOT use &lt;code class=&quot;highlighter-rouge&quot;&gt;Bundle.main&lt;/code&gt;, because that is the app’s bundle.&lt;/p&gt;

&lt;p&gt;Your resources is in your framework’s bundle.&lt;/p&gt;

&lt;p&gt;Therefore the default main bundle that &lt;code class=&quot;highlighter-rouge&quot;&gt;NSLocalizedString&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;UIImage&lt;/code&gt; use will fail in when you are developing a framework.&lt;/p&gt;

&lt;p&gt;The correct way:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;frameworkBundle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyFrameworkClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;stringInFramework&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSLocalizedString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;frameworkBundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;comment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;imageInFramework&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;named&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;img&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;frameworkBundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;compatibleWith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Bundle(for:)&lt;/code&gt; conveniently find the bundle that contains the class. You could use any other class in your framework to replace &lt;code class=&quot;highlighter-rouge&quot;&gt;MyFrameworkClass&lt;/code&gt;. It works because all code and resources will be in the same bundle for a framework.&lt;/p&gt;

&lt;h2 id=&quot;playground&quot;&gt;Playground&lt;/h2&gt;

&lt;p&gt;Playground is another special case.&lt;/p&gt;

&lt;p&gt;Try running this in playground to see the &lt;code class=&quot;highlighter-rouge&quot;&gt;bundlePath&lt;/code&gt; (the file URL path).&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;Bundle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bundlePath&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;Bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Framework1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bundlePath&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;Bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Framework2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bundlePath&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The URL will look like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~/Library/Developer/XCPGDevices/x-x-x/data/Containers/Bundle/Application/y-y-y/UIPlayground-28059-1.app
~/Library/Developer/Xcode/DerivedData/App-xyz/Build/Products/Debug-iphonesimulator/Framework1.framework
~/Library/Developer/Xcode/DerivedData/App-xyz/Build/Products/Debug-iphonesimulator/Framework2.framework
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you add your resources to the “Resources” group in Playground, then the main bundle will contain the resources.&lt;/p&gt;

&lt;p&gt;But if you need a resource from a framework, then you need the bundle for the framework.&lt;/p&gt;

&lt;h2 id=&quot;the-complicated-case&quot;&gt;The Complicated Case&lt;/h2&gt;

&lt;p&gt;In our previous tutorial that &lt;a href=&quot;/2017/10/05/adding-playground-to-an-existing-project/&quot;&gt;uses Playground to create application’s UI&lt;/a&gt;, the scenario is complicated because the same resource is used in 2 targets:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The app&lt;/li&gt;
  &lt;li&gt;The framework for playground (&lt;code class=&quot;highlighter-rouge&quot;&gt;MyUIPlaygroundFramework&lt;/code&gt;)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For such case, the resource has to specify the bundle correctly.&lt;/p&gt;

&lt;p&gt;The trick is to make use of a class that &lt;strong&gt;exists in both&lt;/strong&gt; the app and framework.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bundle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CommonClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When you use in app, &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle&lt;/code&gt; will be main bundle.&lt;/p&gt;

&lt;p&gt;When you use in framework, &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle&lt;/code&gt; will be the framework’s bundle.&lt;/p&gt;
</description>
        <pubDate>Fri, 27 Apr 2018 17:01:16 +0800</pubDate>
        <link>https://samwize.com/2018/04/27/what-is-bundle/</link>
        <guid isPermaLink="true">https://samwize.com/2018/04/27/what-is-bundle/</guid>
        
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>Setup AppDelegate Without Storyboard</title>
        <description>&lt;p&gt;When you create a new project in Xcode, the default boilerplate includes a &lt;code class=&quot;highlighter-rouge&quot;&gt;Main.storyboard&lt;/code&gt; with a view controller that will be initialized when the app is launched.&lt;/p&gt;

&lt;p&gt;If you are going with no-storyboard approach, then you need 2 steps to remove the storyboard.&lt;/p&gt;

&lt;h2 id=&quot;1-remove-mainstoryboard&quot;&gt;1. Remove Main.storyboard&lt;/h2&gt;

&lt;p&gt;Delete the storyboard file.&lt;/p&gt;

&lt;p&gt;The only reference to the storyboard file is in the target settings.&lt;/p&gt;

&lt;p&gt;Go to App Target &amp;gt; General &amp;gt; Deployment Info &amp;gt; Main Interface &amp;gt; delete “Main”.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/xcode-main-interface.jpg&quot; alt=&quot;&quot; class=&quot;border&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Leave it blank, as we will create the main interface with code in the next step.&lt;/p&gt;

&lt;h2 id=&quot;2-create-main-window&quot;&gt;2. Create main window&lt;/h2&gt;

&lt;p&gt;We need to create the window manually, when the app is launched.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;didFinishLaunchingWithOptions&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;launchOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;UIApplicationLaunchOptionsKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]?)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;window&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIScreen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bounds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rootViewController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;makeKeyAndVisible&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That’s it! Not that hard at all without storyboard.&lt;/p&gt;
</description>
        <pubDate>Wed, 04 Apr 2018 22:29:45 +0800</pubDate>
        <link>https://samwize.com/2018/04/04/setup-appdelegate-without-storyboard/</link>
        <guid isPermaLink="true">https://samwize.com/2018/04/04/setup-appdelegate-without-storyboard/</guid>
        
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>Nested UIViewControllers Using Container</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/library/content/featuredarticles/ViewControllerPGforiPhoneOS/ImplementingaContainerViewController.html&quot;&gt;Container view controller&lt;/a&gt; is a new concept from iOS 5.&lt;/p&gt;

&lt;p&gt;Yet prior to iOS 5, we have always been using containers, just that we didn’t know..&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UINavigationController&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;UITabBarController&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;UISplitViewController&lt;/code&gt; – they are all container view controllers, without us knowing!&lt;/p&gt;

&lt;h2 id=&quot;what-is-a-container&quot;&gt;What is a container?&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;A container view controller embeds the content of other view controllers into its own root view. A container view controller may mix custom views with the contents of its child view controllers to facilitate navigation or to create unique interfaces.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For example, a &lt;code class=&quot;highlighter-rouge&quot;&gt;UINavigationController&lt;/code&gt; manages a navigation bar (a custom view) and a stack of child view controllers (only one of which is visible at a time), and provides an API to add and remove child view controllers from the stack.&lt;/p&gt;

&lt;p&gt;Your custom container is a &lt;strong&gt;parent&lt;/strong&gt; (aka root) view controller and will be managing it’s &lt;strong&gt;children&lt;/strong&gt; view controllers. It is up to the container to render the whole view.&lt;/p&gt;

&lt;h2 id=&quot;when-should-you-use-container-view-controllers&quot;&gt;When should you use Container View Controllers?&lt;/h2&gt;

&lt;p&gt;It is not entirely clear when developers should use, or not use.&lt;/p&gt;

&lt;p&gt;Remember: Container is a technique for managing multiple view controllers, usually handling the navigation and the transition effect. It is &lt;em&gt;entirely possible to not use&lt;/em&gt; custom container, and we obviously could not use it prior to iOS 5.&lt;/p&gt;

&lt;p&gt;What is an alternative?&lt;/p&gt;

&lt;p&gt;An alternative is to manage multiple views (not view controllers).&lt;/p&gt;

&lt;p&gt;When possible, you should NOT use container, especially if you are using simple views (not full blown view controller). &lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/a/5789009/242682&quot;&gt;Defines UIView vs UIViewController&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;scenario-nested-view-controllers&quot;&gt;Scenario: Nested View Controllers&lt;/h3&gt;

&lt;p&gt;Let’s discuss a very common scenario where we use container to simple nest other view controllers.&lt;/p&gt;

&lt;p&gt;If you use Xcode interface builder, you can easily drag a container view to the storyboard, and automatically a child view controller will be added onto the storyboard.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/xcode-container-nested.png&quot; alt=&quot;Drag and drop 2 container views&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Using container in this way is simply to nest multiple view controllers in a parent view controller.&lt;/p&gt;

&lt;p&gt;Note: “Child A” and “Child B” are simply &lt;code class=&quot;highlighter-rouge&quot;&gt;UIView&lt;/code&gt;, aka container view, defined as:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A region of a view controller that can include a child view controller&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There is a benefit to using container in a storyboard. In the screenshot, “Child B” is actually right on top and obscuring “Child A”.&lt;/p&gt;

&lt;p&gt;Yet, because of container, you can see and design the individual child view controllers!&lt;/p&gt;

&lt;p&gt;But, if you are coming from &lt;em&gt;no-storyboard pure coding way&lt;/em&gt;, then using container and nested view controllers will not be an apparent solution. Because with code, you don’t have the problem of interface builder, and you are used to creating custom views (in your mind!), even when they overlap.&lt;/p&gt;

&lt;p&gt;I prefer the way of no-storyboard, so for the scenario of simply nesting multiple views, you should not use container.&lt;/p&gt;

&lt;h3 id=&quot;checklist-to-using-container&quot;&gt;Checklist to using container&lt;/h3&gt;

&lt;p&gt;If you answer all/many YES to this checklist, then go ahead and use container.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Child view controller is independent to the parent&lt;/li&gt;
  &lt;li&gt;Child view controller is equivalent to a screen&lt;/li&gt;
  &lt;li&gt;Child view controller determines the status bar style&lt;/li&gt;
  &lt;li&gt;Child view controller requires &lt;code class=&quot;highlighter-rouge&quot;&gt;viewDidAppear&lt;/code&gt; etc events&lt;/li&gt;
  &lt;li&gt;Child is a view controller, and not just a view&lt;/li&gt;
  &lt;li&gt;Parent view controller navigate (push/popping/mixing) the child view controllers&lt;/li&gt;
  &lt;li&gt;Parent view controller controls the transition effects when navigating&lt;/li&gt;
  &lt;li&gt;Parent view controller probably showing 1 or 2 child at 1 time&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If not, fallback to regular views.&lt;/p&gt;

&lt;h2 id=&quot;adding-a-child-view-controller&quot;&gt;Adding a child view controller&lt;/h2&gt;

&lt;p&gt;You need &lt;a href=&quot;https://developer.apple.com/library/content/featuredarticles/ViewControllerPGforiPhoneOS/ImplementingaContainerViewController.html#//apple_ref/doc/uid/TP40007457-CH11-SW13&quot;&gt;these steps&lt;/a&gt;:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Container view controller to call &lt;code class=&quot;highlighter-rouge&quot;&gt;addChildViewController&lt;/code&gt;, so that UIKit knows your container is now managing the child view controller.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Add the child’s view to your container’s view hierarchy.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Setup auto layout constraints for the child’s view.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Child view controller to call &lt;code class=&quot;highlighter-rouge&quot;&gt;didMoveToParentViewController&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Creating the child in Parent's viewDidLoad&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;child&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyChildViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;addChildViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addSubview&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Setup auto layout constraints for child.view..&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;didMove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;toParentViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To remove a child view controller, you undo the with the corresponding methods.&lt;/p&gt;

&lt;h2 id=&quot;the-awkward-design-of-container-view-controller&quot;&gt;The (awkward) design of container view controller&lt;/h2&gt;

&lt;p&gt;You might have noticed by now.&lt;/p&gt;

&lt;p&gt;A container (parent) view controller is simply &lt;code class=&quot;highlighter-rouge&quot;&gt;UIViewController&lt;/code&gt;, and the children are also &lt;code class=&quot;highlighter-rouge&quot;&gt;UIViewController&lt;/code&gt;. Kind of bad design overloading 2 types.&lt;/p&gt;

&lt;p&gt;Then there are some methods specifically for them:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;addChildViewController(_:)&lt;/code&gt; - only parent should call&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;removeFromParentViewController()&lt;/code&gt; - only child should call&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;willMove(toParentViewController:)&lt;/code&gt; - only child should call&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;didMove(toParentViewController:)&lt;/code&gt; - only child should call&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You have to be careful what you can, and should, call.&lt;/p&gt;

&lt;p&gt;Rotation and appearance callbacks are automatically propagated from parent to children.&lt;/p&gt;
</description>
        <pubDate>Wed, 21 Mar 2018 16:33:12 +0800</pubDate>
        <link>https://samwize.com/2018/03/21/nested-uiviewcontrollers-using-container-views/</link>
        <guid isPermaLink="true">https://samwize.com/2018/03/21/nested-uiviewcontrollers-using-container-views/</guid>
        
        
        <category>UI</category>
        
      </item>
    
      <item>
        <title>How to Setup Free SSL for Github Pages</title>
        <description>&lt;p&gt;SSL/HTTPS is now &lt;a href=&quot;https://searchengineland.com/effective-july-2018-googles-chrome-browser-will-mark-non-https-sites-as-not-secure-291623&quot;&gt;almost mandatory&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Good news is, we can easily setup SSL with &lt;a href=&quot;https://www.Cloudflare.com&quot;&gt;Cloudflare&lt;/a&gt;, and it’s free!&lt;/p&gt;

&lt;h2 id=&quot;requirements&quot;&gt;Requirements&lt;/h2&gt;

&lt;p&gt;Make sure you already have a website hosted on Github Pages, and serving via your own domain name.&lt;/p&gt;

&lt;p&gt;If not, &lt;a href=&quot;/2015/09/02/how-to-host-a-website-on-github-pages/&quot;&gt;get your website running&lt;/a&gt; first.&lt;/p&gt;

&lt;p&gt;Then register a &lt;a href=&quot;https://www.Cloudflare.com&quot;&gt;Cloudflare&lt;/a&gt; account.&lt;/p&gt;

&lt;h2 id=&quot;setup-on-cloudflare&quot;&gt;Setup on Cloudflare&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;In Cloudflare &amp;gt; “Add Site” &amp;gt; Enter your website domain name&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Cloudflare automatically copy your DNS records, but you should double check them&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In your domain registrar, change the nameservers to that provided by Cloudflare – eg. &lt;code class=&quot;highlighter-rouge&quot;&gt;mia.ns.Cloudflare.com&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;yichun.ns.Cloudflare.com&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That’s it!&lt;/p&gt;

&lt;h2 id=&quot;the-thing-about-page-rules&quot;&gt;The Thing About Page Rules&lt;/h2&gt;

&lt;p&gt;Cloudflare’s Page Rules is like nginx configuration. You can rewrite URLs, configure cache settings, redirects, etc.&lt;/p&gt;

&lt;p&gt;For simple redirection/forwarding, you &lt;a href=&quot;https://support.cloudflare.com/hc/en-us/articles/200168306-Is-there-a-tutorial-for-Page-Rules-#redirects&quot;&gt;need 1 page rule&lt;/a&gt; for every redirect.&lt;/p&gt;

&lt;p&gt;Cloudflare free plan provides only 3 page rules.&lt;/p&gt;

&lt;p&gt;Argh, that’s the caveat of being free.&lt;/p&gt;
</description>
        <pubDate>Tue, 20 Mar 2018 17:58:01 +0800</pubDate>
        <link>https://samwize.com/2018/03/20/how-to-setup-free-ssl-for-github-pages/</link>
        <guid isPermaLink="true">https://samwize.com/2018/03/20/how-to-setup-free-ssl-for-github-pages/</guid>
        
        
        <category>Website</category>
        
        <category>Github</category>
        
      </item>
    
      <item>
        <title>Swift Lint to Improve Code Quality</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://github.com/realm/SwiftLint&quot;&gt;SwiftLint&lt;/a&gt; helps to enforce coding style.&lt;/p&gt;

&lt;p&gt;It is useful when working in a team because warnings &amp;amp; errors are produced when the code is &lt;em&gt;not up to standard&lt;/em&gt;. The rules are fully customizable according to a team needs.&lt;/p&gt;

&lt;p&gt;This guide will be on how to setup &lt;a href=&quot;https://github.com/realm/SwiftLint&quot;&gt;SwiftLint&lt;/a&gt; for an existing project, and with Fastlane.&lt;/p&gt;

&lt;h2 id=&quot;step-1-install-the-tool&quot;&gt;Step 1. Install the tool&lt;/h2&gt;

&lt;p&gt;Add to &lt;code class=&quot;highlighter-rouge&quot;&gt;Podfile&lt;/code&gt; and do a &lt;code class=&quot;highlighter-rouge&quot;&gt;pod install&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pod 'SwiftLint'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;step-2-run-script-on-build&quot;&gt;Step 2. Run script on build&lt;/h2&gt;

&lt;p&gt;In &lt;strong&gt;Target &amp;gt; Build Phases &amp;gt; New Run Script Phase&lt;/strong&gt;, add&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;${PODS_ROOT}/SwiftLint/swiftlint&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, whenever you build the target, swiftlint will run.&lt;/p&gt;

&lt;p&gt;If you run with an existing project, it is likely to have warnings/errors. This is because the default rules are being used.&lt;/p&gt;

&lt;h2 id=&quot;step-3-customize-the-rules&quot;&gt;Step 3. Customize the rules&lt;/h2&gt;

&lt;p&gt;You can find &lt;a href=&quot;https://github.com/realm/SwiftLint/blob/master/Rules.md&quot;&gt;all the rules&lt;/a&gt; in the wiki. By default, around 70% are enabled.&lt;/p&gt;

&lt;p&gt;You can &lt;a href=&quot;https://github.com/realm/SwiftLint#configuration&quot;&gt;customize the rules&lt;/a&gt; with a &lt;code class=&quot;highlighter-rouge&quot;&gt;.swiftlint.yml&lt;/code&gt; file in the root folder.&lt;/p&gt;

&lt;p&gt;Let’s take a look at how the configuration file works:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# You can disable rules that have been enabled by default&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;disabled_rules&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;identifier_name&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;force_cast&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Similarly, you can enable rules that have been disabled by default&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;opt_in_rules&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;first_where&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Exclude directories that you don't want to lint&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;excluded&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Pods&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;fastlane&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Use &quot;xcode&quot; so that when you build, the result will be shown in Xcode&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;reporter&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;xcode&quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Other reporters: json, csv, checkstyle, junit, html, emoji&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# The rule `function_body_length` by default triggers warning at 40, error at 100&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# This example increases by 3 times&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;function_body_length&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;warning&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;120&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;300&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Sometimes, you want to dig into the &lt;a href=&quot;https://github.com/realm/SwiftLint/tree/master/Source/SwiftLintFramework/Rules&quot;&gt;code for each rule&lt;/a&gt; to understand how it works.&lt;/p&gt;

&lt;p&gt;And you can also create &lt;a href=&quot;https://github.com/realm/SwiftLint#defining-custom-rules&quot;&gt;custom rules&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;step-4-integrate-with-fastlane&quot;&gt;Step 4. Integrate with fastlane&lt;/h2&gt;

&lt;p&gt;You can already see the warnings whenever you build in Xcode.&lt;/p&gt;

&lt;p&gt;Integrating with Fastlane is for another purpose – to generate a HTML report.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Add a lane in Fastfile&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;desc&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Run lint&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;lane&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:lint&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;swiftlint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;mode: :lint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;executable: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Pods/SwiftLint/swiftlint&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;reporter: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;html&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;output_file: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;swiftlint-results.html&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;ignore_exit_status: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The difference with using fastlane is that the reporter is set to &lt;strong&gt;html&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;You can run &lt;code class=&quot;highlighter-rouge&quot;&gt;fastlane lint&lt;/code&gt; manually, and open up swiftlint-results.html to see all the violations.&lt;/p&gt;

&lt;h2 id=&quot;step-5-autocorrect&quot;&gt;Step 5. Autocorrect&lt;/h2&gt;

&lt;p&gt;Swiftlint has magic.&lt;/p&gt;

&lt;p&gt;For some rules, the tool can automatically fix your code! You are lucky if a rule &lt;a href=&quot;https://github.com/realm/SwiftLint/blob/master/Rules.md&quot;&gt;&lt;strong&gt;supports autocorrection&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Add another lane that run autocorrect mode&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;desc&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Run lint autocorrect&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;lane&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:lint_autocorrect&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;swiftlint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;mode: :autocorrect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;executable: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Pods/SwiftLint/swiftlint&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;config_file: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.swiftlint-autocorrect.yml&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note that we use a different config file &lt;code class=&quot;highlighter-rouge&quot;&gt;.swiftlint-autocorrect.yml&lt;/code&gt;. And in this file, we use another approach to specify the rules – whitelisting.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Only work with these rules&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;whitelist_rules&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;trailing_whitespace&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;trailing_newline&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;vertical_whitespace&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Run &lt;code class=&quot;highlighter-rouge&quot;&gt;fastlane lint_autocorrect&lt;/code&gt; and watch the magic happens.&lt;/p&gt;

&lt;h2 id=&quot;step-6-disable-rules-in-code&quot;&gt;Step 6: Disable rules in code&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Rules are meant to be broken.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Sometimes, you knowingly break rules.&lt;/p&gt;

&lt;p&gt;When that happens, and you really want it that way, you can disable the rule &lt;a href=&quot;https://github.com/realm/SwiftLint#disable-rules-in-code&quot;&gt;in code&lt;/a&gt; on a case-by-case basis.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// swiftlint:disable force_cast&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Now the rule force_cast is disabled&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;noWarning&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as!&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Re-enable back the rules&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// swiftlint:enable force_cast&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Disable with `this` (inline), `next` (next line) or `previous`&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;noWarning&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as!&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// swiftlint:disable:this force_cast&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;summary-the-approach-for-an-existing-project&quot;&gt;Summary: The approach for an existing project&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Use the default rules&lt;/li&gt;
  &lt;li&gt;Build&lt;/li&gt;
  &lt;li&gt;Fix a rule by either:
    &lt;ol&gt;
      &lt;li&gt;Autocorrect, if possible&lt;/li&gt;
      &lt;li&gt;Remove it by adding to &lt;code class=&quot;highlighter-rouge&quot;&gt;disabled_rules&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Customize it&lt;/li&gt;
      &lt;li&gt;Disable in code&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When all the default rules are “fixed”, go through the rules that are disabled by default. Add them to &lt;code class=&quot;highlighter-rouge&quot;&gt;opt_in_rules&lt;/code&gt;, if useful.&lt;/p&gt;

&lt;h2 id=&quot;bonus-rule-trailing_whitespace&quot;&gt;Bonus: Rule trailing_whitespace&lt;/h2&gt;

&lt;p&gt;“Lines should not have trailing whitespace.”&lt;/p&gt;

&lt;p&gt;Xcode by default will have whitespace for empty lines, following the indentation. This is unecessary, a bad default, which you can change.&lt;/p&gt;

&lt;p&gt;Enable in &lt;strong&gt;Xcode Preferences &amp;gt; Text Editing &amp;gt; Including whitespace-only lines&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/xcode-preference-whitelines.jpg&quot; alt=&quot;Xcode Preferences&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 08 Mar 2018 13:43:08 +0800</pubDate>
        <link>https://samwize.com/2018/03/08/swift-lint-to-improve-code-quality/</link>
        <guid isPermaLink="true">https://samwize.com/2018/03/08/swift-lint-to-improve-code-quality/</guid>
        
        
        <category>Swift</category>
        
        <category>Code</category>
        
      </item>
    
      <item>
        <title>How to Make Xcode Run Faster</title>
        <description>&lt;h2 id=&quot;show-build-time&quot;&gt;Show Build Time&lt;/h2&gt;

&lt;p&gt;You have to enable this settings via command line:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;defaults write com.apple.dt.Xcode ShowBuildOperationDuration -bool YES
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Whenever Xcode finish building, you will see the time it spent in the top status panel (where you see build “Succeeded”).&lt;/p&gt;

&lt;p&gt;With this data displayed, let’s make Xcode build faster.&lt;/p&gt;

&lt;h2 id=&quot;whole-module-optimization&quot;&gt;Whole Module Optimization&lt;/h2&gt;

&lt;p&gt;The default settings from Xcode makes the build process slow. You may say it is a bug.&lt;/p&gt;

&lt;p&gt;Do this for your target’s &lt;strong&gt;Debug configuration&lt;/strong&gt;:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;In Build Settings &amp;gt; Optimization Level &amp;gt; change to &lt;strong&gt;Fast, Whole Module Optimization&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;In Build Settings &amp;gt; Swift Flags &amp;gt; Add &lt;code class=&quot;highlighter-rouge&quot;&gt;-Onone&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you are not sure, &lt;a href=&quot;http://developear.com/blog/2016/12/30/Speed-Swift-Compilation.html&quot;&gt;screenshots here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;pods-too&quot;&gt;Pods too&lt;/h2&gt;

&lt;p&gt;Similarly, you can add a post install hook to &lt;code class=&quot;highlighter-rouge&quot;&gt;Podfile&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;post_install&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;installer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;installer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pods_project&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;targets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;build_configurations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Debug'&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;build_settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'OTHER_SWIFT_FLAGS'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'$(inherited)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'-Onone'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;build_settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'SWIFT_OPTIMIZATION_LEVEL'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'-Owholemodule'&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;build-active-architecture-only&quot;&gt;Build Active Architecture Only&lt;/h2&gt;

&lt;p&gt;The default from Xcode is correct, but you should double check.&lt;/p&gt;

&lt;p&gt;Build Settings &amp;gt; Build Active Architecture &amp;gt; should be &lt;strong&gt;Yes for Debug configuration&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;What this means is that &lt;a href=&quot;http://samwize.com/2015/01/14/what-is-build-active-architecture-only/&quot;&gt;Xcode will detect&lt;/a&gt; the device that is connected and build only for that architecture alone.&lt;/p&gt;

&lt;h2 id=&quot;other-tricks&quot;&gt;Other Tricks&lt;/h2&gt;

&lt;p&gt;If you have followed the recommendations above, you should see significant improvement in your build time.&lt;/p&gt;

&lt;p&gt;If not, this &lt;a href=&quot;https://github.com/fastred/Optimizing-Swift-Build-Times#whole-module-optimization&quot;&gt;wiki on github&lt;/a&gt; provides other tricks and good settings.&lt;/p&gt;
</description>
        <pubDate>Wed, 28 Feb 2018 15:34:12 +0800</pubDate>
        <link>https://samwize.com/2018/02/28/how-to-make-xcode-run-faster/</link>
        <guid isPermaLink="true">https://samwize.com/2018/02/28/how-to-make-xcode-run-faster/</guid>
        
        
        <category>Xcode</category>
        
      </item>
    
      <item>
        <title>Setting Up Travis CI With Fastlane for iOS Project</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://travis-ci.com&quot;&gt;Travis CI&lt;/a&gt; is a service, providing machines, to help build your app, test, deploy, and more.&lt;/p&gt;

&lt;p&gt;Note: It integrates very easily with github, but does NOT support bitbucket etc.&lt;/p&gt;

&lt;p&gt;It is FREE for open source projects eg. public Github project.&lt;/p&gt;

&lt;p&gt;First 100 builds are free too, as a trial. Afterwhich, it starts from &lt;a href=&quot;https://travis-ci.com/plans&quot;&gt;$69/mth&lt;/a&gt; for 1 concurrent job. Read about alternatives in last section of this post.&lt;/p&gt;

&lt;h2 id=&quot;setting-up&quot;&gt;&lt;a href=&quot;https://docs.travis-ci.com/user/languages/objective-c/&quot;&gt;Setting Up&lt;/a&gt;&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Create &lt;code class=&quot;highlighter-rouge&quot;&gt;.travis.yml&lt;/code&gt; in project root and configure (see below)&lt;/li&gt;
  &lt;li&gt;Push to repository&lt;/li&gt;
  &lt;li&gt;Sign in your Github account on &lt;a href=&quot;https://travis-ci.com/&quot;&gt;travis-ci.com&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Configure on the dashboard&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The most important step is with &lt;code class=&quot;highlighter-rouge&quot;&gt;.travis.yml&lt;/code&gt; configuration file.&lt;/p&gt;

&lt;p&gt;You can &lt;a href=&quot;https://docs.travis-ci.com/user/customizing-the-build&quot;&gt;customize&lt;/a&gt; all you want. A bare minimum one for swift looks like this:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;osx_image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;xcode9.2&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;swift&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;fastlane run_tests&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;a href=&quot;https://docs.fastlane.tools/actions/scan/&quot;&gt;lane “run_tests”&lt;/a&gt;, builds and run unit tests. The result will then be available to travis-ci.&lt;/p&gt;

&lt;h2 id=&quot;when-to-build&quot;&gt;When to build&lt;/h2&gt;

&lt;p&gt;There are 2 options to turn on/off in the dashboard:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Build branch updates&lt;/li&gt;
  &lt;li&gt;Build pull request updates&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The default is both ON.&lt;/p&gt;

&lt;p&gt;Having (1) ON could be build crazy, because every commit and push will trigger a build. But you could do tweak more, with advanced configuration.&lt;/p&gt;

&lt;h2 id=&quot;when-to-build-advanced&quot;&gt;When to build (Advanced)&lt;/h2&gt;

&lt;p&gt;You may &lt;a href=&quot;https://docs.travis-ci.com/user/customizing-the-build/#Building-Specific-Branches&quot;&gt;further restrict when to build&lt;/a&gt;. You can safelist branches and tags, with regex.&lt;/p&gt;

&lt;p&gt;So let’s say you want only build with tag such as “build-123”, you can use regex in the yaml file:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# safelist&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;branches&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;only&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;master&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/^build-\d+$/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Another way is to write bash commands in the &lt;code class=&quot;highlighter-rouge&quot;&gt;script&lt;/code&gt; phrase.&lt;/p&gt;

&lt;p&gt;For example, if you want to run a lane named “beta” when the commit message has “[beta]” in it:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; 
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;if [[ &quot;$TRAVIS_COMMIT_MESSAGE&quot; = *&quot;[beta]&quot;* ]]; then bundle exec fastlane beta; else bundle exec fastlane some_other_lane; fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;TRAVIS_COMMIT_MESSAGE&lt;/code&gt; is &lt;a href=&quot;https://docs.travis-ci.com/user/environment-variables/#Default-Environment-Variables&quot;&gt;one of many environment variables&lt;/a&gt; provided in travis.&lt;/p&gt;

&lt;h2 id=&quot;after-build-comes-deploy&quot;&gt;After build comes deploy&lt;/h2&gt;

&lt;p&gt;Deploy is an optional phase, the CD in &lt;code class=&quot;highlighter-rouge&quot;&gt;CI/CD&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If build is successful, then the deploy phase will start.&lt;/p&gt;

&lt;p&gt;For iOS, the deploy phase could be pushing the build to Testflight.&lt;/p&gt;

&lt;h2 id=&quot;encrypting-secure-env-var&quot;&gt;Encrypting secure env var&lt;/h2&gt;

&lt;p&gt;In &lt;code class=&quot;highlighter-rouge&quot;&gt;.travis.yml&lt;/code&gt;, you will frequently see &lt;code class=&quot;highlighter-rouge&quot;&gt;secure&lt;/code&gt; key.&lt;/p&gt;

&lt;p&gt;These are &lt;a href=&quot;https://docs.travis-ci.com/user/environment-variables/&quot;&gt;environment variables&lt;/a&gt; that you can use everywhere - travis.yml, Fastfile or any script.&lt;/p&gt;

&lt;p&gt;As they are sensitive values, you have to encrypt them in &lt;code class=&quot;highlighter-rouge&quot;&gt;.travis.yml&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Run this in terminal:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Install the tool&lt;/span&gt;
gem install travis

&lt;span class=&quot;c&quot;&gt;# Login&lt;/span&gt;
travis login &lt;span class=&quot;nt&quot;&gt;--pro&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Encrypt the env var and add to travis.yml&lt;/span&gt;
travis encrypt &lt;span class=&quot;nv&quot;&gt;SOMEVAR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;secretvalue&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--add&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For every key-value, it will add a “secure” to the env.global list.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;secure&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;some-encrypted-value&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;secure&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;another-encrypted-value&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can then &lt;a href=&quot;https://docs.travis-ci.com/user/encryption-keys/&quot;&gt;use the key&lt;/a&gt; eg. &lt;code class=&quot;highlighter-rouge&quot;&gt;SOMEVAR&lt;/code&gt; as an environment variable.&lt;/p&gt;

&lt;h2 id=&quot;bonus-dependencies-in-multiple-repository&quot;&gt;Bonus: Dependencies in multiple repository&lt;/h2&gt;

&lt;p&gt;If your project has &lt;a href=&quot;https://docs.travis-ci.com/user/private-dependencies/&quot;&gt;dependencies to multiple repositories&lt;/a&gt;, there are 2 approach:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Deploy key&lt;/li&gt;
  &lt;li&gt;User key&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;User key is the best practice, with a dedicated &lt;a href=&quot;https://docs.travis-ci.com/user/private-dependencies/#Dedicated-User-Account&quot;&gt;CI user account&lt;/a&gt;. This means creating an independent Github account, with access to those repositories, then generate the user’s SSH key for use in travis.&lt;/p&gt;

&lt;p&gt;User key is preferred over Deploy key because Deploy key is per repo, hence it gets hard to maintain many keys (1 key per repo).&lt;/p&gt;

&lt;h2 id=&quot;alternatives&quot;&gt;Alternatives&lt;/h2&gt;

&lt;p&gt;The thing with Travis CI is that it is expensive, starting from $69/mth.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.atlassian.com/software/bamboo&quot;&gt;Bamboo&lt;/a&gt; is part of Atlassian, so it integrates well with Bitbucket, Jira, etc, and starts from $10/mth. &lt;a href=&quot;https://confluence.atlassian.com/bamboo/xcode-354353193.html&quot;&gt;Setup for Xcode&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.shippable.com/pricing.html&quot;&gt;Shippable&lt;/a&gt; has a generous free hosted service providing 150 builds/mth for private project.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://honzadvorsky.com/articles/2015-08-04-xcs_tutorials_1_getting_started/&quot;&gt;Xcode Server&lt;/a&gt; aka XCS have bots (like jobs). It integrates to Xcode nicely.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://medium.com/@cherrmann.com/continuous-integration-and-delivery-for-ios-with-jenkins-and-fastlane-part-1-3b17f1901a73&quot;&gt;Jenkins&lt;/a&gt; is free and you can self host it, on a macOS machine, that also means maintaining it.&lt;/p&gt;

&lt;p&gt;Also, sample &lt;a href=&quot;https://github.com/spotify/ios-ci&quot;&gt;Spotify CI scripts&lt;/a&gt; for their open source projects. They use Travis CI and others.&lt;/p&gt;
</description>
        <pubDate>Thu, 22 Feb 2018 16:02:51 +0800</pubDate>
        <link>https://samwize.com/2018/02/22/setting-up-travis-ci-with-fastlane-for-ios-project/</link>
        <guid isPermaLink="true">https://samwize.com/2018/02/22/setting-up-travis-ci-with-fastlane-for-ios-project/</guid>
        
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>Guide to Creating UIViewController Without Storyboard</title>
        <description>&lt;p&gt;This is a guide on creating your custom &lt;code class=&quot;highlighter-rouge&quot;&gt;UIViewController&lt;/code&gt; with code, without any storyboard/nibs/xibs. You may also be interested in reading &lt;a href=&quot;/2017/11/01/guide-to-creating-custom-uiview/&quot;&gt;guide to creating custom &lt;code class=&quot;highlighter-rouge&quot;&gt;UIView&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;initializer&quot;&gt;Initializer&lt;/h2&gt;

&lt;p&gt;The view controller’s initializer can be bare minimal, but it must use the &lt;a href=&quot;https://developer.apple.com/documentation/uikit/uiviewcontroller/1621359-init&quot;&gt;designated initializer &lt;code class=&quot;highlighter-rouge&quot;&gt;init(nibName:bundle:)&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;nibName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As silly as it sound, you will find the documentation stating:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you subclass UIViewController, you must call the super implementation of this method, even if you aren’t using a NIB… and specify nil for both …&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Yup, that’s proof that Apple prefers storyboard, but we know what’s good for ourselves.&lt;/p&gt;

&lt;p&gt;If you use MVVM, or you require any dependency injection to the view controller, then it will look like this:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;viewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyViewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;someDependency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SomeDependency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;nibName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;viewModel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;viewModel&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;someDependency&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;someDependency&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You may setup lightweight initialization in &lt;code class=&quot;highlighter-rouge&quot;&gt;init&lt;/code&gt;, but you should never setup your views (read on where to do that later).&lt;/p&gt;

&lt;h2 id=&quot;no-need-for-initcoder&quot;&gt;No Need for &lt;code class=&quot;highlighter-rouge&quot;&gt;init(coder:)&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;init(coder:)&lt;/code&gt; is called only when you create your views from storyboard. It will never be invoked since we are going with no-storyboard so we can safely fatal out.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;required&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;coder&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;aDecoder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSCoder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;fatalError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Never will happen&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;create-your-view-in-viewdidload&quot;&gt;Create your view in &lt;code class=&quot;highlighter-rouge&quot;&gt;viewDidLoad&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Take a look at the &lt;a href=&quot;https://rdkw.wordpress.com/2013/02/24/ios-uiviewcontroller-lifecycle/&quot;&gt;life cycle diagram&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Importantly, the diagram is saying that &lt;em&gt;view will be unloaded/deallocated when memory is low&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;If your view is then asked to appear again, it needs to re-loaded.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;viewDidLoad&lt;/code&gt; is where you should create your view, or more specifically, create all your subviews in &lt;code class=&quot;highlighter-rouge&quot;&gt;self.view&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I break the creation of views into 2 stages, in 2 &lt;code class=&quot;highlighter-rouge&quot;&gt;private func&lt;/code&gt;s.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;setupViews&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;bindViews&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;1-setupviews&quot;&gt;1. &lt;code class=&quot;highlighter-rouge&quot;&gt;setupViews()&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Add each subview with &lt;code class=&quot;highlighter-rouge&quot;&gt;view.addSubview(someSubview)&lt;/code&gt;, then setup the layout constraints (we use &lt;a href=&quot;https://github.com/robb/Cartography&quot;&gt;Cartography&lt;/a&gt;, a autolayout helper).&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setupViews&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addSubview&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subview1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;constrain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subview1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subview1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;subview1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;edges&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;edges&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;// Similarly for subview2, subview3, ...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;subview1&lt;/code&gt; is being initialized via lazy loading.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;lazy&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;subview1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;backgroundColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;red&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is equivalent to how you configure a view in Storyboard, but in code, and within the lazy load code block. It is the initial configuration. Afterwhich, you may of course programmatically change any of the properties.&lt;/p&gt;

&lt;h3 id=&quot;2-bindviews&quot;&gt;2. &lt;code class=&quot;highlighter-rouge&quot;&gt;bindViews()&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;This 2nd stage is to bind the views with the model. It sets the actual content of the views.&lt;/p&gt;

&lt;p&gt;In a very simple example, we set the transparency level &lt;code class=&quot;highlighter-rouge&quot;&gt;subview1.alpha&lt;/code&gt; with a view model.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bindViews&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;subview1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;viewModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note that we are “binding” without using any frameworks (such as RxSwift), so this binding is one-time only. If subsequently &lt;code class=&quot;highlighter-rouge&quot;&gt;viewModel.alpha&lt;/code&gt; is changed, the function &lt;code class=&quot;highlighter-rouge&quot;&gt;bindViews()&lt;/code&gt; must be called again to update the view.&lt;/p&gt;

&lt;h2 id=&quot;the-reactive-way&quot;&gt;The Reactive Way&lt;/h2&gt;

&lt;p&gt;Contrast this with using &lt;a href=&quot;https://github.com/ReactiveX/RxSwift&quot;&gt;RxSwift&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bindViews&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;viewModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subview1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;disposed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;disposeBag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Using RxSwift, &lt;code class=&quot;highlighter-rouge&quot;&gt;viewModel.alpha&lt;/code&gt; is an observable, and whenever it observes a new value of alpha, the binding &lt;code class=&quot;highlighter-rouge&quot;&gt;subview1&lt;/code&gt; will be updated automatically.&lt;/p&gt;
</description>
        <pubDate>Wed, 31 Jan 2018 16:43:53 +0800</pubDate>
        <link>https://samwize.com/2018/01/31/guide-to-creating-uiviewcontroller-without-storyboard/</link>
        <guid isPermaLink="true">https://samwize.com/2018/01/31/guide-to-creating-uiviewcontroller-without-storyboard/</guid>
        
        
      </item>
    
      <item>
        <title>Localization - Fallback to Base Language</title>
        <description>&lt;p&gt;This post explains how iOS determines the language to use in an app, and how Apple fallback to the next-best default language when necessary.&lt;/p&gt;

&lt;p&gt;Throughout this post, we use the example where &lt;code class=&quot;highlighter-rouge&quot;&gt;en&lt;/code&gt; (English) is the developmen and base language, while &lt;code class=&quot;highlighter-rouge&quot;&gt;zh-Hans&lt;/code&gt; (Chinese) is an additional supported language.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# en Localizable.strings
&quot;awesome-title&quot; = &quot;Hello World&quot;;
&quot;another-title&quot; = &quot;Localization Rocks&quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# zh-Hans Localizable.strings
&quot;awesome-title&quot; = &quot;你好&quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Deliberately, the &lt;code class=&quot;highlighter-rouge&quot;&gt;zh-Hans&lt;/code&gt; strings file is 50% localized (&lt;code class=&quot;highlighter-rouge&quot;&gt;another-title&lt;/code&gt; is not translated).&lt;/p&gt;

&lt;h2 id=&quot;how-apple-determines-the-langauge&quot;&gt;How Apple determines the langauge&lt;/h2&gt;

&lt;p&gt;Apple &lt;a href=&quot;https://developer.apple.com/library/content/qa/qa1828/_index.html&quot;&gt;explains the process&lt;/a&gt;. Here is the “alogrithm” in pseudocode:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func determineTheLanguageToUse():
  for each user's preferredLanguages
    if app supports the language
      return the language
    if app supports a more generic dialect
      return the generic language

  # Exhausted preferredLanguages and still cannot determine..
  return CFBundleDevelopmentRegion
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;User’s &lt;code class=&quot;highlighter-rouge&quot;&gt;preferredLanguages&lt;/code&gt; is those listed in &lt;strong&gt;Settings App &amp;gt; General &amp;gt; Language &amp;amp; Region&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The algo starts with the most preferred language, checks if the app supports it (or a more generic dialect), before finally using &lt;code class=&quot;highlighter-rouge&quot;&gt;CFBundleDevelopmentRegion&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;There are different cases of fallback. Let’s look at them in detail.&lt;/p&gt;

&lt;h2 id=&quot;fallback-1-generic-dialect&quot;&gt;Fallback 1: Generic Dialect&lt;/h2&gt;

&lt;p&gt;In the algo, iOS will check if there is a more generic dialect for the preferred language, and if so return that.&lt;/p&gt;

&lt;p&gt;What is a &lt;strong&gt;more generic dialect&lt;/strong&gt;? &lt;code class=&quot;highlighter-rouge&quot;&gt;en&lt;/code&gt; is more generic than &lt;code class=&quot;highlighter-rouge&quot;&gt;en-GB&lt;/code&gt; (British English). In our example, if user prefers &lt;code class=&quot;highlighter-rouge&quot;&gt;en-GB&lt;/code&gt;, then &lt;code class=&quot;highlighter-rouge&quot;&gt;en&lt;/code&gt; will be used.&lt;/p&gt;

&lt;p&gt;This is because the app does NOT have &lt;code class=&quot;highlighter-rouge&quot;&gt;en-GB&lt;/code&gt;, but &lt;code class=&quot;highlighter-rouge&quot;&gt;en&lt;/code&gt; is good enough.&lt;/p&gt;

&lt;p&gt;The other way round is not true. If the app supports &lt;code class=&quot;highlighter-rouge&quot;&gt;en-GB&lt;/code&gt; (and not &lt;code class=&quot;highlighter-rouge&quot;&gt;en&lt;/code&gt;), then if user prefers &lt;code class=&quot;highlighter-rouge&quot;&gt;en&lt;/code&gt;, then &lt;code class=&quot;highlighter-rouge&quot;&gt;en-GB&lt;/code&gt; will not be the fallback – because &lt;code class=&quot;highlighter-rouge&quot;&gt;en-GB&lt;/code&gt; is &lt;em&gt;not&lt;/em&gt; more generic.&lt;/p&gt;

&lt;h2 id=&quot;fallback-2-unsupported-language&quot;&gt;Fallback 2: Unsupported Language&lt;/h2&gt;

&lt;p&gt;An unsupported language is when all &lt;code class=&quot;highlighter-rouge&quot;&gt;preferredLanguages&lt;/code&gt; is exhausted, and the app does not have a suitable language to use.&lt;/p&gt;

&lt;p&gt;For example if a user prefers &lt;code class=&quot;highlighter-rouge&quot;&gt;ms&lt;/code&gt; (Malay), but which the app does not support at all, then the language specified in &lt;code class=&quot;highlighter-rouge&quot;&gt;CFBundleDevelopmentRegion&lt;/code&gt; of the Info.plist will be used. This is aka the &lt;strong&gt;localization native development region&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This is a very common case. When we lanuch an app, we probably support only a few languages, or just one!&lt;/p&gt;

&lt;h2 id=&quot;fallback-3-unsupported-phrase&quot;&gt;Fallback 3: Unsupported Phrase&lt;/h2&gt;

&lt;p&gt;This is an obscure case, and is not mention in Apple’s documentation, nor in the alogrithm.&lt;/p&gt;

&lt;p&gt;Let’s take the example where a user prefers &lt;code class=&quot;highlighter-rouge&quot;&gt;zh-Hans&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;What happens when iOS try to get the &lt;code class=&quot;highlighter-rouge&quot;&gt;NSLocalizedString&lt;/code&gt; of “another-title”?&lt;/p&gt;

&lt;p&gt;Remember, &lt;code class=&quot;highlighter-rouge&quot;&gt;zh-Hans&lt;/code&gt; is not fully translated. It does not have “another-title”. What do you think will happen?&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Fallback to development language &lt;code class=&quot;highlighter-rouge&quot;&gt;en&lt;/code&gt; or&lt;/li&gt;
  &lt;li&gt;Return “another-title”&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Many developers think it is (1). Unfortunately, it is (2), with that ugly key name!&lt;/p&gt;

&lt;p&gt;If you refer to the &lt;code class=&quot;highlighter-rouge&quot;&gt;determineTheLanguageToUse&lt;/code&gt; algo, the language to use is still &lt;code class=&quot;highlighter-rouge&quot;&gt;zh-Hans&lt;/code&gt;, regardless that it is incomplete. It can’t find “another-title”, so it just return the key as value..&lt;/p&gt;

&lt;p&gt;iOS should really improve on this fallback behaviour.. for now, we need some custom code.&lt;/p&gt;

&lt;h2 id=&quot;the-fallback-code&quot;&gt;The Fallback Code&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;LS&lt;/code&gt; is a global function to replace &lt;code class=&quot;highlighter-rouge&quot;&gt;NSLocalizedString&lt;/code&gt;. It is a shorthand, with added fallback capability:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;LS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSLocalizedString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;comment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSLocale&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;preferredLanguages&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;en&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Fall back to en&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bundle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;forResource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ofType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;lproj&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bundle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSLocalizedString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;comment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When a phrase is not yet translated, it will be &lt;code class=&quot;highlighter-rouge&quot;&gt;value == key&lt;/code&gt;, which is dumb, so we fall back to using &lt;code class=&quot;highlighter-rouge&quot;&gt;en&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The rest of the code is simply geting &lt;code class=&quot;highlighter-rouge&quot;&gt;NSLocalizedString&lt;/code&gt; from the en bundle.&lt;/p&gt;

&lt;h2 id=&quot;more-resourses&quot;&gt;More Resourses&lt;/h2&gt;

&lt;p&gt;Apple’s &lt;a href=&quot;https://developer.apple.com/library/content/technotes/tn2418/_index.html&quot;&gt;Technical Note on language identifiers&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 23 Jan 2018 15:49:41 +0800</pubDate>
        <link>https://samwize.com/2018/01/23/localization-fall-back-to-base-language/</link>
        <guid isPermaLink="true">https://samwize.com/2018/01/23/localization-fall-back-to-base-language/</guid>
        
        
        <category>Localization</category>
        
        <category>iOS</category>
        
      </item>
    
  </channel>
</rss>
