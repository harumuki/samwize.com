<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>@samwize</title>
    <description>¯\_(ツ)_/¯
</description>
    <link>http://samwize.com/</link>
    <atom:link href="http://samwize.com/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Fri, 24 Feb 2017 00:00:09 +0800</pubDate>
    <lastBuildDate>Fri, 24 Feb 2017 00:00:09 +0800</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>Why I Avoid Developing App/Idea for Friends</title>
        <description>&lt;p&gt;In the last 10 years, I have more than a handful of friends, classmates, and acquaintances telling me:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“I have a great idea for an app. How about we work together?”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I am genuinely happy they are thinking about creating something – be it creating something they want, or making a business out of it.&lt;/p&gt;

&lt;p&gt;But often, all I can do for them is:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“As a friend, I love to hear about your idea, and give advice on mobile app development. But most likely I wouldn’t be able to develop for you.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Why?&lt;/p&gt;

&lt;h2 id=&quot;ideas-are-not-enough&quot;&gt;1. Ideas Are Not Enough&lt;/h2&gt;

&lt;p&gt;Often, the main motivation for creating their app is because they have an idea.&lt;/p&gt;

&lt;p&gt;They think the idea is cool.&lt;/p&gt;

&lt;p&gt;My positive reply often is:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Yes, this is a good idea. There will be people who would need/like to use the app.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Then my less positive reply goes:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Who is the closest competitor to your idea? Why do you think they didn’t succeed?”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;These are very important questions in grinding the idea.&lt;/p&gt;

&lt;p&gt;It is also my polite way of saying: &lt;strong&gt;Ideas Are Cheap&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Ideas are nothing. Someone in this world must had the same idea, of some variation to yours. &lt;a href=&quot;http://just2me.com/2014/03/13/steal-like-artist/&quot;&gt;Nothing is original&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You should not start a company just because of an idea.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;startup-is-hard&quot;&gt;2. Startup Is Hard&lt;/h2&gt;

&lt;p&gt;To &lt;strong&gt;succeed&lt;/strong&gt; with one, is &lt;strong&gt;hard&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;And even if you did, it will &lt;strong&gt;take many years&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;I know because I have 10 years of experience with 2 startups.&lt;/p&gt;

&lt;p&gt;The first startup: I spent 7 years, as a founding member. The company is now 9 year old, yet it is still trying to become profitable. It didn’t die only because the investor is also the co-founder, so think how much he has to lose first.&lt;/p&gt;

&lt;p&gt;The second startup: I joined after their Series A funding. It is now 3 year old, and recently had Series B, thus providing a 1+ year runway. Maintaining a hockey stick growth is not easy, and the end of a runway is always in sight.&lt;/p&gt;

&lt;p&gt;I don’t know about you. But I don’t have that many 10 years ahead.&lt;/p&gt;

&lt;p&gt;So I have to choose wisely for the path to take.&lt;/p&gt;

&lt;h2 id=&quot;risking-friendship&quot;&gt;3. Risking Friendship&lt;/h2&gt;

&lt;p&gt;It is more hairy when you are friends before you become co-workers.&lt;/p&gt;

&lt;p&gt;Mobile app development cost is &lt;a href=&quot;http://www.formotus.com/14018/blog-mobility/figuring-the-costs-of-custom-mobile-business-app-development&quot;&gt;much higher than you think&lt;/a&gt;. I cannot charge lower (or free!), because you are friend.&lt;/p&gt;

&lt;p&gt;And if the business fail (&lt;a href=&quot;http://www.forbes.com/sites/neilpatel/2015/01/16/90-of-startups-will-fail-heres-what-you-need-to-know-about-the-10/&quot;&gt;90% will&lt;/a&gt;), then the friendship will be awkward, because my friend would have lost, and transferred, a sum of money to me..&lt;/p&gt;

&lt;p&gt;When things fail, we will find reasons. And many times, the “blame” will include: &lt;strong&gt;product is not good enough&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;All eyes will be on the developer, but I am certain that is not fair.&lt;/p&gt;

&lt;p&gt;I value friendship, and with all risks considered, I will rather not sacrifice it.&lt;/p&gt;

&lt;h2 id=&quot;experience&quot;&gt;4. Experience&lt;/h2&gt;

&lt;p&gt;In a tech startup, you need the tech guy – the CTO/programmer.&lt;/p&gt;

&lt;p&gt;The “idea guy” often is the “CEO”, promissing to cover the marketing, sales, and fund raising.&lt;/p&gt;

&lt;p&gt;It is fair to split such responsibilities between 2 co-founders.&lt;/p&gt;

&lt;p&gt;Yet, very often, my “idea guy” friend is one with no experience in the area he is responsible for. Neither had he work in a startup before. If he tries to be the CPO (&lt;strong&gt;P&lt;/strong&gt;roduct), it could get even uglier.&lt;/p&gt;

&lt;p&gt;Having 2 co-founders with &lt;strong&gt;unequal experience and skill&lt;/strong&gt; is a mismatch.&lt;/p&gt;

&lt;h2 id=&quot;yet-i-still-want-to-work-in-startup&quot;&gt;Yet, I still want to work in startup&lt;/h2&gt;

&lt;p&gt;I still enjoy working in a small team, contributing significantly and creatively.&lt;/p&gt;

&lt;p&gt;But after spending so much time with startup, I now have a better understanding of what kind of culture, environment and co-workers I want.&lt;/p&gt;

&lt;p&gt;I may even create that “startup”.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This is the first post in samwize.com where I share a non-technical article. Hope you like it (:&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 23 Feb 2017 22:21:09 +0800</pubDate>
        <link>http://samwize.com/2017/02/23/why-i-avoid-developing-app-idea-for-friends/</link>
        <guid isPermaLink="true">http://samwize.com/2017/02/23/why-i-avoid-developing-app-idea-for-friends/</guid>
        
        
        <category>startup</category>
        
      </item>
    
      <item>
        <title>Migrating an iOS Project From Objective-C to Swift</title>
        <description>&lt;h1 id=&quot;uiapplicationdelegate&quot;&gt;UIApplicationDelegate&lt;/h1&gt;

&lt;p&gt;Start with the app delegate.&lt;/p&gt;

&lt;p&gt;Add a &lt;code class=&quot;highlighter-rouge&quot;&gt;AppDelegate.swift&lt;/code&gt;, and mark the class with &lt;code class=&quot;highlighter-rouge&quot;&gt;@UIApplicationMain&lt;/code&gt; attribute.&lt;/p&gt;

&lt;p&gt;Remove &lt;code class=&quot;highlighter-rouge&quot;&gt;main.m&lt;/code&gt;, because it is now unnecessary. With the use of &lt;code class=&quot;highlighter-rouge&quot;&gt;@UIApplicationMain&lt;/code&gt;, the target now knows the entry point.&lt;/p&gt;

&lt;h1 id=&quot;adding-your-first-swift&quot;&gt;Adding your first Swift&lt;/h1&gt;

&lt;p&gt;When you add your first Swift file (like &lt;code class=&quot;highlighter-rouge&quot;&gt;AppDelegate.swift&lt;/code&gt; above), Xcode will prompt to add a bridging header.&lt;/p&gt;

&lt;p&gt;Add the bridging header.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;AwesomeApp-Bridging-Header.h&lt;/code&gt; is the place where you add your existing .h files, exposing them to Swift (as and when needed).&lt;/p&gt;

&lt;h2 id=&quot;using-objective-c-in-swift&quot;&gt;1. Using Objective-C in Swift&lt;/h2&gt;

&lt;p&gt;We come to the first of the 2 important parts in &lt;a href=&quot;https://developer.apple.com/library/content/documentation/Swift/Conceptual/BuildingCocoaApps/InteractingWithObjective-CAPIs.html&quot;&gt;interoperability&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To use your existing Objective-C, there are a few things to do:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Bridging header to expose the Objective-C classes&lt;/li&gt;
  &lt;li&gt;Declare nullability in the Objective-C files&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We have mentioned (1) in the section above.&lt;/p&gt;

&lt;p&gt;For (2), the reason is because Swift is strict on &lt;a href=&quot;https://developer.apple.com/library/content/documentation/Swift/Conceptual/BuildingCocoaApps/InteractingWithObjective-CAPIs.html#//apple_ref/doc/uid/TP40014216-CH4-ID45&quot;&gt;nullability&lt;/a&gt;. Can an object be optional, or never?&lt;/p&gt;

&lt;p&gt;In Objective-C days, way before Swfit was born, nullability was never explicit. You would have seen &lt;code class=&quot;highlighter-rouge&quot;&gt;EXEC_BAD_ACCESS&lt;/code&gt;, and many times the reason is because the object is nil, when is should not be.&lt;/p&gt;

&lt;p&gt;Swift make our code safer with explicit nullability.&lt;/p&gt;

&lt;p&gt;Hence, you need to make Objective-C code be explicit, so that Swift can use safely:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;nullable&lt;/code&gt; - An optional&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;nonnull&lt;/code&gt; - Never an optional&lt;/li&gt;
  &lt;li&gt;Otherwise, they are implicitly unwrapped optional (crash if nil!)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are also 2 convenient macros to help you: &lt;code class=&quot;highlighter-rouge&quot;&gt;NS_ASSUME_NONNULL_BEGIN&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;NS_ASSUME_NONNULL_END&lt;/code&gt;. Any properties between the macros are considered &lt;code class=&quot;highlighter-rouge&quot;&gt;nonnull&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;using-swift-in-objective-c&quot;&gt;2. Using Swift in Objective-C&lt;/h2&gt;

&lt;p&gt;This is the second part, if you still need to write &lt;em&gt;more&lt;/em&gt; Objective-C.&lt;/p&gt;

&lt;p&gt;To use the new Swift code in existing Objective-C, you have to&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#import &quot;AwesomeApp-Swift.h&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This will expose all Swift code.&lt;/p&gt;

&lt;p&gt;Don’t be alarm that you cannot find the aforementioned .h file in your project. It is a auto generated header from your Swift code.&lt;/p&gt;
</description>
        <pubDate>Fri, 10 Feb 2017 19:09:55 +0800</pubDate>
        <link>http://samwize.com/2017/02/10/migrating-an-ios-project-from-objective-c-to-swift/</link>
        <guid isPermaLink="true">http://samwize.com/2017/02/10/migrating-an-ios-project-from-objective-c-to-swift/</guid>
        
        
        <category>Swift</category>
        
      </item>
    
      <item>
        <title>Calling a View Controller Function From React Native</title>
        <description>&lt;p&gt;When you mix React Native with existing Swift/Objective-C code base, it gets complex for even the simplest of tasks.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://engineering.instagram.com/react-native-at-instagram-dd828a9a90c7&quot;&gt;Instagram admits the challenge of a hybrid app&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;the-set-up&quot;&gt;The Set Up&lt;/h2&gt;

&lt;p&gt;My view controller is written in &lt;strong&gt;Swift&lt;/strong&gt;, and creates the &lt;code class=&quot;highlighter-rouge&quot;&gt;RCTRootView&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;viewDidLoad&lt;/code&gt;. It managers the react native view.&lt;/p&gt;

&lt;p&gt;I was trying to call a function I have in my view controller, from my JavaScript code.&lt;/p&gt;

&lt;h2 id=&quot;the-long-documentation-again&quot;&gt;The Long Documentation, Again&lt;/h2&gt;

&lt;p&gt;React Native provided a long documentation separated across three pages:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://facebook.github.io/react-native/docs/communication-ios.html&quot;&gt;Inter Communication&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://facebook.github.io/react-native/docs/native-modules-ios.html&quot;&gt;Native Modules&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://facebook.github.io/react-native/docs/native-components-ios.html&quot;&gt;Native UI Components&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It wasn’t clear nor simple.&lt;/p&gt;

&lt;p&gt;Hope I can clear it up here (:&lt;/p&gt;

&lt;h2 id=&quot;the-thing-about-swift&quot;&gt;The Thing about Swift&lt;/h2&gt;

&lt;p&gt;In the &lt;a href=&quot;http://facebook.github.io/react-native/docs/native-modules-ios.html#exporting-swift&quot;&gt;very last section&lt;/a&gt;, the documentation says this about using Swift:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Swift doesn’t have support for macros (which React Native requires for exposing native modules and methods)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It is necessary that you have some Objective-C code because the macros provided only works with Objective-C.&lt;/p&gt;

&lt;p&gt;Example: &lt;code class=&quot;highlighter-rouge&quot;&gt;RCT_EXTERN_MODULE&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;RCT_EXTERN_METHOD&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If you use Swfit, then you need to deal with using &lt;a href=&quot;https://developer.apple.com/library/content/documentation/Swift/Conceptual/BuildingCocoaApps/MixandMatch.html&quot;&gt;bridging headers and stuff&lt;/a&gt;. Do not confuse this &lt;strong&gt;Swift and Objective-C bridging&lt;/strong&gt; with &lt;strong&gt;React Native and Objective-C bridging&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;There are just many bridges to cross.&lt;/p&gt;

&lt;h2 id=&quot;how-bridging-works&quot;&gt;How Bridging Works&lt;/h2&gt;

&lt;p&gt;In the &lt;a href=&quot;http://facebook.github.io/react-native/docs/native-modules-ios.html#ios-calendar-module-example&quot;&gt;very beginning section&lt;/a&gt;, it gives a hint about how the bridge (to React native) happens:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The CalendarManager module is instantiated on the Objective-C side using a [CalendarManager new] call.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;See how the JavaScript calls the method.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;NativeModules&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;react-native&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CalendarManager&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;NativeModules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CalendarManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;CalendarManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;Birthday Party&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;4 Privet Drive, Surrey&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;It &lt;em&gt;looks like&lt;/em&gt; the module is using a &lt;strong&gt;singleton&lt;/strong&gt; pattern. It is NOT!&lt;/p&gt;

&lt;p&gt;It is calling with a newly created object.&lt;/p&gt;

&lt;p&gt;It is confirmed in the &lt;a href=&quot;http://facebook.github.io/react-native/docs/native-components-ios.html#properties&quot;&gt;section on Native UI Components&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Native views are created and manipulated by subclasses of RCTViewManager. These subclasses are similar in function to view controllers, but are essentially singletons - only one instance of each is created by the bridge.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And finally, in a &lt;a href=&quot;http://facebook.github.io/react-native/docs/communication-ios.html#calling-native-functions-from-react-native-native-modules&quot;&gt;separate place&lt;/a&gt;, it warns the limitation when calling native functions from React Native (native modules):&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The fact that native modules are singletons limits the mechanism in context of embedding.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you still not clear what the problem entails.. let me explain with our view controller example.&lt;/p&gt;

&lt;p&gt;We have an instance of our view controller. When JavaScript invokes a method (see &lt;code class=&quot;highlighter-rouge&quot;&gt;CalendarManager&lt;/code&gt; example), it will use the singleton instance, not the actual instance! This is limiting because you need an identifier to the actual instance, using perhaps a number or string, then pass it to the singleton instance, for it to identiy the actual instance.&lt;/p&gt;

&lt;p&gt;Still confused? Look at how it is implemented in code in my weak attempt #1.&lt;/p&gt;

&lt;h2 id=&quot;attempt-1&quot;&gt;Attempt #1&lt;/h2&gt;

&lt;p&gt;Let’s start with our view controller:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AwesomeViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIViewController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;AwesomeManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;viewController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;
        
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;rootView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;RCTRootView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;bridge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bridge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;moduleName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;AwesomeScreen&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;initialProperties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rootView&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;// The fun&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We are using the view controller &lt;code class=&quot;highlighter-rouge&quot;&gt;viewDidLoad&lt;/code&gt; to create the &lt;code class=&quot;highlighter-rouge&quot;&gt;RCTRootView&lt;/code&gt; (init your bridge accordingly).&lt;/p&gt;

&lt;p&gt;The trick here is the part on &lt;code class=&quot;highlighter-rouge&quot;&gt;AwesomeManager.viewController = self&lt;/code&gt;. This is where the view controller tell the “manager” that &lt;em&gt;you may control me&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Let’s look at the “manager” code, in Swift:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;@objc(AwesomeManager)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AwesomeManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSObject&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;viewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AwesomeViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;@objc&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;viewController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AwesomeManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;viewController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;dispatch_async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dispatch_get_main_queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;viewController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;bar&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;attempt-2-&quot;&gt;Attempt #2 ?&lt;/h2&gt;

&lt;p&gt;Ah, I’m exhausted. Gonna leave this till next time (:&lt;/p&gt;

&lt;p&gt;You may attempt and comment below?&lt;/p&gt;
</description>
        <pubDate>Thu, 09 Feb 2017 14:02:35 +0800</pubDate>
        <link>http://samwize.com/2017/02/09/calling-a-view-controller-function-from-react-native/</link>
        <guid isPermaLink="true">http://samwize.com/2017/02/09/calling-a-view-controller-function-from-react-native/</guid>
        
        
        <category>React Native</category>
        
      </item>
    
      <item>
        <title>Why I Hate React Native</title>
        <description>&lt;p&gt;I have spent 2 weeks using React Native for an &lt;strong&gt;existing iOS app&lt;/strong&gt;, building a new feature that could be summed up as - providing a list of images which can be tapped on.&lt;/p&gt;

&lt;p&gt;It is an easy task that I could do in a day with the beautiful Swift and familiar &lt;code class=&quot;highlighter-rouge&quot;&gt;UIKit&lt;/code&gt; framework. But things gets hairy with React Native..&lt;/p&gt;

&lt;p&gt;React Native is changing rapidly, so what I mention here could only be relevant as of Jan 2017.&lt;/p&gt;

&lt;h2 id=&quot;what-i-like&quot;&gt;What I Like&lt;/h2&gt;

&lt;p&gt;Let’s start with what I like because that will be short.&lt;/p&gt;

&lt;p&gt;My first impression with it is awesome. It is refreshing. Going through the Hello World example and more is enlightening.&lt;/p&gt;

&lt;p&gt;Then there is code push. No more waiting for app review.&lt;/p&gt;

&lt;p&gt;So I went on to write a &lt;a href=&quot;http://samwize.com/2017/01/09/react-native-for-ios-swift-developer/&quot;&gt;basic guide&lt;/a&gt; and about &lt;a href=&quot;http://samwize.com/2017/01/19/guide-to-integrating-codepush-for-ios-react-native-project/&quot;&gt;CodePush&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;mixing-react-native-with-true-native&quot;&gt;Mixing React Native with True Native&lt;/h2&gt;

&lt;p&gt;By True Native, I am referring to all the frameworks provided by iOS: &lt;code class=&quot;highlighter-rouge&quot;&gt;UIKit&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Foundation&lt;/code&gt;, etc&lt;/p&gt;

&lt;p&gt;It could be just me, because I have an existing code base that uses True Native. If you start a project from scratch using pure React Native, most likely you will not have the problem.&lt;/p&gt;

&lt;p&gt;But if you are like me, you have to deal with extra problems.&lt;/p&gt;

&lt;p&gt;The first is communication between the 2 platforms. &lt;a href=&quot;http://facebook.github.io/react-native/docs/communication-ios.html&quot;&gt;Quoted&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;But, when we mix React Native and native components, we need some special, cross-language mechanisms that would allow us to pass information between them.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And this cross-language (or cross-platform) mechanism is very messy.&lt;/p&gt;

&lt;p&gt;They provided a few ways, but none is beautiful.&lt;/p&gt;

&lt;p&gt;You will get your hands dirty with &lt;strong&gt;Objective-C&lt;/strong&gt; because React Native require macro to expose a module or function.&lt;/p&gt;

&lt;h2 id=&quot;poor-documentation&quot;&gt;Poor Documentation&lt;/h2&gt;

&lt;p&gt;It is written poorly, and lacking for some classes such as emitters.&lt;/p&gt;

&lt;h2 id=&quot;deprecated-really&quot;&gt;Deprecated, really?&lt;/h2&gt;

&lt;p&gt;I encountered this &lt;a href=&quot;https://github.com/facebook/react-native/issues/8714&quot;&gt;issue&lt;/a&gt; where they deprecate a method &lt;code class=&quot;highlighter-rouge&quot;&gt;sendAppEventWithName&lt;/code&gt;, and recommended to use a subclass of &lt;code class=&quot;highlighter-rouge&quot;&gt;RCTEventEmitter&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Yet, their &lt;a href=&quot;http://facebook.github.io/react-native/docs/native-modules-ios.html#sending-events-to-javascript&quot;&gt;documentation&lt;/a&gt; is still using the deprecated method.&lt;/p&gt;

&lt;p&gt;Being a good developer, I use the new way. But alas! The new way didn’t work. It could be either one the reason: I do not know how to use because there is no documentation, or it has a bug.&lt;/p&gt;

&lt;p&gt;I believe there is a bug.&lt;/p&gt;

&lt;h2 id=&quot;buggy&quot;&gt;Buggy&lt;/h2&gt;

&lt;p&gt;There are lots of bugs.&lt;/p&gt;

&lt;p&gt;I filed an &lt;a href=&quot;https://github.com/facebook/react-native/issues/12049&quot;&gt;issue&lt;/a&gt; that is to do with a &lt;code class=&quot;highlighter-rouge&quot;&gt;Touchable&lt;/code&gt; being fired when it’s parent (a &lt;code class=&quot;highlighter-rouge&quot;&gt;UIScrollView&lt;/code&gt;) is being scrolled.&lt;/p&gt;

&lt;p&gt;Somehow I believe my issue will be of a lesser priority because I am mixing a true native &lt;code class=&quot;highlighter-rouge&quot;&gt;UIScrollView&lt;/code&gt; with react native component.&lt;/p&gt;

&lt;h2 id=&quot;time-wasted&quot;&gt;Time Wasted&lt;/h2&gt;

&lt;p&gt;As an early-user of a piece of programming platform, you will use much of your time to help the community. Good if you have the time.&lt;/p&gt;

&lt;p&gt;Otherwise, you will be wasting precious time.&lt;/p&gt;
</description>
        <pubDate>Tue, 24 Jan 2017 17:27:17 +0800</pubDate>
        <link>http://samwize.com/2017/01/24/why-i-hate-react-native/</link>
        <guid isPermaLink="true">http://samwize.com/2017/01/24/why-i-hate-react-native/</guid>
        
        
        <category>React Native</category>
        
      </item>
    
      <item>
        <title>Guide to Integrating CodePush for iOS React Native Project</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://microsoft.github.io/code-push/&quot;&gt;CodePush&lt;/a&gt; is a wonderful technology to make INSTANT changes to your app.&lt;/p&gt;

&lt;p&gt;The problem with CodePush documentation is that it is toooo long, because it has to cover for multiple platforms. I ran into a few pitfalls, and missed some steps, because of that.&lt;/p&gt;

&lt;p&gt;So this post will only cover for an iOS, React native app.&lt;/p&gt;

&lt;h2 id=&quot;install-and-setup-the-cli&quot;&gt;Install and Setup the CLI&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Install the CLI
npm install -g code-push-cli

# Register for an account via github oauth
code-push register

# Register your app. We call it AwesomeApp.
code-push app add AwesomeApp
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;setup-react-native-project&quot;&gt;Setup React Native Project&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cd&lt;/code&gt; to your React Native project and install the “plugin”.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install --save react-native-code-push@latest
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Next, setup the &lt;code class=&quot;highlighter-rouge&quot;&gt;sync&lt;/code&gt; for your component. There are more &lt;a href=&quot;https://github.com/Microsoft/react-native-code-push#codepush&quot;&gt;options&lt;/a&gt; on the syncing of the code eg. frequency, install etc&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AwesomeApp&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;codePushOptions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
  &lt;span class=&quot;na&quot;&gt;checkFrequency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;codePush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CheckFrequency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ON_APP_RESUME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
  &lt;span class=&quot;na&quot;&gt;installMode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;codePush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;InstallMode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ON_NEXT_RESUME&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;AwesomeApp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;codePush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;codePushOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AwesomeApp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AwesomeApp&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;My configuration for above is to check for updates when app goes into foreground, and then install when it goes into foreground &lt;strong&gt;again&lt;/strong&gt;. I belive that’s good enough.&lt;/p&gt;

&lt;p&gt;Pitfall: I made the mistake of writing &lt;code class=&quot;highlighter-rouge&quot;&gt;export default class AwesomeApp&lt;/code&gt; at first. Because &lt;code class=&quot;highlighter-rouge&quot;&gt;codePush&lt;/code&gt; wraps the component, you have to export it after that.&lt;/p&gt;

&lt;h2 id=&quot;setup-ios-in-xcode&quot;&gt;Setup iOS in Xcode&lt;/h2&gt;

&lt;p&gt;Next, you need to setup the project in Xcode.&lt;/p&gt;

&lt;p&gt;Add the pod to &lt;code class=&quot;highlighter-rouge&quot;&gt;Podfile&lt;/code&gt;, and then &lt;code class=&quot;highlighter-rouge&quot;&gt;pod install&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Change your path accordingly. My React Native source is in ./react
pod &#39;CodePush&#39;, :path =&amp;gt; &#39;./react/node_modules/react-native-code-push&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then in the code where you use the &lt;code class=&quot;highlighter-rouge&quot;&gt;NSURL&lt;/code&gt;, change it like this:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CodePush&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sourceURLForBridge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;bridge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;RCTBridge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSURL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cp&quot;&gt;#if DEBUG&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;http://localhost:8081/index.ios.bundle?platform=ios&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;cp&quot;&gt;#else&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CodePush&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;bundleURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;cp&quot;&gt;#endif&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I have a &lt;code class=&quot;highlighter-rouge&quot;&gt;sourceURLForBridge&lt;/code&gt; function, which will return the appropriate &lt;code class=&quot;highlighter-rouge&quot;&gt;NSURL&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;RCTRootView&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Using preprocessor/macros, the code will use the packager running on &lt;code class=&quot;highlighter-rouge&quot;&gt;localhost:8081&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;DEBUG&lt;/code&gt; build configuration, and using CodePush URL for &lt;code class=&quot;highlighter-rouge&quot;&gt;RELEASE&lt;/code&gt; (or otherwise).&lt;/p&gt;

&lt;h2 id=&quot;setup-codepush-keys-in-xcode&quot;&gt;Setup CodePush Keys in Xcode&lt;/h2&gt;

&lt;p&gt;When you setup code-push CLI, in &lt;code class=&quot;highlighter-rouge&quot;&gt;code-push app add AwesomeApp&lt;/code&gt;, you were given 2 keys - Staging and Production.&lt;/p&gt;

&lt;p&gt;You have to add these keys to your iOS project.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Add to &lt;code class=&quot;highlighter-rouge&quot;&gt;Info.plist&lt;/code&gt; with the key &lt;code class=&quot;highlighter-rouge&quot;&gt;CodePushDeploymentKey&lt;/code&gt;, and the value &lt;code class=&quot;highlighter-rouge&quot;&gt;$(CODEPUSH_KEY)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;In project Build Settings, “Add User-Defined Settings” with the key &lt;code class=&quot;highlighter-rouge&quot;&gt;CODEPUSH_KEY&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Expand &lt;code class=&quot;highlighter-rouge&quot;&gt;CODEPUSH_KEY&lt;/code&gt;, and under &lt;strong&gt;Release&lt;/strong&gt;, set to the CodePush &lt;strong&gt;Production&lt;/strong&gt; key&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The above is setup to only use CodePush production deployment.&lt;/p&gt;

&lt;p&gt;If you want to use a Staging deployment, you will have to add another build configuration. Go to Project &amp;gt; Info &amp;gt; Configurations and duplicate Release, and rename it to &lt;strong&gt;Staging&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Then similarly like you did for Production key in Build Settings, set &lt;code class=&quot;highlighter-rouge&quot;&gt;CODEPUSH_KEY&lt;/code&gt; for &lt;strong&gt;Staging&lt;/strong&gt; to CodePush staging key.&lt;/p&gt;

&lt;p&gt;To recap, you have now 3 build configurations:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Debug - Use packager localhost:8081&lt;/li&gt;
  &lt;li&gt;Release - Use CodePush Production&lt;/li&gt;
  &lt;li&gt;Staging - Use COdePush Staging&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;push-live-code&quot;&gt;Push Live Code&lt;/h2&gt;

&lt;p&gt;At last, we are ready to push live code! Let’s demo how you do for production.&lt;/p&gt;

&lt;p&gt;Build the iOS app with Release build configuration (check your scheme), and run in Simulator or device.&lt;/p&gt;

&lt;p&gt;While you have not yet push any code to Production, the app still runs fine, because for the first run, it will use the local main.jsbundle.&lt;/p&gt;

&lt;p&gt;Make some changes to &lt;code class=&quot;highlighter-rouge&quot;&gt;AwesomeApp&lt;/code&gt; now. Perhaps change a &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;Text&amp;gt;&lt;/code&gt;? Or a color?&lt;/p&gt;

&lt;p&gt;Then push it:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;code-push release-react AwesomeApp ios -d Production --plistFile &quot;../AwesomeApp/Info.plist&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;By default, -d is Staging, and plist is in ./ios. You may change as necessary.&lt;/p&gt;

&lt;p&gt;Bring the app to foreground, and it should still be the same (though it has now fetched the update).&lt;/p&gt;

&lt;p&gt;Bring the app to background, then foreground again, and viola! It will install the new code and reflect the changes!&lt;/p&gt;

&lt;h2 id=&quot;pitfall-not-getting-updates&quot;&gt;Pitfall: Not Getting Updates&lt;/h2&gt;

&lt;p&gt;There are quite some &lt;a href=&quot;https://microsoft.github.io/code-push/docs/react-native.html#link-13&quot;&gt;pitfalls&lt;/a&gt;, and the long documentation doesn’t help.&lt;/p&gt;

&lt;p&gt;I hope this guide has been more concise (:&lt;/p&gt;

&lt;p&gt;If you are not getting the update,&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;make sure the version of the iOS app (in &lt;code class=&quot;highlighter-rouge&quot;&gt;Info.plist&lt;/code&gt;), matches that when you &lt;a href=&quot;https://github.com/Microsoft/code-push/blob/master/cli/README.md#releasing-updates-general&quot;&gt;code push with targetBinaryVersion&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;make sure the app is using &lt;code class=&quot;highlighter-rouge&quot;&gt;CodePush.bundleURL()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;make sure the keys are correct, and you deploy production/staging correctly&lt;/li&gt;
  &lt;li&gt;debug with &lt;code class=&quot;highlighter-rouge&quot;&gt;code-push debug ios&lt;/code&gt; and run the simulator&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 19 Jan 2017 16:55:28 +0800</pubDate>
        <link>http://samwize.com/2017/01/19/guide-to-integrating-codepush-for-ios-react-native-project/</link>
        <guid isPermaLink="true">http://samwize.com/2017/01/19/guide-to-integrating-codepush-for-ios-react-native-project/</guid>
        
        
        <category>React Native</category>
        
      </item>
    
      <item>
        <title>React Native for iOS Swift Developer</title>
        <description>&lt;p&gt;React Native is the biggest technology available for iOS developer, since 2015.&lt;/p&gt;

&lt;p&gt;It provides a new platform for iOS development, in the very popular (and familar language for web developers) - &lt;strong&gt;JavaScript&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This post is about learning/considering React Native for an iOS/Swift developer.&lt;/p&gt;

&lt;p&gt;This post is not a development guide, because the official &lt;a href=&quot;https://facebook.github.io/react-native/releases/next/docs/getting-started.html&quot;&gt;Getting started&lt;/a&gt; is good, and &lt;a href=&quot;https://www.raywenderlich.com/136047/react-native-existing-app&quot;&gt;Ray Wenderlich&lt;/a&gt; provided a great guide for Swift iOS developers.&lt;/p&gt;

&lt;p&gt;Instead, I will highlight important considerations for Swift iOS developers.&lt;/p&gt;

&lt;h2 id=&quot;why-use-react-native&quot;&gt;Why use React Native?&lt;/h2&gt;

&lt;p&gt;Instead of pure iOS/Android native development, React Native has the following benefits:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Render native UI (NOT web view), thus good user experience&lt;/li&gt;
  &lt;li&gt;Learn once, write anywhere (on both iOS &amp;amp; Android)&lt;/li&gt;
  &lt;li&gt;Similar set of technology stack (JavaScript + React + millions of JS libs) with web developers&lt;/li&gt;
  &lt;li&gt;JavaScript developers readily available, as compared to Swift/Android/Java&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I usually do not advocate non-native technology, because there are limitations and extra bugs because of the intermediary platform.&lt;/p&gt;

&lt;p&gt;But React Native is created by Facebook, and they use it in Facebook app too, so there is lesser risk.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Not zero risk, because you should know Facebook &lt;a href=&quot;http://blog.parse.com/announcements/moving-on/&quot;&gt;kills Parse&lt;/a&gt; etc too..&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;warning-javascript-world&quot;&gt;Warning: JavaScript World&lt;/h2&gt;

&lt;p&gt;Before we dived into React Native, let me warn you if you are a JavaScript newbie like me.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JavaScript world is very messy.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;How messy? See this &lt;a href=&quot;https://hackernoon.com/how-it-feels-to-learn-javascript-in-2016-d3a717dd577f&quot;&gt;conversation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The ecosystem is &lt;em&gt;too healthy&lt;/em&gt;, with lots of JS frameworks popping up and taking over the world, quickly. Check out the &lt;a href=&quot;http://stateofjs.com/&quot;&gt;state of JS in 2016&lt;/a&gt;. There will be many frameworks that you need to learn, from everyone.&lt;/p&gt;

&lt;h2 id=&quot;how-react-native-works&quot;&gt;How React Native Works?&lt;/h2&gt;

&lt;p&gt;In Facebook’s &lt;a href=&quot;https://code.facebook.com/posts/1014532261909640/react-native-bringing-modern-web-techniques-to-mobile/&quot;&gt;March 2015&lt;/a&gt; release post:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The only difference in the mobile environment is that instead of running React in the browser and rendering to divs and spans, we run it in an embedded instance of JavaScriptCore inside our apps and render to higher-level platform-specific components.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;http://nshipster.com/javascriptcore/&quot;&gt;JavaScriptCore&lt;/a&gt; is a framework provided on iOS/Android to run JavaScript.&lt;/p&gt;

&lt;p&gt;React Native runs the JavaScript in JavaScriptCore, and then render the native UI views on the platform.&lt;/p&gt;

&lt;h2 id=&quot;the-trigger-point&quot;&gt;The Trigger Point&lt;/h2&gt;

&lt;p&gt;In AppDelegate, there is boilerplate code that specify where to load the JavaScripts.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;NSURL&lt;/code&gt; either points to:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;http://localhost:8081 or&lt;/li&gt;
  &lt;li&gt;NSBundle&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Loading JavaScript remotely from a URL is interesting, because then, it is possible to &lt;a href=&quot;https://microsoft.github.io/code-push/&quot;&gt;code push&lt;/a&gt; to live apps!&lt;/p&gt;

&lt;h2 id=&quot;flexbox-for-ui-layout&quot;&gt;Flexbox for UI layout&lt;/h2&gt;

&lt;p&gt;No more messing around with autolayout.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://facebook.github.io/react-native/docs/flexbox.html&quot;&gt;Flexbox&lt;/a&gt; is a simple way, specifying a weight value for the components, the flow direction, and the alignment.&lt;/p&gt;

&lt;p&gt;You will be glad that Boostrap 4 will use flexbox way, instead of the regular grid system they started with.&lt;/p&gt;

&lt;h2 id=&quot;persistant-storage&quot;&gt;Persistant Storage&lt;/h2&gt;

&lt;p&gt;You can use &lt;a href=&quot;https://facebook.github.io/react-native/docs/asyncstorage.html&quot;&gt;AsyncStorage&lt;/a&gt; for simple key-value data, just like &lt;code class=&quot;highlighter-rouge&quot;&gt;NSUserDefault&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For database, you could use &lt;a href=&quot;https://realm.io/news/introducing-realm-react-native/&quot;&gt;Realm&lt;/a&gt;! No more Core Data!&lt;/p&gt;

&lt;h2 id=&quot;migrating-an-existing-swfit-project&quot;&gt;Migrating an existing Swfit project&lt;/h2&gt;

&lt;p&gt;You can have a hybrid of native and react native.&lt;/p&gt;

&lt;p&gt;To integrate react native into an existing project, follow &lt;a href=&quot;https://www.raywenderlich.com/136047/react-native-existing-app&quot;&gt;raywenderlich’s guide&lt;/a&gt;. Facebook’s &lt;a href=&quot;https://facebook.github.io/react-native/docs/integration-with-existing-apps.html&quot;&gt;official guide&lt;/a&gt; is lacking, and outdated for the dependencies version. As of Dec 2016, I updated the version to:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;dependencies&quot;: {
  &quot;react&quot;: &quot;15.3.1&quot;,
  &quot;react-native&quot;: &quot;0.34.0&quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You can update accordingly, but things move fast so if your project doesn’t compile, then it could be the versions (and Xcode/iOS) incompatibility.&lt;/p&gt;

&lt;p&gt;One particular point missing in Facebook’s guide is how to run without depending on the packager running on eg. http://localhost:8081. Read on.&lt;/p&gt;

&lt;h2 id=&quot;bundling-js-in-app&quot;&gt;Bundling JS in App&lt;/h2&gt;

&lt;p&gt;React Native provided a script - &lt;code class=&quot;highlighter-rouge&quot;&gt;react-native-xcode.sh&lt;/code&gt; - to build and bundle the JS and all resources you need into your app.&lt;/p&gt;

&lt;p&gt;When integrating into an existing app, you have to add a &lt;strong&gt;New Run Script Phase&lt;/strong&gt; with the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export NODE_BINARY=node
./path/to/node_modules/react-native/packager/react-native-xcode.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Edit the path to &lt;code class=&quot;highlighter-rouge&quot;&gt;react-native-xcode.sh&lt;/code&gt; as necessary.&lt;/p&gt;

&lt;p&gt;You will also need to edit/add your scheme’s &lt;strong&gt;Build Configuration&lt;/strong&gt; to &lt;strong&gt;Release&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Tip: If you are using fastlane, need not worry because the default of gym is to use Release configuration, even if the scheme is set to Debug.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;navigation&quot;&gt;Navigation&lt;/h2&gt;

&lt;p&gt;Let’s take a look on a very basic UI subject. In iOS, we have &lt;code class=&quot;highlighter-rouge&quot;&gt;UINavigationController&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In React Native, it gets complicated and there are more choices:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Facebook’s out of the box &lt;a href=&quot;https://facebook.github.io/react-native/docs/navigator.html&quot;&gt;Navigator&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Facebook’s abandoned &lt;a href=&quot;https://facebook.github.io/react-native/docs/navigatorios.html&quot;&gt;NavigatorIOS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;WIX’s &lt;a href=&quot;https://github.com/wix/react-native-navigation&quot;&gt;react-native-navigation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are lots of community contributions, and once you found the library that is suitable for your requirement, you could use it easily.&lt;/p&gt;

&lt;h2 id=&quot;macos-too&quot;&gt;macOS too&lt;/h2&gt;

&lt;p&gt;Not only for mobile, but you could learn once, and write for &lt;a href=&quot;https://github.com/ptmt/react-native-macos&quot;&gt;desktop app&lt;/a&gt; too.&lt;/p&gt;

&lt;h2 id=&quot;ide&quot;&gt;IDE&lt;/h2&gt;

&lt;p&gt;Facebook has their own “IDE” - &lt;a href=&quot;https://nuclide.io&quot;&gt;nuclide&lt;/a&gt; - which is &lt;a href=&quot;https://atom.io/packages/nuclide&quot;&gt;plugin for Atom&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;what-about-type&quot;&gt;What about type?&lt;/h2&gt;

&lt;p&gt;One of the cons of JavaScript (compared to Swift) is that there is no type safety built into the language.&lt;/p&gt;

&lt;p&gt;If you prefer to deal with types (which you should, trust me), then you should use &lt;a href=&quot;https://flowtype.org&quot;&gt;Flow&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Install flow globally so that it is added to PATH
npm install -g flow-bin
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I would recommend to setup Flow when you begin a project, because it gets harder to migrate &lt;em&gt;non-flow app&lt;/em&gt; later on.&lt;/p&gt;

&lt;h2 id=&quot;what-about-typescript&quot;&gt;What about TypeScript?&lt;/h2&gt;

&lt;p&gt;TypeScript provides typing and optionals, in a new language of it’s own.&lt;/p&gt;

&lt;p&gt;I would choose to use TypeScript, if I had more experience with JavaScript (especially with the new ES2015). But being a newbie to JavaScript, it is better to learn the intricates of the language.&lt;/p&gt;

&lt;p&gt;What’s more, most examples and libraries will be in pure JavaScript.&lt;/p&gt;

&lt;p&gt;And compared to Flow, Facebook has &lt;a href=&quot;https://github.com/facebook/react-native/issues/2502&quot;&gt;preference&lt;/a&gt; for Flow. The react library has Flow annotations.&lt;/p&gt;

&lt;p&gt;So my advise is to avoid TypeScript. But it is &lt;a href=&quot;https://raygun.com/blog/2016/07/react-native-typescript/&quot;&gt;possible&lt;/a&gt; &lt;a href=&quot;https://medium.com/react-weekly/react-native-and-typescript-ad57b7413ead&quot;&gt;to use&lt;/a&gt;, just saying.&lt;/p&gt;

&lt;h2 id=&quot;project-generator&quot;&gt;Project Generator&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/infinitered/ignite&quot;&gt;ignite&lt;/a&gt; is extension of &lt;a href=&quot;http://yeoman.io&quot;&gt;yeoman&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Generate a best-practised project structure with state of the art setup.&lt;/p&gt;

&lt;h2 id=&quot;what-is-not-so-great&quot;&gt;What is not so great?&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Dependency on another technology stack&lt;/li&gt;
  &lt;li&gt;You will not be able to use the latest iOS technology&lt;/li&gt;
  &lt;li&gt;Swift is nicer than JavaScript&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;more-resources&quot;&gt;More Resources&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/jondot/awesome-react-native&quot;&gt;awesome-react-native&lt;/a&gt; - List of great libraries&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/fbsamples/f8app&quot;&gt;F8 - Facebook conference app&lt;/a&gt; - written in react native, fully open sourced&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://js.coach/react-native&quot;&gt;js.coach&lt;/a&gt; - Discover more JS&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/stefalda/ReactNativeLocalization&quot;&gt;Localization&lt;/a&gt; library&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/react-native-community/react-native-elements&quot;&gt;Many&lt;/a&gt; &lt;a href=&quot;https://github.com/GeekyAnts/NativeBase&quot;&gt;native&lt;/a&gt; components&lt;/p&gt;
</description>
        <pubDate>Mon, 09 Jan 2017 10:20:38 +0800</pubDate>
        <link>http://samwize.com/2017/01/09/react-native-for-ios-swift-developer/</link>
        <guid isPermaLink="true">http://samwize.com/2017/01/09/react-native-for-ios-swift-developer/</guid>
        
        
        <category>React Native</category>
        
      </item>
    
      <item>
        <title>Handy Bash Commands</title>
        <description>&lt;h2 id=&quot;resize-image&quot;&gt;Resize Image&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Resize to max width/height 640
sips -Z 640 *.jpg
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;convert-image-format&quot;&gt;Convert Image Format&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Convert png to jpg
sips -s format jpeg *.png --out mydirectory
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;list-process-running-on-a-port&quot;&gt;List Process Running on a Port&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# eg. Port 8080
lsof -i :8080
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;kill-process-running-on-a-port&quot;&gt;Kill Process running on a Port&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;lsof -P | grep &#39;:8080&#39; | awk &#39;{print $2}&#39; | xargs kill -9
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;creating-markdown-journal&quot;&gt;Creating Markdown Journal&lt;/h2&gt;

&lt;p&gt;Uses &lt;a href=&quot;https://github.com/samwize/journal/&quot;&gt;journal&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;journal new -d /path/to/journal &quot;My entry for today&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;extract-mp3-from-youtube&quot;&gt;Extract MP3 from Youtube&lt;/h2&gt;

&lt;p&gt;Uses &lt;a href=&quot;https://rg3.github.io/youtube-dl/&quot;&gt;youtube-dl&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;youtube-dl -x --audio-format=mp3 https://www.youtube.com/watch?v=eu-5mvCNKbQ

# Other handy youtube-dl
# Download in mp4 video format
youtube-dl -f mp4 https://www.youtube.com/watch?v=eu-5mvCNKbQ
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;download-a-file-with-curl&quot;&gt;Download a file with curl&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -o myfile.mp3 https://the.domain.com/file
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Mon, 02 Jan 2017 12:30:28 +0800</pubDate>
        <link>http://samwize.com/2017/01/02/handy-bash-commands/</link>
        <guid isPermaLink="true">http://samwize.com/2017/01/02/handy-bash-commands/</guid>
        
        
        <category>bash</category>
        
      </item>
    
      <item>
        <title>UIKit Dynamics Guide</title>
        <description>&lt;p&gt;UIKit Dynamics was unveiled in &lt;a href=&quot;https://developer.apple.com/videos/play/wwdc2013/206/&quot;&gt;WWDC 2013&lt;/a&gt;, for iOS 7.&lt;/p&gt;

&lt;p&gt;The goal was to make it easy to create animated views and transitions, based on physics.&lt;/p&gt;

&lt;h2 id=&quot;what-about-core-animation-uiview-animation-etc&quot;&gt;What about Core Animation, UIView Animation, etc&lt;/h2&gt;

&lt;p&gt;We already can animate views using various techniques, such as:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;the popular &lt;a href=&quot;https://developer.apple.com/reference/uikit/uiview/1622418-animate&quot;&gt;animate(withDuration:animations:)&lt;/a&gt;, and&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/2016/12/16/core-animation-guide/&quot;&gt;Core Animation&lt;/a&gt;, which we covered earlier.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So why need UIKit Dynamics?&lt;/p&gt;

&lt;p&gt;In short, UIKit Dynamics is a better, physics-inspired framework.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A composable, reusable, declarative, real-world inspired animation, and interaction system.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;UI Dynamics &lt;em&gt;is like&lt;/em&gt; Sprite Kit, but for non-gaming apps.&lt;/p&gt;

&lt;p&gt;(Note: Core Animation is great, but it is for pure animation. It has no “physics engine”, no collision detection and sort. So choose the framework you need.)&lt;/p&gt;

&lt;h2 id=&quot;architecture&quot;&gt;Architecture&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/images/uikit-dynamic-architecture.png&quot; alt=&quot;UIKit Dynamic Architecture Diagram&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;UIDynamicAnimator
    &lt;ul&gt;
      &lt;li&gt;Has a reference view (think of it as a canvas)&lt;/li&gt;
      &lt;li&gt;Provide overall context&lt;/li&gt;
      &lt;li&gt;Keep track of all the behavioiurs&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;UIDynamicBehavior
    &lt;ul&gt;
      &lt;li&gt;Declarative&lt;/li&gt;
      &lt;li&gt;Composable&lt;/li&gt;
      &lt;li&gt;Configure the parameters then add to animator&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;UIDynamicItem/View
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://developer.apple.com/reference/uikit/uidynamicitem&quot;&gt;UIDynamicItem&lt;/a&gt; is a protocol, providing UIKit the information it needs to animate an item&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UIView&lt;/code&gt; implements it, but you can implement it too&lt;/li&gt;
      &lt;li&gt;Behaviour-View is n-n&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;primitive-behaviours&quot;&gt;Primitive Behaviours&lt;/h2&gt;

&lt;p&gt;You can create/compose your own &lt;code class=&quot;highlighter-rouge&quot;&gt;UIDynamicBehavior&lt;/code&gt;, but these common ones are provided out of the box:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Gravity
    &lt;ul&gt;
      &lt;li&gt;&lt;del&gt;Earth Gravity&lt;/del&gt; UI Kit Gravity = 1000 point/sec^2&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Collision
    &lt;ul&gt;
      &lt;li&gt;Between items or boundary&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Attachment
    &lt;ul&gt;
      &lt;li&gt;Spring&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Snap
    &lt;ul&gt;
      &lt;li&gt;Snap in place&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Push
    &lt;ul&gt;
      &lt;li&gt;&lt;del&gt;Newton Force&lt;/del&gt; UIKit Newton = Accelerate (100,100) to 100 point/sec^2&lt;/li&gt;
      &lt;li&gt;Continuous or instantenous&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;UIDynamicItemBehavior
    &lt;ul&gt;
      &lt;li&gt;Item-level properties: friction, elasticiy, density, etc&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;the-swift-code&quot;&gt;The Swift Code&lt;/h2&gt;

&lt;p&gt;This is how you create a simple physics behaviour (actually made up of 3 &lt;code class=&quot;highlighter-rouge&quot;&gt;UIDynamicBehavior&lt;/code&gt;) of an image view falling through gravity and bouncing off the container view:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// The view controller must hold on to the animator object&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;animator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIDynamicAnimator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Create the animator&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;animator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIDynamicAnimator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;referenceView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Create behaviour #1 - Gravity&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;gravity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIGravityBehavior&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;imageView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;animator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addBehavior&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gravity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Create behaviour #2 - Collision&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;collision&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UICollisionBehavior&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;imageView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;collision&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;translatesReferenceBoundsIntoBoundary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;animator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addBehavior&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collision&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Create behaviour #3 - Elasticity etc&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;behaviour&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIDynamicItemBehavior&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;imageView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;behaviour&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;allowsRotation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;behaviour&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elasticity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;animator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addBehavior&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;behaviour&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;with-autolayout&quot;&gt;With Autolayout&lt;/h2&gt;

&lt;p&gt;Autolayout is &lt;em&gt;incompatitble&lt;/em&gt; with animation - using UIKit Dynamics or Core Animation.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&quot;/2016/12/16/core-animation-guide/&quot;&gt;Core Animation&lt;/a&gt;, the framework works on the &lt;strong&gt;presentation&lt;/strong&gt; layer, while the actual &lt;strong&gt;model&lt;/strong&gt; has to be explicitly updated when the animation is completed.&lt;/p&gt;

&lt;p&gt;This is the same for UIKit Dynamics.&lt;/p&gt;

&lt;p&gt;Use the animator’s &lt;a href=&quot;https://developer.apple.com/reference/uikit/uidynamicanimatordelegate#//apple_ref/occ/intfm/UIDynamicAnimatorDelegate/dynamicAnimatorDidPause&quot;&gt;delegate&lt;/a&gt; to know when the animation is completed, and update your autolayout constraints to the final state..&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// In `viewDidLoad`, set the delegate&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;animator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delegate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;
  
&lt;span class=&quot;c1&quot;&gt;// UIDynamicAnimatorDelegate&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dynamicAnimatorDidPause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;animator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIDynamicAnimator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Update the constraint to the final state&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;uicollectionview&quot;&gt;UICollectionView&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UICollectionViewLayoutAttributes&lt;/code&gt; also implements &lt;code class=&quot;highlighter-rouge&quot;&gt;UIDynamicItem&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This provides some cool animation to all the items in a collection view.&lt;/p&gt;

&lt;p&gt;objc.io has a good tutorial on &lt;a href=&quot;https://www.objc.io/issues/5-ios7/collection-views-and-uidynamics/&quot;&gt;UICollectionView with dynamic animator&lt;/a&gt;, with the &lt;a href=&quot;https://github.com/ashfurrow/ASHSpringyCollectionView/blob/master/ASHSpringyCollectionView/ASHSpringyCollectionViewFlowLayout.m&quot;&gt;source&lt;/a&gt; in github.&lt;/p&gt;
</description>
        <pubDate>Mon, 19 Dec 2016 16:49:03 +0800</pubDate>
        <link>http://samwize.com/2016/12/19/uikit-dynamics-guide/</link>
        <guid isPermaLink="true">http://samwize.com/2016/12/19/uikit-dynamics-guide/</guid>
        
        
        <category>iOS</category>
        
        <category>UIKit</category>
        
      </item>
    
      <item>
        <title>Core Animation Guide</title>
        <description>&lt;p&gt;There are many ways to perform animation, and using &lt;a href=&quot;https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/CoreAnimation_guide/CreatingBasicAnimations/CreatingBasicAnimations.html&quot;&gt;Core Animation&lt;/a&gt; is one great framework provided by Apple.&lt;/p&gt;

&lt;p&gt;Core Animation operates on &lt;code class=&quot;highlighter-rouge&quot;&gt;CALayer&lt;/code&gt;, which is the &lt;code class=&quot;highlighter-rouge&quot;&gt;layer&lt;/code&gt; property that each &lt;code class=&quot;highlighter-rouge&quot;&gt;UIView&lt;/code&gt; has. It is a presentation layer.&lt;/p&gt;

&lt;h2 id=&quot;basic-animation&quot;&gt;Basic animation&lt;/h2&gt;

&lt;p&gt;Let’s jump right into the code to “tell” a view to move right by 50 pt:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;move&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CABasicAnimation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keyPath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;position.x&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;byValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// Move right by 50 pt&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;duration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// 1 second&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timingFunction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CAMediaTimingFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kCAMediaTimingFunctionEaseInEaseOut&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fillMode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kCAFillModeForwards&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;removedOnCompletion&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addAnimation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;forKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;move&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Most of the code is self explanatory. We set the properties of &lt;code class=&quot;highlighter-rouge&quot;&gt;CABasicAnimation&lt;/code&gt; – the duration of the animation, with a ease-in-ease-out effect, moving it to the right by 50pt.&lt;/p&gt;

&lt;p&gt;In the example, we change the &lt;code class=&quot;highlighter-rouge&quot;&gt;keyPath&lt;/code&gt; of “position.x”. We could change any of the &lt;a href=&quot;https://developer.apple.com/reference/quartzcore/cabasicanimation&quot;&gt;properties&lt;/a&gt;, such as “opacity”, “backgroundColor”, “transform.scale.x”, etc.&lt;/p&gt;

&lt;h2 id=&quot;make-the-layer-remains-in-final-state&quot;&gt;Make the Layer Remains in Final State&lt;/h2&gt;

&lt;p&gt;A &lt;a href=&quot;https://gist.github.com/d-ronnqvist/11266321&quot;&gt;controversial&lt;/a&gt;, but simple, way to make the view remain in the final state is:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fillMode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kCAFillModeForwards&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;removedOnCompletion&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This merely make the &lt;strong&gt;presentation&lt;/strong&gt; remains in the final state. The actual &lt;strong&gt;model&lt;/strong&gt; is not changed. This will affects hit-testing etc.&lt;/p&gt;

&lt;p&gt;If the view does not require user interaction, then you could use this &lt;em&gt;easy&lt;/em&gt; way.&lt;/p&gt;

&lt;p&gt;Otherwise, you have to update the model after the animation eg.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addAnimation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;forKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;move&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Set the final state&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;multiple-animations&quot;&gt;Multiple Animations&lt;/h2&gt;

&lt;p&gt;You can combine multiple animations into an animation group.&lt;/p&gt;

&lt;p&gt;We extend our example with a fade out effect.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;move&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CABasicAnimation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keyPath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;position.x&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;byValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;fade&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CABasicAnimation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fade&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keyPath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;opacity&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fade&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;byValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CAAnimationGroup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;animations&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fade&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;duration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timingFunction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CAMediaTimingFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kCAMediaTimingFunctionEaseIn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fillMode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kCAFillModeForwards&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;removedOnCompletion&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addAnimation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;forKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;move-fadeout&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We use the &lt;code class=&quot;highlighter-rouge&quot;&gt;CAAnimationGroup&lt;/code&gt; and set the common properties to the group instead.&lt;/p&gt;

&lt;h2 id=&quot;animate-key-frames&quot;&gt;Animate key frames&lt;/h2&gt;

&lt;p&gt;We can also animate key frames using &lt;code class=&quot;highlighter-rouge&quot;&gt;CAKeyframeAnimation&lt;/code&gt;, by changing the values with precise timing:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;move&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CAKeyframeAnimation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keyPath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;position.x&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;values&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keyTimes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;on-animation-completion&quot;&gt;On Animation Completion&lt;/h2&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;CATransaction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        
&lt;span class=&quot;kt&quot;&gt;CATransaction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setCompletionBlock&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Perform this when animation has completed&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;animation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addAnimation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;animation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;forKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;animation&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;CATransaction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;        
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;pitfall-with-opacity-and-interaction&quot;&gt;Pitfall with Opacity and Interaction&lt;/h2&gt;

&lt;p&gt;There is a pitfall when you animate a view’s opacity, yet wants to enable interaction.&lt;/p&gt;

&lt;p&gt;When you set a view &lt;code class=&quot;highlighter-rouge&quot;&gt;opacity&lt;/code&gt; to 0 (hide it), iOS will actually implicity disable touches/interaction (though &lt;code class=&quot;highlighter-rouge&quot;&gt;userInteractionEnabled&lt;/code&gt; will still be true).&lt;/p&gt;

&lt;p&gt;Then in a fade in animation, you increase the opacity back to 1, and expect the view to respond to touch.&lt;/p&gt;

&lt;p&gt;BUT, remember: the animation code only affects the presentation, not the actual model. Read the section above on “Make View Remains in Final State”.&lt;/p&gt;

&lt;p&gt;The solution is to explicitly set opacity back to 1 after the animation ended.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;CATransaction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setCompletionBlock&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;opacity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;new-uiviewpropertyanimator-for-ios-10&quot;&gt;New: UIViewPropertyAnimator for iOS 10&lt;/h2&gt;

&lt;p&gt;A new feature for &lt;strong&gt;iOS 10&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;An add-on to Core Animation, providing the power to move through the animation’s progress however we ant to. Well explained by &lt;a href=&quot;http://holko.pl/2016/07/07/popping-into-uiviewpropertyanimator/&quot;&gt;Arek Holko&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So if you want to controll the animation progress (reverse on cancel?), then &lt;a href=&quot;https://www.shinobicontrols.com/blog/ios-10-day-by-day-day-4-uiviewpropertyanimator&quot;&gt;learn the ropes&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Fri, 16 Dec 2016 16:30:39 +0800</pubDate>
        <link>http://samwize.com/2016/12/16/core-animation-guide/</link>
        <guid isPermaLink="true">http://samwize.com/2016/12/16/core-animation-guide/</guid>
        
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>Pitfall: Using WKWebView for Facebook Login</title>
        <description>&lt;p&gt;When using &lt;code class=&quot;highlighter-rouge&quot;&gt;WKWebView&lt;/code&gt; (or &lt;code class=&quot;highlighter-rouge&quot;&gt;UIWebView&lt;/code&gt;), we are actually using only 1 window.&lt;/p&gt;

&lt;p&gt;For website that has Facebook login, it &lt;em&gt;might&lt;/em&gt; open a new window (a popup) for the user to login. Once login is completed, this popup window will close, and it will use an obscure method to pass a message to the original window.&lt;/p&gt;

&lt;p&gt;The message has a URL like the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://m.facebook.com/v2.7/dialog/oauth?access_token=...&amp;amp;redirect_uri=...
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;pitfall-of-1-window&quot;&gt;Pitfall of 1 Window&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&quot;http://stackoverflow.com/q/8025082/242682&quot;&gt;pitfall&lt;/a&gt; is that when we use &lt;code class=&quot;highlighter-rouge&quot;&gt;WKWebView&lt;/code&gt;, by default, we have only 1 window.&lt;/p&gt;

&lt;p&gt;A naive implementation to &lt;code class=&quot;highlighter-rouge&quot;&gt;WKUIDelegate&lt;/code&gt; is usually to load a request in that same web view:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;WebViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;WKUIDelegate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Handles when a new frame/window is to be opened&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;webView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;webView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;WKWebView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createWebViewWithConfiguration&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;configuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;WKWebViewConfiguration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;forNavigationAction&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;navigationAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;WKNavigationAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;windowFeatures&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;WKWindowFeatures&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;WKWebView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;webView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;loadRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;navigationAction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;When Facebook login wants to pass that message to the original window, it could NOT find that window, and so therefore it get stuck in the page (usually a white screen of nothing).&lt;/p&gt;

&lt;h2 id=&quot;handling-multiple-windows&quot;&gt;Handling Multiple Windows&lt;/h2&gt;

&lt;p&gt;The solution is to support multiple windows.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;webView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;webView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;WKWebView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createWebViewWithConfiguration&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;configuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;WKWebViewConfiguration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;forNavigationAction&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;navigationAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;WKNavigationAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;windowFeatures&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;WKWindowFeatures&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;WKWebView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// nil means new window&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;navigationAction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;targetFrame&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// A omit `createWebView`. It creates a new web view and add to your view.&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;newWebView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createWebView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;withConfiguration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;configuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newWebView&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;webView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;loadRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;navigationAction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I did not include what happens after this new web view is shown. For Facebook login case, you will probably want to remove the new web view in &lt;code class=&quot;highlighter-rouge&quot;&gt;webView:didFinishNavigation:&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;edge-case-error-999&quot;&gt;Edge Case: Error 999&lt;/h2&gt;

&lt;p&gt;In the code above, there is a weird scenario where some website will load  &lt;code class=&quot;highlighter-rouge&quot;&gt;https://m.facebook.com/v2.7/dialog/oauth?access_token=...&amp;amp;redirect_uri=...&lt;/code&gt; and result in &lt;code class=&quot;highlighter-rouge&quot;&gt;didFailNavigation&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;A simple solution is to reload, after a few seconds.&lt;/p&gt;
</description>
        <pubDate>Tue, 06 Dec 2016 17:51:26 +0800</pubDate>
        <link>http://samwize.com/2016/12/06/pitfall-using-wkwebview-for-facebook-login/</link>
        <guid isPermaLink="true">http://samwize.com/2016/12/06/pitfall-using-wkwebview-for-facebook-login/</guid>
        
        
        <category>iOS</category>
        
      </item>
    
  </channel>
</rss>
