<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>@samwize</title>
    <description>¯\_(ツ)_/¯
</description>
    <link>http://samwize.com/</link>
    <atom:link href="http://samwize.com/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Tue, 17 Jan 2017 15:12:34 +0800</pubDate>
    <lastBuildDate>Tue, 17 Jan 2017 15:12:34 +0800</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>React Native for iOS Swift Developer</title>
        <description>&lt;p&gt;React Native is the biggest technology available for iOS developer, since 2015.&lt;/p&gt;

&lt;p&gt;It provides a new platform for iOS development, in the very popular (and familar language for web developers) - &lt;strong&gt;JavaScript&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This post is about learning/considering React Native for an iOS/Swift developer.&lt;/p&gt;

&lt;p&gt;This post is not a development guide, because the official &lt;a href=&quot;https://facebook.github.io/react-native/releases/next/docs/getting-started.html&quot;&gt;Getting started&lt;/a&gt; is good, and &lt;a href=&quot;https://www.raywenderlich.com/136047/react-native-existing-app&quot;&gt;Ray Wenderlich&lt;/a&gt; provided a great guide for Swift iOS developers.&lt;/p&gt;

&lt;p&gt;Instead, I will highlight important considerations for Swift iOS developers.&lt;/p&gt;

&lt;h2 id=&quot;why-use-react-native&quot;&gt;Why use React Native?&lt;/h2&gt;

&lt;p&gt;Instead of pure iOS/Android native development, React Native has the following benefits:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Render native UI (NOT web view), thus good user experience&lt;/li&gt;
  &lt;li&gt;Learn once, write anywhere (on both iOS &amp;amp; Android)&lt;/li&gt;
  &lt;li&gt;Similar set of technology stack (JavaScript + React + millions of JS libs) with web developers&lt;/li&gt;
  &lt;li&gt;JavaScript developers readily available, as compared to Swift/Android/Java&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I usually do not advocate non-native technology, because there are limitations and extra bugs because of the intermediary platform.&lt;/p&gt;

&lt;p&gt;But React Native is created by Facebook, and they use it in Facebook app too, so there is lesser risk.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Not zero risk, because you should know Facebook &lt;a href=&quot;http://blog.parse.com/announcements/moving-on/&quot;&gt;kills Parse&lt;/a&gt; etc too..&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;warning-javascript-world&quot;&gt;Warning: JavaScript World&lt;/h2&gt;

&lt;p&gt;Before we dived into React Native, let me warn you if you are a JavaScript newbie like me.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JavaScript world is very messy.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;How messy? See this &lt;a href=&quot;https://hackernoon.com/how-it-feels-to-learn-javascript-in-2016-d3a717dd577f&quot;&gt;conversation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The ecosystem is &lt;em&gt;too healthy&lt;/em&gt;, with lots of JS frameworks popping up and taking over the world, quickly. Check out the &lt;a href=&quot;http://stateofjs.com/&quot;&gt;state of JS in 2016&lt;/a&gt;. There will be many frameworks that you need to learn, from everyone.&lt;/p&gt;

&lt;h2 id=&quot;how-react-native-works&quot;&gt;How React Native Works?&lt;/h2&gt;

&lt;p&gt;In Facebook’s &lt;a href=&quot;https://code.facebook.com/posts/1014532261909640/react-native-bringing-modern-web-techniques-to-mobile/&quot;&gt;March 2015&lt;/a&gt; release post:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The only difference in the mobile environment is that instead of running React in the browser and rendering to divs and spans, we run it in an embedded instance of JavaScriptCore inside our apps and render to higher-level platform-specific components.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;http://nshipster.com/javascriptcore/&quot;&gt;JavaScriptCore&lt;/a&gt; is a framework provided on iOS/Android to run JavaScript.&lt;/p&gt;

&lt;p&gt;React Native runs the JavaScript in JavaScriptCore, and then render the native UI views on the platform.&lt;/p&gt;

&lt;h2 id=&quot;the-trigger-point&quot;&gt;The Trigger Point&lt;/h2&gt;

&lt;p&gt;In AppDelegate, there is boilerplate code that specify where to load the JavaScripts.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;NSURL&lt;/code&gt; either points to:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;http://localhost:8081 or&lt;/li&gt;
  &lt;li&gt;NSBundle&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Loading JavaScript remotely from a URL is interesting, because then, it is possible to &lt;a href=&quot;https://microsoft.github.io/code-push/&quot;&gt;code push&lt;/a&gt; to live apps!&lt;/p&gt;

&lt;h2 id=&quot;flexbox-for-ui-layout&quot;&gt;Flexbox for UI layout&lt;/h2&gt;

&lt;p&gt;No more messing around with autolayout.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://facebook.github.io/react-native/docs/flexbox.html&quot;&gt;Flexbox&lt;/a&gt; is a simple way, specifying a weight value for the components, the flow direction, and the alignment.&lt;/p&gt;

&lt;p&gt;You will be glad that Boostrap 4 will use flexbox way, instead of the regular grid system they started with.&lt;/p&gt;

&lt;h2 id=&quot;persistant-storage&quot;&gt;Persistant Storage&lt;/h2&gt;

&lt;p&gt;You can use &lt;a href=&quot;https://facebook.github.io/react-native/docs/asyncstorage.html&quot;&gt;AsyncStorage&lt;/a&gt; for simple key-value data, just like &lt;code class=&quot;highlighter-rouge&quot;&gt;NSUserDefault&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For database, you could use &lt;a href=&quot;https://realm.io/news/introducing-realm-react-native/&quot;&gt;Realm&lt;/a&gt;! No more Core Data!&lt;/p&gt;

&lt;h2 id=&quot;migrating-an-existing-swfit-project&quot;&gt;Migrating an existing Swfit project&lt;/h2&gt;

&lt;p&gt;You can have a hybrid of native and react native.&lt;/p&gt;

&lt;p&gt;To integrate react native into an existing project, follow &lt;a href=&quot;https://www.raywenderlich.com/136047/react-native-existing-app&quot;&gt;raywenderlich’s guide&lt;/a&gt;. Facebook’s &lt;a href=&quot;https://facebook.github.io/react-native/docs/integration-with-existing-apps.html&quot;&gt;official guide&lt;/a&gt; is lacking, and outdated for the dependencies version. As of Dec 2016, I updated the version to:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;dependencies&quot;: {
  &quot;react&quot;: &quot;15.3.1&quot;,
  &quot;react-native&quot;: &quot;0.34.0&quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You can update accordingly, but things move fast so if your project doesn’t compile, then it could be the versions (and Xcode/iOS) incompatibility.&lt;/p&gt;

&lt;p&gt;One particular point missing in Facebook’s guide is how to run without depending on the packager running on eg. http://localhost:8081. Read on.&lt;/p&gt;

&lt;h2 id=&quot;bundling-js-in-app&quot;&gt;Bundling JS in App&lt;/h2&gt;

&lt;p&gt;React Native provided a script - &lt;code class=&quot;highlighter-rouge&quot;&gt;react-native-xcode.sh&lt;/code&gt; - to build and bundle the JS and all resources you need into your app.&lt;/p&gt;

&lt;p&gt;When integrating into an existing app, you have to add a &lt;strong&gt;New Run Script Phase&lt;/strong&gt; with the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export NODE_BINARY=node
./path/to/node_modules/react-native/packager/react-native-xcode.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Edit the path to &lt;code class=&quot;highlighter-rouge&quot;&gt;react-native-xcode.sh&lt;/code&gt; as necessary.&lt;/p&gt;

&lt;p&gt;You will also need to edit/add your scheme’s &lt;strong&gt;Build Configuration&lt;/strong&gt; to &lt;strong&gt;Release&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Tip: If you are using fastlane gym, don’t worry because the default of gym is to use Release configuration, even if the scheme is set to Debug.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;navigation&quot;&gt;Navigation&lt;/h2&gt;

&lt;p&gt;Let’s take a look on a very basic UI subject. In iOS, we have &lt;code class=&quot;highlighter-rouge&quot;&gt;UINavigationController&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In React Native, it gets complicated and there are more choices:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Facebook’s out of the box &lt;a href=&quot;https://facebook.github.io/react-native/docs/navigator.html&quot;&gt;Navigator&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Facebook’s abandoned &lt;a href=&quot;https://facebook.github.io/react-native/docs/navigatorios.html&quot;&gt;NavigatorIOS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;WIX’s &lt;a href=&quot;https://github.com/wix/react-native-navigation&quot;&gt;react-native-navigation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are lots of community contributions, and once you found the library that is suitable for your requirement, you could use it easily.&lt;/p&gt;

&lt;h2 id=&quot;macos-too&quot;&gt;macOS too&lt;/h2&gt;

&lt;p&gt;Not only for mobile, but you could learn once, and write for &lt;a href=&quot;https://github.com/ptmt/react-native-macos&quot;&gt;desktop app&lt;/a&gt; too.&lt;/p&gt;

&lt;h2 id=&quot;ide&quot;&gt;IDE&lt;/h2&gt;

&lt;p&gt;Facebook has their own “IDE” - &lt;a href=&quot;https://nuclide.io&quot;&gt;nuclide&lt;/a&gt; - which is &lt;a href=&quot;https://atom.io/packages/nuclide&quot;&gt;plugin for Atom&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;what-about-type&quot;&gt;What about type?&lt;/h2&gt;

&lt;p&gt;One of the cons of JavaScript (compared to Swift) is that there is no type safety built into the language.&lt;/p&gt;

&lt;p&gt;If you prefer to deal with types (which you should, trust me), then you should use &lt;a href=&quot;https://flowtype.org&quot;&gt;Flow&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Install flow globally so that it is added to PATH
npm install -g flow-bin
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I would recommend to setup Flow when you begin a project, because it gets harder to migrate &lt;em&gt;non-flow app&lt;/em&gt; later on.&lt;/p&gt;

&lt;h2 id=&quot;what-about-typescript&quot;&gt;What about TypeScript?&lt;/h2&gt;

&lt;p&gt;TypeScript provides typing and optionals, in a new language of it’s own.&lt;/p&gt;

&lt;p&gt;I would choose to use TypeScript, if I had more experience with JavaScript (especially with the new ES2015). But being a newbie to JavaScript, it is better to learn the intricates of the language.&lt;/p&gt;

&lt;p&gt;What’s more, most examples and libraries will be in pure JavaScript.&lt;/p&gt;

&lt;p&gt;And compared to Flow, Facebook has &lt;a href=&quot;https://github.com/facebook/react-native/issues/2502&quot;&gt;preference&lt;/a&gt; for Flow. The react library has Flow annotations.&lt;/p&gt;

&lt;p&gt;So my advise is to avoid TypeScript. But it is &lt;a href=&quot;https://raygun.com/blog/2016/07/react-native-typescript/&quot;&gt;possible&lt;/a&gt; &lt;a href=&quot;https://medium.com/react-weekly/react-native-and-typescript-ad57b7413ead&quot;&gt;to use&lt;/a&gt;, just saying.&lt;/p&gt;

&lt;h2 id=&quot;project-generator&quot;&gt;Project Generator&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/infinitered/ignite&quot;&gt;ignite&lt;/a&gt; is extension of &lt;a href=&quot;http://yeoman.io&quot;&gt;yeoman&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Generate a best-practised project structure with state of the art setup.&lt;/p&gt;

&lt;h2 id=&quot;what-is-not-so-great&quot;&gt;What is not so great?&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Dependency on another technology stack&lt;/li&gt;
  &lt;li&gt;You will not be able to use the latest iOS technology&lt;/li&gt;
  &lt;li&gt;Swift is nicer than JavaScript&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;more-resources&quot;&gt;More Resources&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/jondot/awesome-react-native&quot;&gt;awesome-react-native&lt;/a&gt; - List of great libraries&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/fbsamples/f8app&quot;&gt;F8 - Facebook conference app&lt;/a&gt; - written in react native, fully open sourced&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://js.coach/react-native&quot;&gt;js.coach&lt;/a&gt; - Discover more JS&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/stefalda/ReactNativeLocalization&quot;&gt;Localization&lt;/a&gt; library&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/react-native-community/react-native-elements&quot;&gt;Many&lt;/a&gt; &lt;a href=&quot;https://github.com/GeekyAnts/NativeBase&quot;&gt;native&lt;/a&gt; components&lt;/p&gt;
</description>
        <pubDate>Mon, 09 Jan 2017 10:20:38 +0800</pubDate>
        <link>http://samwize.com/2017/01/09/react-native-for-ios-swift-developer/</link>
        <guid isPermaLink="true">http://samwize.com/2017/01/09/react-native-for-ios-swift-developer/</guid>
        
        
        <category>react</category>
        
      </item>
    
      <item>
        <title>Handy Bash Commands</title>
        <description>&lt;h2 id=&quot;resize-image&quot;&gt;Resize Image&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Resize to max width/height 640
sips -Z 640 *.jpg
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;list-process-running-on-a-port&quot;&gt;List Process Running on a Port&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# eg. Port 8080
lsof -i :8080
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;kill-process-running-on-a-port&quot;&gt;Kill Process running on a Port&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;lsof -P | grep &#39;:8080&#39; | awk &#39;{print $2}&#39; | xargs kill -9
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;creating-markdown-journal&quot;&gt;Creating Markdown Journal&lt;/h2&gt;

&lt;p&gt;Uses &lt;a href=&quot;https://github.com/samwize/journal/&quot;&gt;journal&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;journal new -d /path/to/journal &quot;My entry for today&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;extract-mp3-from-youtube&quot;&gt;Extract MP3 from Youtube&lt;/h2&gt;

&lt;p&gt;Uses &lt;a href=&quot;https://rg3.github.io/youtube-dl/&quot;&gt;youtube-dl&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;youtube-dl -x --audio-format=mp3 https://www.youtube.com/watch?v=eu-5mvCNKbQ

# Other handy youtube-dl
# Download in mp4 video format
youtube-dl -f mp4 https://www.youtube.com/watch?v=eu-5mvCNKbQ
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;download-a-file-with-curl&quot;&gt;Download a file with curl&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -o myfile.mp3 https://the.domain.com/file
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Mon, 02 Jan 2017 12:30:28 +0800</pubDate>
        <link>http://samwize.com/2017/01/02/handy-bash-commands/</link>
        <guid isPermaLink="true">http://samwize.com/2017/01/02/handy-bash-commands/</guid>
        
        
        <category>bash</category>
        
      </item>
    
      <item>
        <title>UIKit Dynamics Guide</title>
        <description>&lt;p&gt;UIKit Dynamics was unveiled in &lt;a href=&quot;https://developer.apple.com/videos/play/wwdc2013/206/&quot;&gt;WWDC 2013&lt;/a&gt;, for iOS 7.&lt;/p&gt;

&lt;p&gt;The goal was to make it easy to create animated views and transitions, based on physics.&lt;/p&gt;

&lt;h2 id=&quot;what-about-core-animation-uiview-animation-etc&quot;&gt;What about Core Animation, UIView Animation, etc&lt;/h2&gt;

&lt;p&gt;We already can animate views using various techniques, such as:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;the popular &lt;a href=&quot;https://developer.apple.com/reference/uikit/uiview/1622418-animate&quot;&gt;animate(withDuration:animations:)&lt;/a&gt;, and&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/2016/12/16/core-animation-guide/&quot;&gt;Core Animation&lt;/a&gt;, which we covered earlier.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So why need UIKit Dynamics?&lt;/p&gt;

&lt;p&gt;In short, UIKit Dynamics is a better, physics-inspired framework.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A composable, reusable, declarative, real-world inspired animation, and interaction system.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;UI Dynamics &lt;em&gt;is like&lt;/em&gt; Sprite Kit, but for non-gaming apps.&lt;/p&gt;

&lt;p&gt;(Note: Core Animation is great, but it is for pure animation. It has no “physics engine”, no collision detection and sort. So choose the framework you need.)&lt;/p&gt;

&lt;h2 id=&quot;architecture&quot;&gt;Architecture&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/images/uikit-dynamic-architecture.png&quot; alt=&quot;UIKit Dynamic Architecture Diagram&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;UIDynamicAnimator
    &lt;ul&gt;
      &lt;li&gt;Has a reference view (think of it as a canvas)&lt;/li&gt;
      &lt;li&gt;Provide overall context&lt;/li&gt;
      &lt;li&gt;Keep track of all the behavioiurs&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;UIDynamicBehavior
    &lt;ul&gt;
      &lt;li&gt;Declarative&lt;/li&gt;
      &lt;li&gt;Composable&lt;/li&gt;
      &lt;li&gt;Configure the parameters then add to animator&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;UIDynamicItem/View
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://developer.apple.com/reference/uikit/uidynamicitem&quot;&gt;UIDynamicItem&lt;/a&gt; is a protocol, providing UIKit the information it needs to animate an item&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UIView&lt;/code&gt; implements it, but you can implement it too&lt;/li&gt;
      &lt;li&gt;Behaviour-View is n-n&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;primitive-behaviours&quot;&gt;Primitive Behaviours&lt;/h2&gt;

&lt;p&gt;You can create/compose your own &lt;code class=&quot;highlighter-rouge&quot;&gt;UIDynamicBehavior&lt;/code&gt;, but these common ones are provided out of the box:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Gravity
    &lt;ul&gt;
      &lt;li&gt;&lt;del&gt;Earth Gravity&lt;/del&gt; UI Kit Gravity = 1000 point/sec^2&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Collision
    &lt;ul&gt;
      &lt;li&gt;Between items or boundary&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Attachment
    &lt;ul&gt;
      &lt;li&gt;Spring&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Snap
    &lt;ul&gt;
      &lt;li&gt;Snap in place&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Push
    &lt;ul&gt;
      &lt;li&gt;&lt;del&gt;Newton Force&lt;/del&gt; UIKit Newton = Accelerate (100,100) to 100 point/sec^2&lt;/li&gt;
      &lt;li&gt;Continuous or instantenous&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;UIDynamicItemBehavior
    &lt;ul&gt;
      &lt;li&gt;Item-level properties: friction, elasticiy, density, etc&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;the-swift-code&quot;&gt;The Swift Code&lt;/h2&gt;

&lt;p&gt;This is how you create a simple physics behaviour (actually made up of 3 &lt;code class=&quot;highlighter-rouge&quot;&gt;UIDynamicBehavior&lt;/code&gt;) of an image view falling through gravity and bouncing off the container view:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// The view controller must hold on to the animator object&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;animator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIDynamicAnimator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Create the animator&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;animator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIDynamicAnimator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;referenceView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Create behaviour #1 - Gravity&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;gravity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIGravityBehavior&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;imageView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;animator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addBehavior&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gravity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Create behaviour #2 - Collision&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;collision&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UICollisionBehavior&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;imageView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;collision&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;translatesReferenceBoundsIntoBoundary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;animator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addBehavior&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collision&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Create behaviour #3 - Elasticity etc&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;behaviour&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIDynamicItemBehavior&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;imageView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;behaviour&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;allowsRotation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;behaviour&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elasticity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;animator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addBehavior&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;behaviour&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;with-autolayout&quot;&gt;With Autolayout&lt;/h2&gt;

&lt;p&gt;Autolayout is &lt;em&gt;incompatitble&lt;/em&gt; with animation - using UIKit Dynamics or Core Animation.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&quot;/2016/12/16/core-animation-guide/&quot;&gt;Core Animation&lt;/a&gt;, the framework works on the &lt;strong&gt;presentation&lt;/strong&gt; layer, while the actual &lt;strong&gt;model&lt;/strong&gt; has to be explicitly updated when the animation is completed.&lt;/p&gt;

&lt;p&gt;This is the same for UIKit Dynamics.&lt;/p&gt;

&lt;p&gt;Use the animator’s &lt;a href=&quot;https://developer.apple.com/reference/uikit/uidynamicanimatordelegate#//apple_ref/occ/intfm/UIDynamicAnimatorDelegate/dynamicAnimatorDidPause&quot;&gt;delegate&lt;/a&gt; to know when the animation is completed, and update your autolayout constraints to the final state..&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// In `viewDidLoad`, set the delegate&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;animator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delegate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;
  
&lt;span class=&quot;c1&quot;&gt;// UIDynamicAnimatorDelegate&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dynamicAnimatorDidPause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;animator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIDynamicAnimator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Update the constraint to the final state&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;uicollectionview&quot;&gt;UICollectionView&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UICollectionViewLayoutAttributes&lt;/code&gt; also implements &lt;code class=&quot;highlighter-rouge&quot;&gt;UIDynamicItem&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This provides some cool animation to all the items in a collection view.&lt;/p&gt;

&lt;p&gt;objc.io has a good tutorial on &lt;a href=&quot;https://www.objc.io/issues/5-ios7/collection-views-and-uidynamics/&quot;&gt;UICollectionView with dynamic animator&lt;/a&gt;, with the &lt;a href=&quot;https://github.com/ashfurrow/ASHSpringyCollectionView/blob/master/ASHSpringyCollectionView/ASHSpringyCollectionViewFlowLayout.m&quot;&gt;source&lt;/a&gt; in github.&lt;/p&gt;
</description>
        <pubDate>Mon, 19 Dec 2016 16:49:03 +0800</pubDate>
        <link>http://samwize.com/2016/12/19/uikit-dynamics-guide/</link>
        <guid isPermaLink="true">http://samwize.com/2016/12/19/uikit-dynamics-guide/</guid>
        
        
        <category>iOS</category>
        
        <category>UIKit</category>
        
      </item>
    
      <item>
        <title>Core Animation Guide</title>
        <description>&lt;p&gt;There are many ways to perform animation, and using &lt;a href=&quot;https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/CoreAnimation_guide/CreatingBasicAnimations/CreatingBasicAnimations.html&quot;&gt;Core Animation&lt;/a&gt; is one great framework provided by Apple.&lt;/p&gt;

&lt;p&gt;Core Animation operates on &lt;code class=&quot;highlighter-rouge&quot;&gt;CALayer&lt;/code&gt;, which is the &lt;code class=&quot;highlighter-rouge&quot;&gt;layer&lt;/code&gt; property that each &lt;code class=&quot;highlighter-rouge&quot;&gt;UIView&lt;/code&gt; has. It is a presentation layer.&lt;/p&gt;

&lt;h2 id=&quot;basic-animation&quot;&gt;Basic animation&lt;/h2&gt;

&lt;p&gt;Let’s jump right into the code to “tell” a view to move right by 50 pt:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;move&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CABasicAnimation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keyPath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;position.x&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;byValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// Move right by 50 pt&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;duration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// 1 second&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timingFunction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CAMediaTimingFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kCAMediaTimingFunctionEaseInEaseOut&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fillMode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kCAFillModeForwards&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;removedOnCompletion&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addAnimation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;forKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;move&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Most of the code is self explanatory. We set the properties of &lt;code class=&quot;highlighter-rouge&quot;&gt;CABasicAnimation&lt;/code&gt; – the duration of the animation, with a ease-in-ease-out effect, moving it to the right by 50pt.&lt;/p&gt;

&lt;p&gt;In the example, we change the &lt;code class=&quot;highlighter-rouge&quot;&gt;keyPath&lt;/code&gt; of “position.x”. We could change any of the &lt;a href=&quot;https://developer.apple.com/reference/quartzcore/cabasicanimation&quot;&gt;properties&lt;/a&gt;, such as “opacity”, “backgroundColor”, “transform.scale.x”, etc.&lt;/p&gt;

&lt;h2 id=&quot;make-the-layer-remains-in-final-state&quot;&gt;Make the Layer Remains in Final State&lt;/h2&gt;

&lt;p&gt;A &lt;a href=&quot;https://gist.github.com/d-ronnqvist/11266321&quot;&gt;controversial&lt;/a&gt;, but simple, way to make the view remain in the final state is:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fillMode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kCAFillModeForwards&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;removedOnCompletion&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This merely make the &lt;strong&gt;presentation&lt;/strong&gt; remains in the final state. The actual &lt;strong&gt;model&lt;/strong&gt; is not changed. This will affects hit-testing etc.&lt;/p&gt;

&lt;p&gt;If the view does not require user interaction, then you could use this &lt;em&gt;easy&lt;/em&gt; way.&lt;/p&gt;

&lt;p&gt;Otherwise, you have to update the model after the animation eg.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addAnimation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;forKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;move&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Set the final state&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;multiple-animations&quot;&gt;Multiple Animations&lt;/h2&gt;

&lt;p&gt;You can combine multiple animations into an animation group.&lt;/p&gt;

&lt;p&gt;We extend our example with a fade out effect.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;move&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CABasicAnimation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keyPath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;position.x&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;byValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;fade&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CABasicAnimation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fade&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keyPath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;opacity&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fade&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;byValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CAAnimationGroup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;animations&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fade&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;duration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timingFunction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CAMediaTimingFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kCAMediaTimingFunctionEaseIn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fillMode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kCAFillModeForwards&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;removedOnCompletion&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addAnimation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;forKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;move-fadeout&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We use the &lt;code class=&quot;highlighter-rouge&quot;&gt;CAAnimationGroup&lt;/code&gt; and set the common properties to the group instead.&lt;/p&gt;

&lt;h2 id=&quot;animate-key-frames&quot;&gt;Animate key frames&lt;/h2&gt;

&lt;p&gt;We can also animate key frames using &lt;code class=&quot;highlighter-rouge&quot;&gt;CAKeyframeAnimation&lt;/code&gt;, by changing the values with precise timing:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;move&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CAKeyframeAnimation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keyPath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;position.x&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;values&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keyTimes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;on-animation-completion&quot;&gt;On Animation Completion&lt;/h2&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;CATransaction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        
&lt;span class=&quot;kt&quot;&gt;CATransaction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setCompletionBlock&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Perform this when animation has completed&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;animation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addAnimation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;animation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;forKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;animation&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;CATransaction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;        
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;pitfall-with-opacity-and-interaction&quot;&gt;Pitfall with Opacity and Interaction&lt;/h2&gt;

&lt;p&gt;There is a pitfall when you animate a view’s opacity, yet wants to enable interaction.&lt;/p&gt;

&lt;p&gt;When you set a view &lt;code class=&quot;highlighter-rouge&quot;&gt;opacity&lt;/code&gt; to 0 (hide it), iOS will actually implicity disable touches/interaction (though &lt;code class=&quot;highlighter-rouge&quot;&gt;userInteractionEnabled&lt;/code&gt; will still be true).&lt;/p&gt;

&lt;p&gt;Then in a fade in animation, you increase the opacity back to 1, and expect the view to respond to touch.&lt;/p&gt;

&lt;p&gt;BUT, remember: the animation code only affects the presentation, not the actual model. Read the section above on “Make View Remains in Final State”.&lt;/p&gt;

&lt;p&gt;The solution is to explicitly set opacity back to 1 after the animation ended.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;CATransaction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setCompletionBlock&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;opacity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;new-uiviewpropertyanimator-for-ios-10&quot;&gt;New: UIViewPropertyAnimator for iOS 10&lt;/h2&gt;

&lt;p&gt;A new feature for &lt;strong&gt;iOS 10&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;An add-on to Core Animation, providing the power to move through the animation’s progress however we ant to. Well explained by &lt;a href=&quot;http://holko.pl/2016/07/07/popping-into-uiviewpropertyanimator/&quot;&gt;Arek Holko&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So if you want to controll the animation progress (reverse on cancel?), then &lt;a href=&quot;https://www.shinobicontrols.com/blog/ios-10-day-by-day-day-4-uiviewpropertyanimator&quot;&gt;learn the ropes&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Fri, 16 Dec 2016 16:30:39 +0800</pubDate>
        <link>http://samwize.com/2016/12/16/core-animation-guide/</link>
        <guid isPermaLink="true">http://samwize.com/2016/12/16/core-animation-guide/</guid>
        
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>Pitfall: Using WKWebView for Facebook Login</title>
        <description>&lt;p&gt;When using &lt;code class=&quot;highlighter-rouge&quot;&gt;WKWebView&lt;/code&gt; (or &lt;code class=&quot;highlighter-rouge&quot;&gt;UIWebView&lt;/code&gt;), we are actually using only 1 window.&lt;/p&gt;

&lt;p&gt;For website that has Facebook login, it &lt;em&gt;might&lt;/em&gt; open a new window (a popup) for the user to login. Once login is completed, this popup window will close, and it will use an obscure method to pass a message to the original window.&lt;/p&gt;

&lt;p&gt;The message has a URL like the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://m.facebook.com/v2.7/dialog/oauth?access_token=...&amp;amp;redirect_uri=...
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;pitfall-of-1-window&quot;&gt;Pitfall of 1 Window&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&quot;http://stackoverflow.com/q/8025082/242682&quot;&gt;pitfall&lt;/a&gt; is that when we use &lt;code class=&quot;highlighter-rouge&quot;&gt;WKWebView&lt;/code&gt;, by default, we have only 1 window.&lt;/p&gt;

&lt;p&gt;A naive implementation to &lt;code class=&quot;highlighter-rouge&quot;&gt;WKUIDelegate&lt;/code&gt; is usually to load a request in that same web view:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;WebViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;WKUIDelegate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Handles when a new frame/window is to be opened&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;webView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;webView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;WKWebView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createWebViewWithConfiguration&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;configuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;WKWebViewConfiguration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;forNavigationAction&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;navigationAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;WKNavigationAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;windowFeatures&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;WKWindowFeatures&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;WKWebView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;webView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;loadRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;navigationAction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;When Facebook login wants to pass that message to the original window, it could NOT find that window, and so therefore it get stuck in the page (usually a white screen of nothing).&lt;/p&gt;

&lt;h2 id=&quot;handling-multiple-windows&quot;&gt;Handling Multiple Windows&lt;/h2&gt;

&lt;p&gt;The solution is to support multiple windows.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;webView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;webView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;WKWebView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createWebViewWithConfiguration&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;configuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;WKWebViewConfiguration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;forNavigationAction&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;navigationAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;WKNavigationAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;windowFeatures&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;WKWindowFeatures&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;WKWebView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// nil means new window&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;navigationAction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;targetFrame&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// A omit `createWebView`. It creates a new web view and add to your view.&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;newWebView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createWebView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;withConfiguration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;configuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newWebView&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;webView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;loadRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;navigationAction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I did not include what happens after this new web view is shown. For Facebook login case, you will probably want to remove the new web view in &lt;code class=&quot;highlighter-rouge&quot;&gt;webView:didFinishNavigation:&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;edge-case-error-999&quot;&gt;Edge Case: Error 999&lt;/h2&gt;

&lt;p&gt;In the code above, there is a weird scenario where some website will load  &lt;code class=&quot;highlighter-rouge&quot;&gt;https://m.facebook.com/v2.7/dialog/oauth?access_token=...&amp;amp;redirect_uri=...&lt;/code&gt; and result in &lt;code class=&quot;highlighter-rouge&quot;&gt;didFailNavigation&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;A simple solution is to reload, after a few seconds.&lt;/p&gt;
</description>
        <pubDate>Tue, 06 Dec 2016 17:51:26 +0800</pubDate>
        <link>http://samwize.com/2016/12/06/pitfall-using-wkwebview-for-facebook-login/</link>
        <guid isPermaLink="true">http://samwize.com/2016/12/06/pitfall-using-wkwebview-for-facebook-login/</guid>
        
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>On-Demand Resources Guide</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/library/content/documentation/FileManagement/Conceptual/On_Demand_Resources_Guide/Tagging.html&quot;&gt;On-Demand Resources&lt;/a&gt; is a new developer feature provided in iOS 8.&lt;/p&gt;

&lt;p&gt;It is lazy loading of resources, so that app binary size can be reduced.&lt;/p&gt;

&lt;p&gt;In other words, when you require a resource, you call the API to download it.&lt;/p&gt;

&lt;h2 id=&quot;tagging&quot;&gt;Tagging&lt;/h2&gt;

&lt;p&gt;To use, “tag” your resources (any files or assets).&lt;/p&gt;

&lt;p&gt;You can assign multiple tags per resource.&lt;/p&gt;

&lt;p&gt;Tagging is a way of grouping resources in a common bucket. When you need to use these individual resource, you have to download the tag (which will download ALL the resources, not individually).&lt;/p&gt;

&lt;p&gt;So if you want to download only 1 resource, then have 1 unique tag for that resource.&lt;/p&gt;

&lt;h2 id=&quot;types-of-resource-tag&quot;&gt;3 Types of Resource Tag&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Initial install tags&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Downloaded at the same time as the app&lt;/li&gt;
      &lt;li&gt;Included in the total size for the app&lt;/li&gt;
      &lt;li&gt;The only benefit – the tags can be purged after use&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Prefetch tag order&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Downloaded right after the app is installed, in the order listed&lt;/li&gt;
      &lt;li&gt;Excluded in the total size for the app&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Dowloaded only on demand&lt;/strong&gt; (DEFAULT)
    &lt;ul&gt;
      &lt;li&gt;Downloaded when requested by the app&lt;/li&gt;
      &lt;li&gt;Excluded in the total size for the app&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can change the type by going to &lt;strong&gt;Target &amp;gt; Resource Tags &amp;gt; Prefetched&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;download-the-tags&quot;&gt;Download the Tags&lt;/h2&gt;

&lt;p&gt;Use &lt;a href=&quot;https://developer.apple.com/reference/foundation/nsbundleresourcerequest&quot;&gt;NSBundleResourceRequest&lt;/a&gt; to specify the tag(s) to download.&lt;/p&gt;

&lt;p&gt;Init &lt;code class=&quot;highlighter-rouge&quot;&gt;NSBundleResourceRequest&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;initWithTags:&lt;/code&gt;, which will download and put the resources in the main bundle.&lt;/p&gt;

&lt;p&gt;The main API to use is &lt;code class=&quot;highlighter-rouge&quot;&gt;beginAccessingResourcesWithCompletionHandler:&lt;/code&gt;. This will start to download the resources, if they are not already in the device.&lt;/p&gt;

&lt;p&gt;If the resources are already in the device, then it will just call the completion block.&lt;/p&gt;

&lt;p&gt;Another method is &lt;code class=&quot;highlighter-rouge&quot;&gt;conditionallyBeginAccessingResourcesWithCompletionHandler:&lt;/code&gt;. This merely check if the resources are already on device (it will not download even if it is not present). I don’t see much use of calling this asynchronous method just to check.&lt;/p&gt;

&lt;p&gt;Note: The completion block is not called on the main thread.&lt;/p&gt;

&lt;h2 id=&quot;using-the-resource&quot;&gt;Using the Resource&lt;/h2&gt;

&lt;p&gt;You can use the main bundle, after the tags are downloaded.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;NSBundle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mainBundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;URLForResource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;myvideo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;withExtension&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;mp4&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;For &lt;code class=&quot;highlighter-rouge&quot;&gt;UIImage&lt;/code&gt;, as usual, you can use &lt;code class=&quot;highlighter-rouge&quot;&gt;imageNamed&lt;/code&gt;, and it will be there.&lt;/p&gt;

&lt;p&gt;But remember, it is up to you to make sure the resources/tags are downloaded. You must ensure they are successfully downloaded before use.&lt;/p&gt;

&lt;p&gt;If the resource is not on device, it could crash.&lt;/p&gt;

&lt;h2 id=&quot;pitfall-bugs-during-development&quot;&gt;Pitfall: Bugs during Development&lt;/h2&gt;

&lt;p&gt;However, things will &lt;a href=&quot;http://stackoverflow.com/q/39870159/242682&quot;&gt;not work&lt;/a&gt; (tested in Xcode 8.1).&lt;/p&gt;

&lt;p&gt;Tags with &lt;strong&gt;Initial install tags&lt;/strong&gt; are not downloaded after app is installed on simulator. You can see it is not downloaded under &lt;strong&gt;Debug navigator &amp;gt; Disk&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This is obviously a bug.&lt;/p&gt;

&lt;p&gt;There is no workaround, other than to always ensure your resources are downloaded (which you definitely should) before use.&lt;/p&gt;

&lt;h2 id=&quot;preservation-priority&quot;&gt;Preservation Priority&lt;/h2&gt;

&lt;p&gt;The operating system could purge any resource that is not held by any &lt;code class=&quot;highlighter-rouge&quot;&gt;NSBundleResourceRequest&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Purging starts with resources with lowest preservation priority, between 0 and 1.&lt;/p&gt;

&lt;p&gt;Use &lt;a href=&quot;https://developer.apple.com/reference/foundation/bundle/1614845-setpreservationpriority&quot;&gt;setPreservationPriority(_:forTags:)&lt;/a&gt; on the bundle.&lt;/p&gt;

&lt;p&gt;It is still not clear when the OS will purge. But it could persist across multiple launches.&lt;/p&gt;
</description>
        <pubDate>Mon, 05 Dec 2016 10:23:11 +0800</pubDate>
        <link>http://samwize.com/2016/12/05/on-demand-resources-guide/</link>
        <guid isPermaLink="true">http://samwize.com/2016/12/05/on-demand-resources-guide/</guid>
        
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>UISearchController Development Guide</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/reference/uikit/uisearchcontroller&quot;&gt;UISearchController&lt;/a&gt; is a new controller in iOS 8 to handle search.&lt;/p&gt;

&lt;p&gt;Prior to iOS 8, we have &lt;a href=&quot;https://developer.apple.com/reference/uikit/uisearchdisplaycontroller&quot;&gt;UISearchDisplayController&lt;/a&gt;, which is deprecated. &lt;code class=&quot;highlighter-rouge&quot;&gt;UISearchController&lt;/code&gt; more than replaced it, with a architectural change.&lt;/p&gt;

&lt;h2 id=&quot;the-architecture&quot;&gt;The Architecture&lt;/h2&gt;

&lt;p&gt;There are two View Controllers (VC) involved in search. Let’s call them:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Presenting VC&lt;/strong&gt; - where the search is triggered&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Results VC&lt;/strong&gt; - where the results are displayed in&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You may also have the presenting VC display the results. In that case, they are the same VC.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UISearchController&lt;/code&gt; also provides a &lt;code class=&quot;highlighter-rouge&quot;&gt;UISearchBar&lt;/code&gt; object, because all search requires the search bar for input.&lt;/p&gt;

&lt;h2 id=&quot;triggering-the-search&quot;&gt;Triggering the search&lt;/h2&gt;

&lt;p&gt;There are 2 ways.&lt;/p&gt;

&lt;h3 id=&quot;add-search-bar&quot;&gt;1. Add Search Bar&lt;/h3&gt;

&lt;p&gt;Add the &lt;code class=&quot;highlighter-rouge&quot;&gt;UISearchBar&lt;/code&gt; to your presenting VC.&lt;/p&gt;

&lt;p&gt;This must be done programatically, because there is no library object for &lt;code class=&quot;highlighter-rouge&quot;&gt;UISearchController&lt;/code&gt; in Xcode. And you have to use it’s &lt;code class=&quot;highlighter-rouge&quot;&gt;searchBar&lt;/code&gt; object.&lt;/p&gt;

&lt;p&gt;If you are using a &lt;code class=&quot;highlighter-rouge&quot;&gt;UITableView&lt;/code&gt;, a search bar can be added to the header easily:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tableHeaderView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;searchController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;searchBar&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;add-search-button&quot;&gt;2. Add Search Button&lt;/h3&gt;

&lt;p&gt;Another way is to have a button to trigger the search, instead of adding the whole search bar in like in (1).&lt;/p&gt;

&lt;p&gt;Create the &lt;code class=&quot;highlighter-rouge&quot;&gt;IBAction&lt;/code&gt; for the button:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;@IBAction&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tapSearch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AnyObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;presentViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;searchController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;animated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Remember: &lt;code class=&quot;highlighter-rouge&quot;&gt;searchController&lt;/code&gt; is a &lt;code class=&quot;highlighter-rouge&quot;&gt;UIViewController&lt;/code&gt; (read in later section) so it can be called with &lt;code class=&quot;highlighter-rouge&quot;&gt;presentViewController&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When the presenting VC has a navigation bar, you will need to configure search controller:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;searchController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hidesNavigationBarDuringPresentation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;the-delegates&quot;&gt;The Delegates&lt;/h2&gt;

&lt;h3 id=&quot;delegate-1---uisearchresultsupdating&quot;&gt;Delegate #1 - UISearchResultsUpdating&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/reference/uikit/uisearchresultsupdating&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UISearchResultsUpdating&lt;/code&gt;&lt;/a&gt; protocol has a callback when the user enters into the search bar.&lt;/p&gt;

&lt;p&gt;Set &lt;code class=&quot;highlighter-rouge&quot;&gt;searchResultsUpdater&lt;/code&gt;. Typically, the results VC will implement the protocol, so that it will update the results accordingly.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;searchController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;searchResultsUpdater&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resultsViewController&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then in &lt;code class=&quot;highlighter-rouge&quot;&gt;resultsViewController&lt;/code&gt;, implement the method:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;updateSearchResultsForSearchController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;searchController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UISearchController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;searchTerm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;searchController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;searchBar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Update your results&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;delegate-2---uisearchbardelegate&quot;&gt;Delegate #2 - UISearchBarDelegate&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/reference/uikit/uisearchbardelegate&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UISearchBarDelegate&lt;/code&gt;&lt;/a&gt; protocol provides more events:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;text changed&lt;/li&gt;
  &lt;li&gt;should text change&lt;/li&gt;
  &lt;li&gt;should/begin/end editing&lt;/li&gt;
  &lt;li&gt;tap on cancel button/etc&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Set &lt;code class=&quot;highlighter-rouge&quot;&gt;searchBar.delegate&lt;/code&gt;. Typically, the results VC.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;searchController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;searchBar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delegate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resultsViewController&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You might be thinking we have &lt;code class=&quot;highlighter-rouge&quot;&gt;searchResultsUpdater&lt;/code&gt;. Isn’t that enough? Usually so, unless you want to know when buttons such as &lt;a href=&quot;https://developer.apple.com/reference/uikit/uisearchbar/1624292-scopebuttontitles&quot;&gt;scopes button&lt;/a&gt; are tapped on.&lt;/p&gt;

&lt;h3 id=&quot;delegate-3---uisearchcontrollerdelegate&quot;&gt;Delegate #3 - UISearchControllerDelegate&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/reference/uikit/uisearchcontrollerdelegate&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UISearchControllerDelegate&lt;/code&gt;&lt;/a&gt; protocol provides events when:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the search controller is presented or dismissed&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Set &lt;code class=&quot;highlighter-rouge&quot;&gt;delegate&lt;/code&gt; to the view controller that handles the calls, typically the presenting VC.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;searchController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delegate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;uisearchcontroller-is-a-uiviewcontroller&quot;&gt;UISearchController is a UIViewController&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UISearchController&lt;/code&gt; inherits from &lt;code class=&quot;highlighter-rouge&quot;&gt;UIViewController&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can present it modally with &lt;code class=&quot;highlighter-rouge&quot;&gt;presentViewController&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;BUT, you should never push to navigation controller or use it as a child etc. If you want that, you can use &lt;a href=&quot;https://developer.apple.com/reference/uikit/uisearchcontainerviewcontroller&quot;&gt;UISearchContainerViewController&lt;/a&gt; to wrap it first.&lt;/p&gt;

&lt;h2 id=&quot;display-results-instead-of-dimming&quot;&gt;Display Results Instead of Dimming&lt;/h2&gt;

&lt;p&gt;The default behaviour dims the presenting VC when search is triggered.&lt;/p&gt;

&lt;p&gt;User has to type 1 character, then the results VC will be shown.&lt;/p&gt;

&lt;p&gt;It is common UX to display an intial set of results once search is triggered. Who knows, our smart filtering might already show up a good match?&lt;/p&gt;

&lt;p&gt;Firstly, we prevent the dim with:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;searchController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dimsBackgroundDuringPresentation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;To show the results VC, a &lt;a href=&quot;http://stackoverflow.com/a/30814194/242682&quot;&gt;little hack&lt;/a&gt; is needed in the results VC:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ResultsViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIViewController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;nf&quot;&gt;setupToPreventHiddenBehaviour&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setupToPreventHiddenBehaviour&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addObserver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;forKeyPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hidden&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Old&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;kd&quot;&gt;deinit&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;removeObserver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;forKeyPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hidden&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;observeValueForKeyPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;keyPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ofObject&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AnyObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;change&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AnyObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]?,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UnsafeMutablePointer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;observeValueForKeyPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keyPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ofObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;change&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;change&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;change&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;NSKeyValueChangeNewKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as?&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hidden&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;It hacks around by observing for the view’s &lt;code class=&quot;highlighter-rouge&quot;&gt;hidden&lt;/code&gt; property, forcing it to never hide. Even when you clear the search bar, it gets back to this initial state.&lt;/p&gt;
</description>
        <pubDate>Sun, 27 Nov 2016 10:12:44 +0800</pubDate>
        <link>http://samwize.com/2016/11/27/uisearchcontroller-development-guide/</link>
        <guid isPermaLink="true">http://samwize.com/2016/11/27/uisearchcontroller-development-guide/</guid>
        
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>Never to Have Feelings for Your Code</title>
        <description>&lt;p&gt;As a developer, never to have feelings for your code.&lt;/p&gt;

&lt;p&gt;As a designer, never to have feelings for your mockups.&lt;/p&gt;

&lt;p&gt;As a product manager, never to have feelings for your roadmap.&lt;/p&gt;

&lt;p&gt;Never to have attachment to them, so that you can discard them, anytime.&lt;/p&gt;
</description>
        <pubDate>Thu, 17 Nov 2016 14:39:44 +0800</pubDate>
        <link>http://samwize.com/2016/11/17/never-to-have-feelings-for-your-code/</link>
        <guid isPermaLink="true">http://samwize.com/2016/11/17/never-to-have-feelings-for-your-code/</guid>
        
        
        <category>Product</category>
        
      </item>
    
      <item>
        <title>Swift Package Manager Development Guide</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://samwize.com/2016/05/20/introduction-to-scripting-in-swift/&quot;&gt;Previously&lt;/a&gt;, we mentioned a Rome version of Cocoapods that you can use for your Swift scripts.&lt;/p&gt;

&lt;p&gt;Swift is moving fast, and now we have the official &lt;a href=&quot;https://swift.org/package-manager/&quot;&gt;Swift Package Manager&lt;/a&gt;!.&lt;/p&gt;

&lt;p&gt;Instead of writing a &lt;code class=&quot;highlighter-rouge&quot;&gt;Podfile&lt;/code&gt;, you write a &lt;code class=&quot;highlighter-rouge&quot;&gt;Package.swift&lt;/code&gt;, which is made up of Swift code declaring the dependencies.&lt;/p&gt;

&lt;p&gt;Then to get the dependencies:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;swift build
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;more-commands&quot;&gt;More Commands&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# If you prefer to setup with a template, including .gitignore, Sources and Tests
swift package init

# Generate the Xcode Project
swift package generate-xcodeproj

# Update
swift package update

# Show the dependency as a tree
swift package show-dependencies
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Mon, 14 Nov 2016 07:44:51 +0800</pubDate>
        <link>http://samwize.com/2016/11/14/swift-package-manager-development-guide/</link>
        <guid isPermaLink="true">http://samwize.com/2016/11/14/swift-package-manager-development-guide/</guid>
        
        
        <category>Swift</category>
        
      </item>
    
      <item>
        <title>To Build, or to Pay, for a Service/Tool</title>
        <description>&lt;h2 id=&quot;the-debate&quot;&gt;The Debate&lt;/h2&gt;

&lt;p&gt;Foo says: &lt;em&gt;We should build XXX ourselves, so that we have control and can easily maintain it.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Bar says: &lt;em&gt;We should pay YYY to get started quickly, thus providing us all the advanced features which we could take months to develop.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Many times, I come across arguments of building XXX vs paying YYY:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Build a push notifcation system vs using &lt;a href=&quot;https://onesignal.com&quot;&gt;OneSignal&lt;/a&gt;/etc&lt;/li&gt;
  &lt;li&gt;Manage your own service vs &lt;a href=&quot;https://aws.amazon.com&quot;&gt;AWS managed services&lt;/a&gt;/etc&lt;/li&gt;
  &lt;li&gt;Develop email client VS &lt;a href=&quot;http://mailchimp.com&quot;&gt;Mailchimp&lt;/a&gt;/etc&lt;/li&gt;
  &lt;li&gt;Host your own server hardware VS Google Compute/etc&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;both-are-right&quot;&gt;Both are Right&lt;/h2&gt;

&lt;p&gt;Their reasons are facts.&lt;/p&gt;

&lt;p&gt;There is nothing to counter argue on such factual reasons.&lt;/p&gt;

&lt;p&gt;Yet, I often hear counter arguments that starts off by disagreeing.&lt;/p&gt;

&lt;p&gt;There could be &lt;a href=&quot;http://just2me.com/2016/10/09/ego-is-the-enemy/&quot;&gt;ego&lt;/a&gt; at play. Or someone doesn’t know &lt;a href=&quot;http://just2me.com/2015/05/24/how-to-win-friends/&quot;&gt;how to win&lt;/a&gt; an argument.&lt;/p&gt;

&lt;h2 id=&quot;the-fair-middleground&quot;&gt;The Fair Middleground&lt;/h2&gt;

&lt;p&gt;We must consider the context in this order:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Who to use? Who to build? Who to maintain?&lt;/li&gt;
  &lt;li&gt;Do you have the luxury of time and resources to build?&lt;/li&gt;
  &lt;li&gt;Do you have the skillset to build?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The &lt;em&gt;who&lt;/em&gt; is especially important. The people determine the success of such undertaking.&lt;/p&gt;

&lt;p&gt;Usually, if you are a startup, the answer is to use a service.&lt;/p&gt;

&lt;p&gt;And, if you are a mature company with the resource to scale and optimize current processes, then you build your own service.&lt;/p&gt;

&lt;p&gt;There is no right or wrong, but a matter of evaluating your current situation from a fair middleground, without ego.&lt;/p&gt;
</description>
        <pubDate>Fri, 11 Nov 2016 12:07:43 +0800</pubDate>
        <link>http://samwize.com/2016/11/11/to-build-or-to-pay-for-a-service-tool/</link>
        <guid isPermaLink="true">http://samwize.com/2016/11/11/to-build-or-to-pay-for-a-service-tool/</guid>
        
        
        <category>Development</category>
        
      </item>
    
  </channel>
</rss>
