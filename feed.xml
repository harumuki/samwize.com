<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>@samwize</title>
    <description>¯\_(ツ)_/¯
</description>
    <link>https://samwize.com/</link>
    <atom:link href="https://samwize.com/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Mon, 26 Oct 2020 18:25:40 +0800</pubDate>
    <lastBuildDate>Mon, 26 Oct 2020 18:25:40 +0800</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>Bump Version Numbers</title>
        <description>&lt;p&gt;This is a tip originally from &lt;a href=&quot;https://benscheirman.com/2020/10/managing-version-numbers-with-fastlane/&quot;&gt;Ben Scheirman&lt;/a&gt; on using Fastlane to bump the &lt;em&gt;major.minor.patch&lt;/em&gt; numbering.&lt;/p&gt;

&lt;p&gt;It comes in handy, especially now that we have so many extensions, such as the new &lt;a href=&quot;/2020/10/12/guide-to-widgetkit/&quot;&gt;WidgetKit&lt;/a&gt; extension.&lt;/p&gt;

&lt;p&gt;App Store requires the SAME version numbers for ALL of your targets. If you have been setting them manually, make use of Fastlane.&lt;/p&gt;

&lt;h2 id=&quot;1-set-marketing-version&quot;&gt;1. Set Marketing Version&lt;/h2&gt;

&lt;p&gt;Firstly, use &lt;code class=&quot;highlighter-rouge&quot;&gt;agvtool&lt;/code&gt; to set the marketing version (&lt;code class=&quot;highlighter-rouge&quot;&gt;CFBundleShortVersionString&lt;/code&gt;). This is required if you have never set it before.&lt;/p&gt;

&lt;p&gt;For example, I set to “1.23” (using only major and minor).&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;agvtool new-marketing-version 1.23
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;2-add-to-fastlane&quot;&gt;2. Add to Fastlane&lt;/h2&gt;

&lt;p&gt;Add the following to your Fastlane. This is a shortcut to generate 3 lanes.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Lanes: bump_major, bump_minor, bump_patch&lt;/span&gt;
&lt;span class=&quot;sx&quot;&gt;%w{major minor patch}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;part&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;lane&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;bump_&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;part&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_sym&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;increment_version_number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;bump_type: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;part&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, to bump the minor, run &lt;code class=&quot;highlighter-rouge&quot;&gt;fastlane bump_minor&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;3-also-bump-build&quot;&gt;3. Also, bump build&lt;/h2&gt;

&lt;p&gt;For consistently, I also have a &lt;code class=&quot;highlighter-rouge&quot;&gt;fastlane bump&lt;/code&gt; to bump the &lt;strong&gt;build number&lt;/strong&gt;.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;lane&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:bump&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;increment_build_number&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Mon, 26 Oct 2020 17:29:27 +0800</pubDate>
        <link>https://samwize.com/2020/10/26/bump-version-numbers/</link>
        <guid isPermaLink="true">https://samwize.com/2020/10/26/bump-version-numbers/</guid>
        
        
        <category>fastlane</category>
        
      </item>
    
      <item>
        <title>Guide to WidgetKit</title>
        <description>&lt;h2 id=&quot;1-create-widget-extension&quot;&gt;1. Create widget extension&lt;/h2&gt;

&lt;p&gt;Create a new target and select Widget Extension. An extension is like a mini-app, with it’s own “application identifier”.&lt;/p&gt;

&lt;p&gt;In our example, we name it “MyWidget”. A corresponding “MyWidgetExtension.appex” will be automatically embedded in your app target.&lt;/p&gt;

&lt;h2 id=&quot;2-fastlane-match&quot;&gt;2. fastlane match&lt;/h2&gt;

&lt;p&gt;If you’re using fastlane, then you don’t want Xcode to manage the signing. In that case, there is an extra step to create a new set of application identifier for the extension.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fastlane produce -a com.just2us.myapp.mywidget --skip_itc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then run &lt;code class=&quot;highlighter-rouge&quot;&gt;fastlane match&lt;/code&gt; for the new identifier to set up and download the provisioning profiles. Then in Xcode, disable “Automatically manage signing” and select the provisioning profile.&lt;/p&gt;

&lt;h2 id=&quot;3-configure-widget&quot;&gt;3. Configure widget&lt;/h2&gt;

&lt;p&gt;When you create a widget, the initial “Hello World” code will all be in 1 file. I will immediately break it into 3 files, because there are multiple components at work.&lt;/p&gt;

&lt;p&gt;First of all, the &lt;code class=&quot;highlighter-rouge&quot;&gt;Widget&lt;/code&gt; protocol let us describe the widget. It is the extension entry point.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;@main&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyWidget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Widget&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;MyWidget&quot;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;WidgetConfiguration&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;StaticConfiguration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;provider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Provider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;ShortcutsView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;configurationDisplayName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;My Widget&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;A shortcut widget for the app.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;supportedFamilies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;systemSmall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Our example is a “shortcut” for the app, and supports only the small (square) size.&lt;/p&gt;

&lt;p&gt;We use the simple &lt;code class=&quot;highlighter-rouge&quot;&gt;StaticConfiguration&lt;/code&gt;. We will not dive into the dynamic intent-based configuration in this post.&lt;/p&gt;

&lt;p&gt;The widget also states 2 of our custom classes (which you’ll see later):&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Provider&lt;/code&gt; - our timeline provider&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ShortcutsView&lt;/code&gt; - our SwiftUI view to render&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;4-timeline-provider&quot;&gt;4. Timeline Provider&lt;/h2&gt;

&lt;p&gt;This is how a widget works: iOS will ask your widget for a &lt;a href=&quot;https://developer.apple.com/documentation/widgetkit/keeping-a-widget-up-to-date&quot;&gt;timeline&lt;/a&gt; so that iOS can update your widget at the right time.&lt;/p&gt;

&lt;p&gt;To do that, you have to provide your implementations for &lt;code class=&quot;highlighter-rouge&quot;&gt;TimelineProvider&lt;/code&gt;, and your &lt;code class=&quot;highlighter-rouge&quot;&gt;TimelineEntry&lt;/code&gt; struct.&lt;/p&gt;

&lt;p&gt;A minimal &lt;code class=&quot;highlighter-rouge&quot;&gt;TimelineEntry&lt;/code&gt; requires a &lt;code class=&quot;highlighter-rouge&quot;&gt;date&lt;/code&gt; field. Obviously, the date tells iOS the datetime to update the widget.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SimpleEntry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TimelineEntry&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Date&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;TimelineProvider&lt;/code&gt; ask for 3 things:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Provider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TimelineProvider&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;placeholder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SimpleEntry&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;SimpleEntry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getSnapshot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;@escaping&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;SimpleEntry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;entry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SimpleEntry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getTimeline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;@escaping&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Timeline&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;SimpleEntry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;timeline&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Timeline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;entries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;SimpleEntry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())],&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;policy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;atEnd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timeline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;5-the-swiftui-view&quot;&gt;5. The SwiftUI View&lt;/h2&gt;

&lt;p&gt;This is where your widget creates the view.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ShortcutsView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;@Environment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(\&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;widgetFamily&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;family&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;WidgetFamily&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Provider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Entry&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ShortcutsView_Previews&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PreviewProvider&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;previews&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;ShortcutsView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SimpleEntry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;previewContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;WidgetPreviewContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;family&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;systemSmall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You will likely want to use the &lt;code class=&quot;highlighter-rouge&quot;&gt;widgetFamily&lt;/code&gt; environment key to create the view according to the size.&lt;/p&gt;

&lt;p&gt;That’s all for the basics of creating a widget.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;open-shortcut-link&quot;&gt;Open shortcut link&lt;/h2&gt;

&lt;p&gt;When user taps on a widget, the host app will open. You can also specify a link to open. There are 2 ways to provide the link (be it deeplink or universal link):&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;widgetURL&lt;/code&gt; modifier&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Link&lt;/code&gt; view&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The difference is that &lt;code class=&quot;highlighter-rouge&quot;&gt;widgetURL&lt;/code&gt; is for the whole widget view; therefore only 1 for a widget.&lt;/p&gt;

&lt;p&gt;So most likely you will use the &lt;a href=&quot;https://developer.apple.com/documentation/swiftui/link&quot;&gt;SwiftUI Link&lt;/a&gt; for different views in a widget eg. news widget.&lt;/p&gt;

&lt;p&gt;Handle the URL in AppDelegate (even if you have &lt;a href=&quot;/2020/10/09/how-to-handle-deeplink-for-uiscene/&quot;&gt;already handled in your SceneDelegate&lt;/a&gt;).&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;UIApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;OpenURLOptionsKey&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[:])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Handle the url&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;small-size-does-not-support-link&quot;&gt;Small size does NOT support Link&lt;/h2&gt;

&lt;p&gt;For the small squarish widget, you cannot have multiple links in it. In fact you cannot even have 1 link. Instead, you have to use &lt;code class=&quot;highlighter-rouge&quot;&gt;widgetURL&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This seems to be a design enforcement.&lt;/p&gt;

&lt;h2 id=&quot;ui-guide--radius&quot;&gt;UI Guide &amp;amp; radius&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&quot;https://developer.apple.com/design/human-interface-guidelines/ios/system-capabilities/widgets&quot;&gt;Human Interface Guideline&lt;/a&gt; details how we should design good glanceable widgets.&lt;/p&gt;

&lt;p&gt;A new API to help with corner radius is &lt;a href=&quot;https://developer.apple.com/documentation/swiftui/containerrelativeshape&quot;&gt;ContainerRelativeShape&lt;/a&gt;. It is a shape, like &lt;code class=&quot;highlighter-rouge&quot;&gt;RoundedRectangle&lt;/code&gt;, but the corner radius adapt to it’s parent. With that, you need not hard code any corner radius in the widget.&lt;/p&gt;

&lt;p&gt;The standard margin is 16pt.&lt;/p&gt;

&lt;h2 id=&quot;multiple-widgets&quot;&gt;Multiple Widgets&lt;/h2&gt;

&lt;p&gt;You can have different types of widgets in an app. If your app support more than 1 widget, then you would use the &lt;code class=&quot;highlighter-rouge&quot;&gt;WidgetBundle&lt;/code&gt; instead.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;@main&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MultipleWidgets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;WidgetBundle&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;@WidgetBundleBuilder&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Widget&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;Widget1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;Widget2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;pitfall-conflicting-provisioning-settings&quot;&gt;PITFALL: Conflicting provisioning settings&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;XyzWidgetExtension has conflicting provisioning settings. XyzWidgetExtension is automatically signed for development, but a conflicting code signing identity iPhone Distribution has been manually specified…&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If signing has the above error, it could likely just be Xcode generating improperly. Uncheck “Automatically manage signing”, then check it back, and select a Team.&lt;/p&gt;

&lt;p&gt;Another possible error.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Embedded binary is not signed with the same certificate as the parent app. Verify the embedded binary target’s code sign settings match the parent app’s.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For that, make sure the app and extension use the same signing cert. If using fastlane match, read the section above to set up signing.&lt;/p&gt;
</description>
        <pubDate>Mon, 12 Oct 2020 14:17:20 +0800</pubDate>
        <link>https://samwize.com/2020/10/12/guide-to-widgetkit/</link>
        <guid isPermaLink="true">https://samwize.com/2020/10/12/guide-to-widgetkit/</guid>
        
        
        <category>WidgetKit</category>
        
      </item>
    
      <item>
        <title>How to Handle 3D Touch Shortcut for UIScene</title>
        <description>&lt;p&gt;Following up on the post on &lt;a href=&quot;/2020/10/09/how-to-handle-deeplink-for-uiscene/&quot;&gt;deeplink for UIScene&lt;/a&gt;, this post will be on handling 3D/Force touch shortcuts for UIScene. Again, because of &lt;code class=&quot;highlighter-rouge&quot;&gt;UIScene&lt;/code&gt;, the old way of using AppDelegate will no longer work. So this post is a refresh.&lt;/p&gt;

&lt;p&gt;We also had covered &lt;a href=&quot;/2016/04/25/tutorial-on-creating-app-shortcut-with-3d-touch/&quot;&gt;App Shortcuts&lt;/a&gt;, including setting up of dynamic shortcuts, so we won’t cover here.&lt;/p&gt;

&lt;h2 id=&quot;1-setup-static-shortcuts&quot;&gt;1. Setup static shortcuts&lt;/h2&gt;

&lt;p&gt;In Info.plist, static shortcuts can be configured like this:&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;UIApplicationShortcutItems&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;array&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;dict&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;UIApplicationShortcutItemIconType&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;UIApplicationShortcutIconTypeCaptureVideo&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;UIApplicationShortcutItemTitle&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;Record Video&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;UIApplicationShortcutItemType&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;recordVideo&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dict&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/array&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;UIApplicationShortcutItemType&lt;/code&gt; is like an identifier which will be used in code later.&lt;/p&gt;

&lt;p&gt;For more information on setting up app shortcuts, refer to &lt;a href=&quot;https://developer.apple.com/documentation/uikit/menus_and_shortcuts/add_home_screen_quick_actions&quot;&gt;Apple’s doc&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;2-handle-when-app-is-running&quot;&gt;2. Handle when app is running&lt;/h2&gt;

&lt;p&gt;Implement in &lt;code class=&quot;highlighter-rouge&quot;&gt;SceneDelegate&lt;/code&gt; the protocol &lt;code class=&quot;highlighter-rouge&quot;&gt;UIWindowSceneDelegate&lt;/code&gt;. Our custom method &lt;code class=&quot;highlighter-rouge&quot;&gt;handleShortcut()&lt;/code&gt; will identify which shortcut it is and handle accordingly.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;windowScene&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;windowScene&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIWindowScene&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;performActionFor&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;shortcutItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIApplicationShortcutItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;completionHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;@escaping&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;completionHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;handleShortcut&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shortcutItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;@discardableResult&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;handleShortcut&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;shortcutItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIApplicationShortcutItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shortcutItem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;recordVideo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Handle this&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;3-handle-cold-start&quot;&gt;3. Handle cold start&lt;/h2&gt;

&lt;p&gt;As for cold start, you will need to handle in &lt;code class=&quot;highlighter-rouge&quot;&gt;scene(_:willConnectTo:options:)&lt;/code&gt; instead.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;scene&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;scene&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIScene&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;willConnectTo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UISceneSession&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;connectionOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIScene&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ConnectionOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Your typical window setup, or even handleDeepLink..&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;shortcutItem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connectionOptions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shortcutItem&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;handleShortcut&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shortcutItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Sat, 10 Oct 2020 13:32:25 +0800</pubDate>
        <link>https://samwize.com/2020/10/10/how-to-handle-3d-touch-shortcut-for-uiscene/</link>
        <guid isPermaLink="true">https://samwize.com/2020/10/10/how-to-handle-3d-touch-shortcut-for-uiscene/</guid>
        
        
        <category>UIScene</category>
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>How to Handle Deeplink for UIScene</title>
        <description>&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UIScene&lt;/code&gt; was introduced in iOS 13, and it replaced many functionalities of &lt;code class=&quot;highlighter-rouge&quot;&gt;AppDelegate&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you use &lt;code class=&quot;highlighter-rouge&quot;&gt;UIScene&lt;/code&gt;, then the old way of using &lt;code class=&quot;highlighter-rouge&quot;&gt;application(_:open:options:)&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;AppDelegate&lt;/code&gt; will NOT work anymore.&lt;/p&gt;

&lt;h2 id=&quot;1-basic-setup&quot;&gt;1. Basic setup&lt;/h2&gt;

&lt;p&gt;To handle deeplink, the Info.plist must have the &lt;code class=&quot;highlighter-rouge&quot;&gt;CFBundleURLTypes&lt;/code&gt; key added. In the example, we will have our app support a &lt;code class=&quot;highlighter-rouge&quot;&gt;myschema://&lt;/code&gt; deeplink.&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;CFBundleURLTypes&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;array&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;dict&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;CFBundleTypeRole&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;Editor&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;CFBundleURLSchemes&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;array&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;myschema&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;/array&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dict&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/array&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;2-handle-when-app-is-running&quot;&gt;2. Handle when app is running&lt;/h2&gt;

&lt;p&gt;In &lt;code class=&quot;highlighter-rouge&quot;&gt;SceneDelegate&lt;/code&gt;, add the following method:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;scene&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;scene&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIScene&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;openURLContexts&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;URLContexts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;UIOpenURLContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;URLContexts&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Your method to handle the deeplink url&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;handleDeepLink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note: There can be multiple URLs. The delegate method provides a set of &lt;code class=&quot;highlighter-rouge&quot;&gt;UIOpenURLContext&lt;/code&gt;. We are only interested in only the &lt;code class=&quot;highlighter-rouge&quot;&gt;url&lt;/code&gt;. There is also an &lt;code class=&quot;highlighter-rouge&quot;&gt;options&lt;/code&gt; in the context.&lt;/p&gt;

&lt;h2 id=&quot;3-handle-cold-start&quot;&gt;3. Handle cold start&lt;/h2&gt;

&lt;p&gt;When the app is not yet running, you need to handle in &lt;code class=&quot;highlighter-rouge&quot;&gt;scene(_:willConnectTo:options:)&lt;/code&gt; instead.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;scene&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;scene&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIScene&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;willConnectTo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UISceneSession&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;connectionOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIScene&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ConnectionOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// The typical window set up&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;windowScene&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scene&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as?&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIWindowScene&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;window&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;windowScene&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;windowScene&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rootViewController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MainViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;window&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;window&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;makeKeyAndVisible&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connectionOptions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;urlContexts&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;handleDeepLink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The code is similar, and again we use the same &lt;code class=&quot;highlighter-rouge&quot;&gt;handleDeepLink()&lt;/code&gt;.&lt;/p&gt;
</description>
        <pubDate>Fri, 09 Oct 2020 16:35:31 +0800</pubDate>
        <link>https://samwize.com/2020/10/09/how-to-handle-deeplink-for-uiscene/</link>
        <guid isPermaLink="true">https://samwize.com/2020/10/09/how-to-handle-deeplink-for-uiscene/</guid>
        
        
        <category>UIScene</category>
        
        <category>deeplink</category>
        
      </item>
    
      <item>
        <title>iOS 14 Photo Access for Add Only</title>
        <description>&lt;p&gt;iOS 14 changed the permission levels when you access photo library, and many apps will now prompt users to either:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Select photos&lt;/li&gt;
  &lt;li&gt;Allow all&lt;/li&gt;
  &lt;li&gt;Deny access&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This happens if you use &lt;code class=&quot;highlighter-rouge&quot;&gt;PHPhotoLibrary.requestAuthorization(...)&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;but-what-if-write-only&quot;&gt;But what if write only?&lt;/h2&gt;

&lt;p&gt;If you are writing to photo library, without the need to read, the same prompt will be used.&lt;/p&gt;

&lt;p&gt;That is no good.&lt;/p&gt;

&lt;p&gt;There is a better way for write-only apps, but you have to update your code.&lt;/p&gt;

&lt;h2 id=&quot;1-use-addonly&quot;&gt;1. Use addOnly&lt;/h2&gt;

&lt;p&gt;There is a &lt;a href=&quot;https://developer.apple.com/documentation/photokit/phphotolibrary/3616053-requestauthorization&quot;&gt;NEW iOS 14 method&lt;/a&gt; in PHPhotoLibrary framework  with a &lt;code class=&quot;highlighter-rouge&quot;&gt;addOnly&lt;/code&gt; option.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;PHPhotoLibrary.requestAuthorization(for: .addOnly, handler: handler)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you want to support pre iOS 14, then you will want to use &lt;a href=&quot;/2020/07/22/platform-conditional-codes/&quot;&gt;platform conditional codes&lt;/a&gt; like this:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;PHAuthorizationStatus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;#available(iOS 14, *)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;PHPhotoLibrary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;requestAuthorization&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addOnly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;PHPhotoLibrary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;requestAuthorization&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;2-add-nsphotolibraryaddusagedescription&quot;&gt;2. Add NSPhotoLibraryAddUsageDescription&lt;/h2&gt;

&lt;p&gt;In Info.plist, add the key &lt;code class=&quot;highlighter-rouge&quot;&gt;NSPhotoLibraryAddUsageDescription&lt;/code&gt; and a string to describe why you need the access.&lt;/p&gt;
</description>
        <pubDate>Mon, 24 Aug 2020 20:31:07 +0800</pubDate>
        <link>https://samwize.com/2020/08/24/ios-14-photo-access-add-only/</link>
        <guid isPermaLink="true">https://samwize.com/2020/08/24/ios-14-photo-access-add-only/</guid>
        
        
        <category>Photo</category>
        
      </item>
    
      <item>
        <title>Navigating Xcode 12 and Tabs</title>
        <description>&lt;p&gt;Xcode 12 introduced a new tab system call &lt;strong&gt;Document Tabs&lt;/strong&gt;. The old system is &lt;em&gt;Window Tabs&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The new system screwed up many of the keyboard shortcuts I am used to.&lt;/p&gt;

&lt;p&gt;One of the most troubling is that I can’t create a tab with &lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ T&lt;/code&gt; anymore.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;NOTE: This is written as of Xcode 12 beta 5, so things might change. It also depends on Xcode Preferences &amp;gt; Navigation. I use the Open in Place and Uses Tab.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;opening-a-file-in-document-tabs&quot;&gt;Opening a file in document tabs&lt;/h2&gt;

&lt;p&gt;When you open a file, there is a new concept between 1) opening temporarily and 2) keeping in place.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Click&lt;/code&gt; a file to show in current editor. But this is only &lt;em&gt;temporarily&lt;/em&gt;. If you click another file, it will replace the temporary file.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Double click&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ ⌥ O&lt;/code&gt; a file to keep in the editor.&lt;/p&gt;

&lt;p&gt;Hence, my most common workflow now consists of 2 steps.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ ⇧ O&lt;/code&gt; to quick search for a file&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ ⌥ O&lt;/code&gt; to keep it in place&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Other usual shortcuts:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ ⇧ [&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;]&lt;/code&gt; to navigate left and right of the tabs.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ W&lt;/code&gt; to close a document tab.&lt;/p&gt;

&lt;h2 id=&quot;window-tabs&quot;&gt;Window tabs&lt;/h2&gt;

&lt;p&gt;This seems like &lt;em&gt;deprecated&lt;/em&gt;. Or we should try to minimize the use.&lt;/p&gt;

&lt;p&gt;You cannot create a window tab using &lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ T&lt;/code&gt; anymore. If you want to, make sure &lt;code class=&quot;highlighter-rouge&quot;&gt;View &amp;gt; Show Window Tab Bar&lt;/code&gt;, then click on the &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; on the right of the bar.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ ⇧ W&lt;/code&gt; to close window tab.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ ⌥ ⇧ T&lt;/code&gt; to rename a window tab.&lt;/p&gt;

&lt;h2 id=&quot;make-use-of-editors&quot;&gt;Make use of Editors&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⌥ Click&lt;/code&gt; to open a file in the &lt;strong&gt;split editor&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ CTRL T&lt;/code&gt; to open new editor.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ ⇧ CTRL W&lt;/code&gt; to close split editor&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Drag&lt;/code&gt; the tab to split editor, or to another window tab.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⌥ Click&lt;/code&gt; on a file to open in next editor.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⇧ ⌥ Click&lt;/code&gt; on a file, and move with mouse to an editor&lt;/p&gt;

&lt;h2 id=&quot;other-shortcuts&quot;&gt;Other shortcuts&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ ⇧ J&lt;/code&gt; to locate the file in the project navigator&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CTRL 6&lt;/code&gt; to dropdown the classes, methods and properties of a file. Following that, type to search further.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ ⇧ A&lt;/code&gt; on a code under caret to show ⌥ions such as Callers, Rename, etc&lt;/p&gt;

&lt;p&gt;Also &lt;a href=&quot;/2012/09/26/xcode-4-dot-5-tips-and-tricks/&quot;&gt;Xcode tips in 2012&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Fri, 21 Aug 2020 22:47:10 +0800</pubDate>
        <link>https://samwize.com/2020/08/21/navigating-xcode-12-and-tabs/</link>
        <guid isPermaLink="true">https://samwize.com/2020/08/21/navigating-xcode-12-and-tabs/</guid>
        
        
        <category>Xcode</category>
        
      </item>
    
      <item>
        <title>Regex Replace Using Atom</title>
        <description>&lt;p&gt;Xcode renaming is good, but in some cases it can’t help.&lt;/p&gt;

&lt;p&gt;Often, I go back to using &lt;a href=&quot;https://flight-manual.atom.io/using-atom/sections/find-and-replace/&quot;&gt;Atom&lt;/a&gt; to find and replace, using regex.&lt;/p&gt;

&lt;h2 id=&quot;1-find&quot;&gt;1. Find&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Open a file (or a directory if multiple files) in Atom&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CMD+C&lt;/code&gt; to copy the string to find&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CMD+SHIFT+F&lt;/code&gt; to bring up Find panel&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When you bring up Atom’s Find panel, the copied string will be automatically populated in the find field, and best of all – &lt;strong&gt;automatically escape regex characters&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/atom-find-replace.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;See the &lt;code class=&quot;highlighter-rouge&quot;&gt;\&lt;/code&gt; added in the Find textfield:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;disease\.cure\(with: &quot;vaccine&quot;\)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;NOTE: Make sure the regex mode (the &lt;code class=&quot;highlighter-rouge&quot;&gt;.*&lt;/code&gt; option) is enabled.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-captured-group&quot;&gt;2. Captured Group&lt;/h2&gt;

&lt;p&gt;Using the following example, we want to find &lt;em&gt;some functions with string&lt;/em&gt;, and refactor them to a simple form:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Original&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;disease&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;vaccine&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;disease&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;mask&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// To replace and become&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;vaccine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;asCure&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mask&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;asCure&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To do that, we need to add captured group for any strings (vaccine, mask, etc). We do that with &lt;code class=&quot;highlighter-rouge&quot;&gt;(.*?)&lt;/code&gt;, capturing the shortest possible string.&lt;/p&gt;

&lt;p&gt;We edit Find to:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;disease\.cure\(with: &quot;(.*?)&quot;\)&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;3-replace&quot;&gt;3. Replace&lt;/h2&gt;

&lt;p&gt;Finally, we replace with:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$1.asCure&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The first captured group is &lt;code class=&quot;highlighter-rouge&quot;&gt;$1&lt;/code&gt;. If you have more captured groups, you can use &lt;code class=&quot;highlighter-rouge&quot;&gt;$2&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;$3&lt;/code&gt; etc.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/atom-find-replace-final.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 17 Aug 2020 10:39:34 +0800</pubDate>
        <link>https://samwize.com/2020/08/17/regex-replace-using-atom/</link>
        <guid isPermaLink="true">https://samwize.com/2020/08/17/regex-replace-using-atom/</guid>
        
        
        <category>Xcode</category>
        
      </item>
    
      <item>
        <title>Apple Is Killing Radio Apps</title>
        <description>&lt;p&gt;Amid the public outcry of Apple being a draconian monopoly, Apple is also clamping down on Internet radio apps.&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Epic Games is trolling Apple with a &amp;quot;1984&amp;quot; Fortnite video. It&amp;#39;s pretty... epic &lt;a href=&quot;https://t.co/4a8DJfJa5b&quot;&gt;pic.twitter.com/4a8DJfJa5b&lt;/a&gt;&lt;/p&gt;&amp;mdash; Tom Warren (@tomwarren) &lt;a href=&quot;https://twitter.com/tomwarren/status/1294004071616086024?ref_src=twsrc%5Etfw&quot;&gt;August 13, 2020&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;my-radio-app-rejected&quot;&gt;MY Radio app rejected&lt;/h2&gt;

&lt;p&gt;A recent update of &lt;a href=&quot;https://just2us.com/myradio/&quot;&gt;my 7-year-old radio streaming app&lt;/a&gt; is being rejected, &lt;em&gt;violating&lt;/em&gt; &lt;a href=&quot;https://developer.apple.com/app-store/review/guidelines/&quot;&gt;Guideline 5.2&lt;/a&gt; on Intellectual Property:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;5.2.3 Audio/Video Downloading: Apps should not facilitate illegal file sharing or include the ability to save, convert, or download media from third-party sources (e.g. Apple Music, YouTube, SoundCloud, Vimeo, etc.) without explicit authorization from those sources. Streaming of audio/video content may also violate Terms of Use, so be sure to check before your app accesses those services. Documentation must be provided upon request.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I have appealed, but failed.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/my-radio-appeal.jpg&quot; alt=&quot;&quot; class=&quot;border&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Interestingly, the app reviewer added that their guidelines are a &lt;strong&gt;living document&lt;/strong&gt;, which constantly evolve.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The App Store Review Guidelines are a living document; new apps presenting new questions may result in new rules at any time. While your app may have been compliant at the time it was first submitted, it is not in compliance at this time.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;other-radio-apps-too&quot;&gt;Other radio apps too&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://gabekangas.com/blog/2020/08/apple-has-shut-down-the-bat-player/&quot;&gt;Bat Player&lt;/a&gt; is being rejected for the same reason. The developer got on a phone call, and the app reviewer said:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I’m sure most of these channels are being run by the same company, so you can get many taken care of by contacting their parent organizations.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;😂 There are probably thousands of such organizations, and they won’t want to deal with thousands of app developer requests.&lt;/p&gt;

&lt;h2 id=&quot;apple-is-the-police&quot;&gt;Apple is the police&lt;/h2&gt;

&lt;p&gt;I don’t know our radio apps infringe on any IP, or not.&lt;/p&gt;

&lt;p&gt;But the fact is: &lt;strong&gt;Apple takes matters into their own hands.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;They remove apps, or limit their features, as and when they desire with their &lt;em&gt;living guidelines&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;They always said they review apps for the good of iPhone users, but &lt;em&gt;who knows&lt;/em&gt; the real motives. I am wary of Apple. 🤥&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/broken-apple.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 14 Aug 2020 10:31:27 +0800</pubDate>
        <link>https://samwize.com/2020/08/14/apple-is-killing-radio-apps/</link>
        <guid isPermaLink="true">https://samwize.com/2020/08/14/apple-is-killing-radio-apps/</guid>
        
        
        <category>Apple</category>
        
      </item>
    
      <item>
        <title>Apple Is Guilty</title>
        <description>&lt;p&gt;I am an iPhone developer since 2008, and I am grateful for the mobile revolution that they started.&lt;/p&gt;

&lt;p&gt;But now, I find Apple &lt;em&gt;guilty&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Apple stifles innovation.&lt;/strong&gt; Even if they’re not a monopoly, they are definitely a bully. (Do watch the &lt;a href=&quot;https://youtu.be/H6eYLCxxQdA&quot;&gt;congress hearing&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;Tim Cook said:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;We apply all rules to all developers equally.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;Equality my ass.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/netflix-app-store-email.jpg&quot; alt=&quot;&quot; class=&quot;border&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.bloomberg.com/news/articles/2020-07-29/apple-considered-taking-40-cut-from-subscriptions-emails-show&quot;&gt;Netflix&lt;/a&gt; has a &lt;strong&gt;special deal&lt;/strong&gt; where they pay only 15%, while other developers pay 30%. Other &lt;em&gt;“reader apps”&lt;/em&gt; also had special treatment.&lt;/p&gt;

&lt;p&gt;Or if you can &lt;a href=&quot;https://techcrunch.com/2020/06/18/interview-apples-schiller-says-position-on-hey-app-is-unchanged-and-no-rules-changes-are-imminent/&quot;&gt;kick up a fuss&lt;/a&gt;, some SVP will do something for you.&lt;/p&gt;

&lt;p&gt;The treatments are &lt;a href=&quot;https://youdownloadtheappanditdoesntwork.com&quot;&gt;never consistent&lt;/a&gt;, partly because the &lt;strong&gt;rules are always changing&lt;/strong&gt;, and app reviewers varied in their line of work.&lt;/p&gt;

&lt;p&gt;I have &lt;a href=&quot;/2020/04/19/taking-down-concert-camera/&quot;&gt;no&lt;/a&gt; &lt;a href=&quot;/2019/09/20/i-am-no-longer-surprise-over-app-store-review-rejections/&quot;&gt;shortage&lt;/a&gt; of app review rejections, and the latest came 2 days ago, and it again show how inconsistent the rules are.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/radio_streams_need_authorization.jpg&quot; alt=&quot;&quot; class=&quot;border&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://just2us.com/sgradio/&quot;&gt;SG Radio&lt;/a&gt; is an Internet radio app that I have launched 10 years ago. Surprisingly, they (or this app reviewer) now deem streaming radio stations as IP infringement and asked for authorization documents.&lt;/p&gt;

&lt;p&gt;I am worried about my livelihood, which is &lt;em&gt;solely&lt;/em&gt; on Apple platform.&lt;/p&gt;

&lt;p&gt;Today, I am seriously considering other open platforms.&lt;/p&gt;

&lt;p&gt;As &lt;a href=&quot;https://daringfireball.net/2020/07/parsing_cooks_opening_statement&quot;&gt;Daring Fireball&lt;/a&gt; puts it:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;To omit the fact that there was — dating back to the mid-’90s, well over a decade before the iPhone App Store — a thriving market for software sold (and downloaded) directly over a thing called “The Internet” is sophistry.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/images/broken-apple.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 30 Jul 2020 16:51:43 +0800</pubDate>
        <link>https://samwize.com/2020/07/30/apple-is-guilty/</link>
        <guid isPermaLink="true">https://samwize.com/2020/07/30/apple-is-guilty/</guid>
        
        
        <category>Apple</category>
        
      </item>
    
      <item>
        <title>What Is Wrong With Xcode 12 Tabs</title>
        <description>&lt;p&gt;In new Xcode 12, there is a “new” tab system. There is a tabs within tabs. Something along &lt;em&gt;window tab&lt;/em&gt; or &lt;em&gt;document tab&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I cannot figure out what’s the point, except it frustrates me with how I navigate to previous/next tab using CMD+SHIFT+[ or ].&lt;/p&gt;

&lt;p&gt;And they haven’t fix in Beta 3.. so I switch back to the original tabs I know.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/xcode-12-tab-settings.jpg&quot; alt=&quot;Xcode Preference - Change to Open in place&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 28 Jul 2020 10:02:02 +0800</pubDate>
        <link>https://samwize.com/2020/07/28/what-is-wrong-with-xcode-12-tabs/</link>
        <guid isPermaLink="true">https://samwize.com/2020/07/28/what-is-wrong-with-xcode-12-tabs/</guid>
        
        
        <category>Xcode</category>
        
      </item>
    
  </channel>
</rss>
