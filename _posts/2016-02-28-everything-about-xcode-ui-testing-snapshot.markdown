---
layout: post
title: "Everything About Xcode UI Testing"
date: 2016-02-28T23:05:42+08:00
categories: [iOS]
---

A previous post on using [fastlane's snapshot](http://samwize.com/2015/12/09/automate-screenshots-capture-using-snapshot-via-xcode-ui-testing/) for automating screenshots capture provided some good tips.

This post focus on Xcode UI Testing (not snapshot), and is more comprehensive, as there could be weird buggy behaviours just on running the UI automation.


## Recording Interactions

Xcode can generate code as you interact with your app. Start by creating a **UI Testing target**.

The record button is disabled at first, because you need to successfully run test once. To do that, go to **Product > Test**. Also ensure your test cases are listed in your app target scheme under Test.


## Use Accessibility Identifier

The code generated by Xcode will try to refer to elements using **Accessibility Identifier**, such as:

```swift
app.buttons["back"].tap()
```

Note that **"back"** is an identifier, compared to **"Back"** the name in English.

You should NOT be using the accessibility name since that could be localized, so running in different languages would not work as expected.

Pitfall: Some components such as `UIBarButtonItem` don't have the accessibility identifier field under identifier inspector. You could still add it as user defined runtime attributes as `accessibilityIdentifier` with type String.


## Selecting row in table view

```swift
# To select row 0
app.tables.cells.elementBoundByIndex(0).tap()
```


## Tests if element exists

You can write logical statements and do something, only if certain element exists.

To check if an element exists, simply use the `exists` property for a `XCUIElement`. 

```swift
if app.buttons["back"].exists {
  // Then do something
}
```


## Wait for an element to appear

Sometimes, it takes a while for an element to appear (and be "existed").

The following waits for 5 sec for the back button to appear.

```swift
let backButton = app.buttons["back"]
let exists = NSPredicate(format: "exists == true")
expectationForPredicate(exists, evaluatedWithObject: backButton, handler: nil)
waitForExpectationsWithTimeout(5, handler: nil)
```

Or use a [helper](http://averagepro.com/tag/xctest/).



## Force Tap

For strange (aka bugs), certain devices running certain languages might not be able to tap on an element, even if it should be tappable.

> Assertion Failure: UI Testing Failure - Unable to find hit point for Button

The [solution](https://forums.developer.apple.com/thread/24131) is to force tap. When an element is un-tappable, get it's coordinate, and make a tap.

```swift
extension XCUIElement {
    func forceTap() {
        if self.hittable {
            self.tap()
        } else {
            let coordinate: XCUICoordinate = self.coordinateWithNormalizedOffset(CGVectorMake(0.0, 0.0))
            coordinate.tap()
        }  
    }
}
```

For example, if the error is thrown when a button is `tap()`, you can change to `forceTap()`:

```swift
app.buttons["back"].forceTap()
```


## XCUICoordinate

We have used `XCUICoordinate` above. It is slightly more advanced way of dealing element by their coordinates.

`XCUIElement.coordinateWithNormalizedOffset` creates a new coordinates, by multiplying with the normalized offset. That is, (0, 0) is the element bound origin, while (1,1) is the element bound bottom right. You can even create coordinates beyond the element rect with negative values, or more than 1.

`XCUICoordinate.coordinateWithOffset` creates a new coordinates, by adding a offset. This time, it is using absolute points.


## Sleep

The way to sleep is using `sleep(durationInSeconds)`. That simple.


## Testing iPad vs iPhone

Most likely the UI for iPhone and iPad is different. To handle, you should have 2 test cases:

```swift
func testSnapshotPhone() {
    guard UIDevice.currentDevice().userInterfaceIdiom == .Phone else { return }
    // Capture screenshots for iPhone
}

func testSnapshotPad() {
    guard UIDevice.currentDevice().userInterfaceIdiom == .Pad else { return }
    // Capture screenshots for iPad
}
```

## Launch Arguments & Environment Variables

You could have an app launch with special behaviours, by passing launch arguments or environnment variables.

These are 2 separate ways, but they are very similar. The key difference is that a launch argument is a string, and environnment variable is a key-value.

But when using launch argument, you can still use it as a key-value eg. `-SPECIAL_FEATURE YES`.

There are many [cool behaviours](http://nshipster.com/launch-arguments-and-environment-variables/) you can enable, such as `-NSDoubleLocalizedStrings YES` to make all strings double it's length, or `-AppleLanguages (fr)` to run in French.

This is how you launch your app with custom argument in `setUp`:

```swift
override func setUp() {
    super.setUp()
    app = XCUIApplication()
    app.launchArguments += ["-SPECIAL_FEATURE", "YES"]
    app.launch()
}
```

Then in your app, you can know if there is a launch argument with `NSUserDefaults`:

```swift
NSUserDefaults.standardUserDefaults().boolForKey("SPECIAL_FEATURE")
```

You may also use `NSProcessInfo.processInfo().arguments`. Using `NSUserDefaults` is more convenient since there is `boolForKey` and etc.

For environment variables, you will use `app.launchEnvironment` and `NSProcessInfo.processInfo().environment` correspondingly.

Note that `XCUIApplication` [is not a singleton](http://drekka.ghost.io/xcuiapplication-youre-probably-doing-it-wrong/)! So don't try to have multiple `XCUIApplication()` in your test case. Have 1 object variable `var app: XCUIApplication!` in your test case that is used in all methods.

