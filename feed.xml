<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>@samwize</title>
    <description>¯\_(ツ)_/¯
</description>
    <link>https://samwize.com/</link>
    <atom:link href="https://samwize.com/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Thu, 20 Sep 2018 10:19:34 +0800</pubDate>
    <lastBuildDate>Thu, 20 Sep 2018 10:19:34 +0800</lastBuildDate>
    <generator>Jekyll v3.6.2</generator>
    
      <item>
        <title>Pitfall on App ID Prefixes (Legacy)</title>
        <description>&lt;p&gt;I stumbled on a &lt;a href=&quot;https://github.com/kishikawakatsumi/KeychainAccess/issues/52&quot;&gt;similar Keychain issue&lt;/a&gt; with error code &lt;code class=&quot;highlighter-rouge&quot;&gt;-34018&lt;/code&gt;, which is &lt;code class=&quot;highlighter-rouge&quot;&gt;missingEntitlement&lt;/code&gt;, and the message is:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Internal error when a required entitlement isn’t present, client has neither application-identifier nor keychain-access-groups entitlements.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;But my problem is not because of a missing entitlement file.&lt;/p&gt;

&lt;p&gt;My problem is that my app ID prefix is wrong.&lt;/p&gt;

&lt;h2 id=&quot;what-is-app-id-prefix&quot;&gt;What is App ID Prefix?&lt;/h2&gt;

&lt;p&gt;In &lt;a href=&quot;https://developer.apple.com/library/archive/technotes/tn2311/_index.html&quot;&gt;Technical Note TN2311&lt;/a&gt;, you would learn of this “feature”.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Every keychain item in iOS contains an attribute called the keychain access group. An iOS app can only access those keychain items it has permission to. This permission comes from the code signing entitlements stamped into the app when it is signed (using your current App ID prefix).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Until 2011, developers may create different App ID Prefix, which group a number of apps together so as to share keychain and &lt;code class=&quot;highlighter-rouge&quot;&gt;UIPasteboard&lt;/code&gt;. This is way for “cross-app communication”.&lt;/p&gt;

&lt;p&gt;Then in 2011, Apple takeaway this pretty needless feature, and use the default team ID that is associated with an Apple team account. This is simpler.&lt;/p&gt;

&lt;h2 id=&quot;i-have-multiple-prefixes&quot;&gt;I have multiple prefixes&lt;/h2&gt;

&lt;p&gt;I have been creating apps for a &lt;a href=&quot;/2018/06/01/evolution-of-my-code-in-last-10-years/&quot;&gt;long time&lt;/a&gt;, and I ended up having a non-team ID prefix for an app.&lt;/p&gt;

&lt;p&gt;It took me a while to realize the issue.&lt;/p&gt;

&lt;p&gt;The error was misleading to start with.&lt;/p&gt;

&lt;p&gt;And you can only find out your app ID prefix by logging into &lt;a href=&quot;https://developer.apple.com/&quot;&gt;Apple developer member portal&lt;/a&gt;, and look under App IDs.&lt;/p&gt;

&lt;h2 id=&quot;can-i-migrate-to-team-id-prefix&quot;&gt;Can I migrate to team ID prefix?&lt;/h2&gt;

&lt;p&gt;It is possible, but you will lose keychain data, because 1 version of an app cannot have multiple keychain access groups.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Go to developer member centre&lt;/li&gt;
  &lt;li&gt;Create a new App ID with the team ID prefix&lt;/li&gt;
  &lt;li&gt;You may leave the old App ID with non-team ID prefix&lt;/li&gt;
  &lt;li&gt;Re-create all the provisioning profiles with the new App ID&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Note: The “new App ID” can have the same app identifier string eg. “com.just2us.app”. You won’t want to change this because if an app identifier is changed, it is a new app on App Store!&lt;/p&gt;

&lt;p&gt;I didn’t migrate, and stick to using my old App ID, since it is not critical for me app to share keychain with my other apps. If I need to share data, there are other ways such as &lt;a href=&quot;https://developer.apple.com/documentation/security/keychain_services/keychain_items/sharing_access_to_keychain_items_among_a_collection_of_apps&quot;&gt;app access group&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If I really want to migrate, I will need 1 update to migrate out of the keychain (to &lt;code class=&quot;highlighter-rouge&quot;&gt;UserDefaults&lt;/code&gt; or persist on file), wait for a few years to make sure most users did migrate.. then another update to migrate to the new keychain.&lt;/p&gt;
</description>
        <pubDate>Thu, 20 Sep 2018 09:46:27 +0800</pubDate>
        <link>https://samwize.com/2018/09/20/pitfall-on-app-id-prefixes-legacy/</link>
        <guid isPermaLink="true">https://samwize.com/2018/09/20/pitfall-on-app-id-prefixes-legacy/</guid>
        
        
        <category>Certs</category>
        
      </item>
    
      <item>
        <title>Modern Guide to Core Data 2018</title>
        <description>&lt;p&gt;Core Data has been around for 10 years, with many legacy concepts and APIs. This guide is the modern way to use Core Data, until further WWDC updates :)&lt;/p&gt;

&lt;p&gt;If you are interested in the history of how we got here, the last section has the long history, describing the 3rd party stacks and libraries, and issues.&lt;/p&gt;

&lt;p&gt;The technology has since improved much. In this guide, I will use show what a modern developer should use.&lt;/p&gt;

&lt;h2 id=&quot;create-the-database&quot;&gt;Create the database&lt;/h2&gt;

&lt;p&gt;Use &lt;a href=&quot;https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/CoreData/KeyConcepts.html&quot;&gt;Xcode&lt;/a&gt; to create the model schema. In this guide, the data model name (the .xcdatamodeld file) is “MyDataModel”.&lt;/p&gt;

&lt;p&gt;When editing the entity, leave the entity name and class name the &lt;strong&gt;same&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Set &lt;strong&gt;Codegen&lt;/strong&gt; to &lt;strong&gt;Class Definition&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Throughout this guide, we will use the following Note model as example:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;@objc(Note)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Note&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSManagedObject&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Note&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;@NSManaged&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;@NSManaged&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;priority&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There is also a generated &lt;code class=&quot;highlighter-rouge&quot;&gt;fetchRequest&lt;/code&gt; with the Note type, which I have omitted above, but you should not remove in your code.&lt;/p&gt;

&lt;h2 id=&quot;setup-the-stack&quot;&gt;Setup the stack&lt;/h2&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;DB&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;DB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSPersistentContainer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;/// Call this once in `applicationDidFinishLaunching`&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;dataModelName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;container&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSPersistentContainer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataModelName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;container&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loadPersistentStores&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;fatalError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Unable to load persistent stores: &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We create a singleton class &lt;code class=&quot;highlighter-rouge&quot;&gt;DB.default&lt;/code&gt; which we will use throughout the app. The &lt;code class=&quot;highlighter-rouge&quot;&gt;setup&lt;/code&gt; must be run when the application is launched, with “MyDataModel” name.&lt;/p&gt;

&lt;p&gt;It will crash if there is error – and yes, you want it to crash because most apps cannot continue without a working database.&lt;/p&gt;

&lt;p&gt;If you have an advanced/unconventional use case, &lt;a href=&quot;https://developer.apple.com/documentation/coredata/nspersistentcontainer&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NSPersistentContainer&lt;/code&gt;&lt;/a&gt; has other inits that will allow you to customize the data model to load, and configure the persistent store.&lt;/p&gt;

&lt;h2 id=&quot;crud&quot;&gt;CRUD&lt;/h2&gt;

&lt;h3 id=&quot;create-aka-save&quot;&gt;Create (aka save)&lt;/h3&gt;

&lt;p&gt;The steps in essence:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Perform everything in a block with background context&lt;/li&gt;
  &lt;li&gt;Create a new Note (&lt;code class=&quot;highlighter-rouge&quot;&gt;NSManagedObject&lt;/code&gt; object) in the context&lt;/li&gt;
  &lt;li&gt;Save the context&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;DB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;container&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;performBackgroundTask&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;note&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Note&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;note&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;note&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;priority&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;99&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try!&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is the modern way, which is much shorter than the past. If you don’t believe, take a look at &lt;a href=&quot;https://www.raywenderlich.com/353-getting-started-with-core-data-tutorial&quot;&gt;Ray Wenderlich’s&lt;/a&gt; “updated guide” in 2017, which still uses the tedious way involving &lt;code class=&quot;highlighter-rouge&quot;&gt;NSEntityDescription.entity&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;NSManagedObject(entity:insertInto:)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;What happens when a context is saved? It will &lt;a href=&quot;https://developer.apple.com/documentation/coredata/nsmanagedobjectcontext&quot;&gt;commit “one store up”&lt;/a&gt;, to either a parent context or the actual persistent store.&lt;/p&gt;

&lt;h3 id=&quot;read-aka-fetch&quot;&gt;Read (aka fetch)&lt;/h3&gt;

&lt;p&gt;The steps in essence:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Construct a fetch request (made up of predicates and sort descriptors)&lt;/li&gt;
  &lt;li&gt;Use either &lt;code class=&quot;highlighter-rouge&quot;&gt;viewContext&lt;/code&gt; (main thread) or &lt;code class=&quot;highlighter-rouge&quot;&gt;newBackgroundContext()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Call &lt;code class=&quot;highlighter-rouge&quot;&gt;fetch&lt;/code&gt; with the fetch request&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;fetchRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSFetchRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Note&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Note&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fetchRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fetchRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;predicate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fetchRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sortDescriptors&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;notes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try!&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;DB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;container&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;viewContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetchRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;notes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forEach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Learning predicate will be another topic for another day. If you want to learn, you may refer to &lt;a href=&quot;https://developer.apple.com/documentation/foundation/nspredicate&quot;&gt;the&lt;/a&gt; &lt;a href=&quot;https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Predicates/Articles/pSyntax.html&quot;&gt;documentation&lt;/a&gt;, &lt;a href=&quot;https://nshipster.com/nspredicate/&quot;&gt;guide&lt;/a&gt; and &lt;a href=&quot;https://academy.realm.io/posts/nspredicate-cheatsheet/&quot;&gt;cheatsheet&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You could also call &lt;a href=&quot;https://developer.apple.com/documentation/coredata/nsfetchrequest/1640594-execute&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;fetchRequest.execute()&lt;/code&gt;&lt;/a&gt; directly, which will automatically use the context associated to the current thread. Not recommended unless you are sure of the threads.&lt;/p&gt;

&lt;h3 id=&quot;update&quot;&gt;Update&lt;/h3&gt;

&lt;p&gt;Updating is simply mutating the models, then saving the context.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;DB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;container&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;performBackgroundTask&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;fetchRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSFetchRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Note&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Note&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fetchRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fetchRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;predicate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;notes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try!&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetchRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;note&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;notes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;note&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;This is the first note&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try!&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The example above fetch notes in the background context, then mutate the first note and save.&lt;/p&gt;

&lt;h3 id=&quot;delete&quot;&gt;Delete&lt;/h3&gt;

&lt;p&gt;Once again, use context to &lt;code class=&quot;highlighter-rouge&quot;&gt;delete&lt;/code&gt; then &lt;code class=&quot;highlighter-rouge&quot;&gt;save&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;DB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;container&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;performBackgroundTask&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;note&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try!&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note that if you need to delete all notes, you need to fetch all of them and calling delete for each. This is inefficient since you would need to load all the models, which is unnecessary in a delete. You could set &lt;code class=&quot;highlighter-rouge&quot;&gt;includesPropertyValues&lt;/code&gt; to false in the fetch request. Another way is to use &lt;a href=&quot;https://developer.apple.com/documentation/coredata/batch_processing&quot;&gt;batch processing&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;dealing-with-concurrency&quot;&gt;Dealing with concurrency&lt;/h2&gt;

&lt;p&gt;The introduction of &lt;code class=&quot;highlighter-rouge&quot;&gt;NSPersistentContainer&lt;/code&gt; simplified Core Data framework, by making developer choose between these two contexts:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;viewContext&lt;/code&gt; is on main thread&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;newBackgroundContext()&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;performBackgroundTask&lt;/code&gt; is on background thread&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/images/core-data-container.png&quot; alt=&quot;Container and contexts&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The parent of both &lt;code class=&quot;highlighter-rouge&quot;&gt;viewContext&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;newBackgroundContext()&lt;/code&gt; is the persistent store. As said before, when you save a context, it will commit to the parent.&lt;/p&gt;

&lt;p&gt;When you save a background context, it will save to the persistent store, but it will NOT merge to the main context.&lt;/p&gt;

&lt;p&gt;Often you would want your main context to reflect changes. To do &lt;a href=&quot;https://stackoverflow.com/q/39348729/242682&quot;&gt;that&lt;/a&gt;, you have to configure &lt;code class=&quot;highlighter-rouge&quot;&gt;viewContext&lt;/code&gt; when setting up your database:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;container&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;viewContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;automaticallyMergesChangesFromParent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you perform save concurrently in multiple contexts, you could have merge conflicts. One way is to have an &lt;a href=&quot;https://stackoverflow.com/a/42745378/242682&quot;&gt;operation queue&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;What happens to existing fetched objects when a merge happens? They are not affected. You need to refresh the changes by executing the fetch again.&lt;/p&gt;

&lt;p&gt;How to know a context has changes? Observe posted notifications such as &lt;a href=&quot;https://developer.apple.com/documentation/foundation/nsnotification/name/1506380-nsmanagedobjectcontextdidsave&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NSManagedObjectContextDidSave&lt;/code&gt;&lt;/a&gt; and deal with the inserted, updated and deleted objects.&lt;/p&gt;

&lt;h2 id=&quot;what-is-read-only-viewcontext&quot;&gt;What is read-only &lt;code class=&quot;highlighter-rouge&quot;&gt;viewContext&lt;/code&gt;?&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;viewContext&lt;/code&gt; is a &lt;a href=&quot;https://developer.apple.com/documentation/coredata/nspersistentcontainer/1640622-viewcontext&quot;&gt;READ-only property&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You might be misguided to think it means that the context can only read, and &lt;em&gt;cannot write, insert or save&lt;/em&gt;. Wrong! The read-only simply means the property cannot be set.&lt;/p&gt;

&lt;p&gt;You can run &lt;code class=&quot;highlighter-rouge&quot;&gt;viewContext.save&lt;/code&gt;, which will save the context on main thread. If you do so, just ensure that you are not running a very long operation otherwise the main thread will be blocked.&lt;/p&gt;

&lt;h2 id=&quot;pitfall-faults&quot;&gt;Pitfall: Faults&lt;/h2&gt;

&lt;p&gt;When you fetch models, sometimes there will be faults.&lt;/p&gt;

&lt;p&gt;Faults are “unrealized objects”, designed to make Core Data efficient by avoiding needless fetching, until needed.&lt;/p&gt;

&lt;p&gt;Faults are automatically resolved (fetched) when you access the property.&lt;/p&gt;

&lt;p&gt;But if the “unrealized object” is somehow deleted, crash could occur. The simple configuration below makes those faults nil instead.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shouldDeleteInaccessibleFaults&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;query-generation&quot;&gt;Query Generation&lt;/h2&gt;

&lt;p&gt;A good time now to get to know this new feature in iOS 10 that prevents faults and crashes. Read this &lt;a href=&quot;https://cocoacasts.com/what-are-core-data-query-generations/&quot;&gt;guide&lt;/a&gt; and watch &lt;a href=&quot;https://developer.apple.com/videos/play/wwdc2016/242/&quot;&gt;WWDC 2016&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In essence, each context is pinned to a snapshot of the database.&lt;/p&gt;

&lt;p&gt;By default, context are unpinned. You can start pinning with:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;queryGenerationToken&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setQueryGenerationFrom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;At some point in time, you could move to the latest snapshot with &lt;code class=&quot;highlighter-rouge&quot;&gt;NSQueryGenerationToken.current&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;other-topics&quot;&gt;Other topics&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/documentation/coredata/nsfetchedresultscontroller&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NSFetchedResultsController&lt;/code&gt;&lt;/a&gt; manage the results of a fetch request, including changes to the objects in the context! A big topic so I leave in to another day. For now, you can read my &lt;a href=&quot;/2015/10/27/implementing-nsfetchedresultscontroller-in-swift/&quot;&gt;2015 guide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/CoreDataVersioning/Articles/Introduction.html&quot;&gt;Migration&lt;/a&gt; is unavoidable in app upgrade.&lt;/p&gt;

&lt;h2 id=&quot;back-to-the-history&quot;&gt;Back to the history..&lt;/h2&gt;

&lt;p&gt;I use Core Data way back in 2009 when iOS was first launch.&lt;/p&gt;

&lt;p&gt;Why use Core Data at all? Because with Core Data API you can &lt;strong&gt;avoid writing SQL statements&lt;/strong&gt;. That is the biggest benefit. A modern way to write database code.&lt;/p&gt;

&lt;p&gt;But there are still lots of pain with this piece of Apple technology.&lt;/p&gt;

&lt;p&gt;Over 10 years, it did improve, though some updates are long overdue considering it is a vital piece in the iOS/macOS stack.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;2009: Core Data in iOS 3&lt;/li&gt;
  &lt;li&gt;2010: &lt;a href=&quot;https://github.com/magicalpanda/MagicalRecord&quot;&gt;MagicalRecord&lt;/a&gt; is THE wrapper, was in Objective-C, but now dormant.&lt;/li&gt;
  &lt;li&gt;2010: &lt;a href=&quot;https://github.com/rentzsch/mogenerator&quot;&gt;mogenerator&lt;/a&gt; is the third party model generator&lt;/li&gt;
  &lt;li&gt;2015: &lt;a href=&quot;https://github.com/JohnEstropia/CoreStore&quot;&gt;CoreStore&lt;/a&gt; is in Swift and still updated, but might not be using the latest concepts&lt;/li&gt;
  &lt;li&gt;2016: Biggest new set of features announced, including &lt;code class=&quot;highlighter-rouge&quot;&gt;NSPersistContainer&lt;/code&gt; and much less verbose API&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Back in the days.. my stack is to use &lt;a href=&quot;https://samwize.com/2014/03/27/step-by-step-guide-to-using-magicalrecord-and-mogenerator/&quot;&gt;MagicalRecord + mogenerator&lt;/a&gt;. There &lt;a href=&quot;/2013/09/03/where-to-store-coredata-sqlite-file-and-avoid-apple-app-review-rejection/&quot;&gt;are&lt;/a&gt; &lt;a href=&quot;/2015/06/02/pitfall-creating-parent-slash-abstract-entitiy-in-core-data/&quot;&gt;many&lt;/a&gt; &lt;a href=&quot;/2014/07/04/the-rules-for-using-external-storage-in-core-data/&quot;&gt;pitfalls&lt;/a&gt; eg. &lt;a href=&quot;/2016/04/26/pitfall-handling-core-data-nsmanagedobjectcontext-in-threads/&quot;&gt;concurrency in managed object context&lt;/a&gt;, &lt;a href=&quot;/2014/07/14/error-coredata-could-not-fulfill-a-fault-nsobjectinaccessibleexception/&quot;&gt;faults&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But Apple has fixed some quirks, at last.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&quot;https://developer.apple.com/videos/play/wwdc2016/242/&quot;&gt;WDDC 2016&lt;/a&gt;, Apple has a pivotal release with the concept of &lt;code class=&quot;highlighter-rouge&quot;&gt;NSPersistContainer&lt;/code&gt;, wrapping the creation of a database stack, and using that same container to access either a main context or a background context.&lt;/p&gt;

&lt;p&gt;The managed object class generation is built in, with those sensible methods such as &lt;code class=&quot;highlighter-rouge&quot;&gt;entity()&lt;/code&gt;. The use of Swift generic make type casting unnecessary.&lt;/p&gt;

&lt;p&gt;Suddenly, Core Data seems much nicer to play with.&lt;/p&gt;

&lt;p&gt;Yet there are more that can be improved.&lt;/p&gt;
</description>
        <pubDate>Sat, 01 Sep 2018 13:25:29 +0800</pubDate>
        <link>https://samwize.com/2018/09/01/modern-guide-to-core-data-2018/</link>
        <guid isPermaLink="true">https://samwize.com/2018/09/01/modern-guide-to-core-data-2018/</guid>
        
        
        <category>Database</category>
        
      </item>
    
      <item>
        <title>How stringsdict and NSLocalizedString Works</title>
        <description>&lt;p&gt;When I wrote &lt;a href=&quot;/2014/04/10/everything-about-ios-localization/&quot;&gt;everything about iOS localization&lt;/a&gt;, I covered on &lt;strong&gt;plural support&lt;/strong&gt;, but was brief.&lt;/p&gt;

&lt;p&gt;This post I will explain the use of the powerful &lt;code class=&quot;highlighter-rouge&quot;&gt;.stringsdict&lt;/code&gt; with a simple use, explaining the basics, then an advanced use. Lastly I will try to explain some magic under the hood.&lt;/p&gt;

&lt;h2 id=&quot;simple-case&quot;&gt;Simple Case&lt;/h2&gt;

&lt;p&gt;It is easier to use an example and explain.&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;plist&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;version=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1.0&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;dict&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;%d file(s) are selected&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;dict&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;NSStringLocalizedFormatKey&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;%#@num_files_are@ selected&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;num_files_are&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;dict&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;NSStringFormatSpecTypeKey&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;NSStringPluralRuleType&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;NSStringFormatValueTypeKey&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;d&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;zero&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;No file is&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;one&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;A file is&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;other&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;%d files are&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dict&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dict&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dict&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/plist&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The code to use:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;numberOfFiles&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;format&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSLocalizedString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%d file(s) are selected&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;comment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;localizedString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numberOfFiles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There are 2 distinct calls here:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;You need to get the “format” using the macro &lt;code class=&quot;highlighter-rouge&quot;&gt;NSLocalizedString&lt;/code&gt;. In the code above, the variable format will be &lt;code class=&quot;highlighter-rouge&quot;&gt;%#@num_files_are@ selected&lt;/code&gt;. Note: This is not yet localized, unlike the usual localization!&lt;/li&gt;
  &lt;li&gt;Init &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt; with this format and the actual arguments, and you will get the localized string.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Basics of the XML:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;%d file(s) are selected&lt;/code&gt; is simply a key to refer to this 1 string to localize. But it is NOT necessary to have the &lt;code class=&quot;highlighter-rouge&quot;&gt;%d&lt;/code&gt; in the key. You can rename the key as eg &lt;code class=&quot;highlighter-rouge&quot;&gt;files&lt;/code&gt; and it will work. Having the &lt;code class=&quot;highlighter-rouge&quot;&gt;%d&lt;/code&gt; is more of a good convention, telling us 1 number should be provided as an argument.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;%#@num_files_are@ selected&lt;/code&gt; is known as a &lt;strong&gt;format&lt;/strong&gt;, which is made up of 1 &lt;strong&gt;variable&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;num_files_are&lt;/code&gt; and the text “ selected”.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;num_files_are&lt;/code&gt; is a key (to the variable) with a dict to explain the &lt;strong&gt;rules&lt;/strong&gt;:
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NSStringPluralRuleType&lt;/code&gt; is plural rules (there could be &lt;a href=&quot;https://developer.apple.com/library/archive/documentation/MacOSX/Conceptual/BPInternational/StringsdictFileFormat/StringsdictFileFormat.html&quot;&gt;others&lt;/a&gt; in the future)&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NSStringFormatValueTypeKey&lt;/code&gt; describe what type of argument works with this variable eg. &lt;code class=&quot;highlighter-rouge&quot;&gt;d&lt;/code&gt; for &lt;code class=&quot;highlighter-rouge&quot;&gt;Int&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;zero&lt;/code&gt; is a rule. When the argument is 0, it will use “No file is” to replace the variable &lt;code class=&quot;highlighter-rouge&quot;&gt;num_files_are&lt;/code&gt;, therefore finally forming “No file is selected”&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;one&lt;/code&gt; is another rule&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;other&lt;/code&gt; is another rule. This time, it will use “%d files are”, and the argument is used here, finally forming eg. “2 files are selected”&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/stringsdict-explained-basic.jpg&quot; alt=&quot;stringsdict explained&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;advanced-case&quot;&gt;Advanced Case&lt;/h2&gt;

&lt;p&gt;I like the example used in &lt;a href=&quot;https://www.objc.io/issues/9-strings/string-localization/#localized-format-strings&quot;&gt;objc.io&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;plist&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;version=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1.0&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;dict&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;scope.%lu out of %lu runs&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;dict&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;NSStringLocalizedFormatKey&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;%1$#@lu_completed_runs@&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;lu_completed_runs&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;dict&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;NSStringFormatSpecTypeKey&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;NSStringPluralRuleType&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;NSStringFormatValueTypeKey&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;lu&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;zero&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;No runs completed yet&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;one&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;One %2$#@lu_total_runs@&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;other&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;%lu %2$#@lu_total_runs@&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dict&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;lu_total_runs&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;dict&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;NSStringFormatSpecTypeKey&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;NSStringPluralRuleType&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;NSStringFormatValueTypeKey&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;lu&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;one&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;run completed&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;other&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;of %lu runs completed&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dict&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dict&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dict&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/plist&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The localized string requires 2 arguments:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;completedRuns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;totalRuns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;format&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSLocalizedString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;scope.%lu out of %lu runs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;comment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;completedRuns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;totalRuns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s look at the output first.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Completed runs    Total Runs    Output
------------------------------------------------------------------
0                 0+            No runs completed yet
1                 1             One run completed
1                 2+            One of x runs completed
2+                2+            x of y runs completed
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It is an advanced use because the output depends on both the arguments.&lt;/p&gt;

&lt;p&gt;The biggest difference is that this time, there are 2 variables, each with their set of rules, and one variable refer to another!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/stringsdict-explained-advanced.jpg&quot; alt=&quot;Advanced stringsdict&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The format is &lt;code class=&quot;highlighter-rouge&quot;&gt;%1$#@lu_completed_runs@&lt;/code&gt;, which uses 1 variable &lt;code class=&quot;highlighter-rouge&quot;&gt;lu_completed_runs&lt;/code&gt; (yes, just 1 variable in the format is okay), and that it is the first argument as specified by the &lt;code class=&quot;highlighter-rouge&quot;&gt;1$&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;In some of the rules for &lt;code class=&quot;highlighter-rouge&quot;&gt;lu_completed_runs&lt;/code&gt;, it uses a &lt;strong&gt;format&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;%2$#@lu_total_runs@&lt;/code&gt;, which uses another variable &lt;code class=&quot;highlighter-rouge&quot;&gt;lu_total_runs&lt;/code&gt;. This variable is the 2nd argument as specified by the &lt;code class=&quot;highlighter-rouge&quot;&gt;2$&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;The rules in &lt;code class=&quot;highlighter-rouge&quot;&gt;lu_total_runs&lt;/code&gt; will produce part of the text for &lt;code class=&quot;highlighter-rouge&quot;&gt;lu_completed_runs&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There is some recursive lookup going on :)&lt;/p&gt;

&lt;h2 id=&quot;the-puzzling-string&quot;&gt;The Puzzling String&lt;/h2&gt;

&lt;p&gt;Let’s look at the simple case again to explain something strange that goes on.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;format&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSLocalizedString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%d file(s) are selected&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;comment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// format is &quot;%#@num_files_are@ selected&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// str is &quot;1 file is selected&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you have been using &lt;a href=&quot;https://developer.apple.com/documentation/swift/string/1417691-init&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;String(format:_:)&lt;/code&gt;&lt;/a&gt;, you know it can format the string and replace with the arguments.&lt;/p&gt;

&lt;p&gt;But it is hard to digest for the format &lt;code class=&quot;highlighter-rouge&quot;&gt;%#@num_files_are@ selected&lt;/code&gt;, a mere string.. How does a &lt;strong&gt;mere string&lt;/strong&gt; have access to the rules in stringsdict?&lt;/p&gt;

&lt;p&gt;The string &lt;code class=&quot;highlighter-rouge&quot;&gt;%#@num_files_are@ selected&lt;/code&gt; is not a mere string. It knows the rules, for a particular locale.&lt;/p&gt;

&lt;p&gt;Try this and it will NOT work:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// let format = NSLocalizedString(&quot;%d file(s) are selected&quot;, comment: &quot;&quot;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;format&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;%#@num_files_are@ selected&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This proves that the macro &lt;code class=&quot;highlighter-rouge&quot;&gt;NSLocalizedString&lt;/code&gt;, which return a &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt; via &lt;a href=&quot;https://github.com/apple/swift-corelibs-foundation/blob/master/Foundation/NSString.swift&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Bundle.localizedString&lt;/code&gt;&lt;/a&gt;, is not a pure string.&lt;/p&gt;

&lt;p&gt;I am puzzled and I hope someone can explain.&lt;/p&gt;

&lt;p&gt;I can see  &lt;a href=&quot;https://github.com/apple/swift-corelibs-foundation/blob/master/Foundation/NSString.swift&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NSString&lt;/code&gt;&lt;/a&gt; use &lt;code class=&quot;highlighter-rouge&quot;&gt;CFStringCreateWithFormatAndArguments&lt;/code&gt;. In &lt;a href=&quot;https://github.com/apple/swift-corelibs-foundation/blob/3a3da5261da739a20177d2438239143887889ac6/CoreFoundation/String.subproj/CFString.c&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CFString&lt;/code&gt;&lt;/a&gt;, it mentions &lt;code class=&quot;highlighter-rouge&quot;&gt;stringsDictConfig&lt;/code&gt;. It seems like the system refer to this dictionary to look up the rules and format the final string.&lt;/p&gt;
</description>
        <pubDate>Thu, 19 Jul 2018 13:26:11 +0800</pubDate>
        <link>https://samwize.com/2018/07/19/how-stringsdict-and-nslocalizedstring-works/</link>
        <guid isPermaLink="true">https://samwize.com/2018/07/19/how-stringsdict-and-nslocalizedstring-works/</guid>
        
        
      </item>
    
      <item>
        <title>Schedule Cron Jobs on Mac With Crontab</title>
        <description>&lt;p&gt;I introduced &lt;code class=&quot;highlighter-rouge&quot;&gt;sleep&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;gtimeout&lt;/code&gt; in my post on &lt;a href=&quot;/2017/01/02/handy-bash-commands/&quot;&gt;some nice bash commands&lt;/a&gt; available in macOS.&lt;/p&gt;

&lt;p&gt;The advanced way of scheduling job is to run cron jobs.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.adminschoice.com/crontab-quick-reference&quot;&gt;Crontab&lt;/a&gt; sets up cron jobs and runs them at specific time, and repeatedly.&lt;/p&gt;

&lt;p&gt;One frequent use case I have is to schedule my computer to download live youtube streams at wee hours, using &lt;a href=&quot;https://github.com/streamlink/streamlink&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;streamlink&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;basic-cron-job&quot;&gt;Basic Cron Job&lt;/h2&gt;

&lt;p&gt;To edit the cron jobs, run:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;env EDITOR=nano crontab -e
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We use nano text editor as that is easier. You need to save and exit the editor every time you finish editing it.&lt;/p&gt;

&lt;p&gt;Enter a line of text, representing a cron job, like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;59 23 * * * cd ~/Documents &amp;amp;&amp;amp; /usr/local/bin/streamlink https://www.youtube.com/watch\?v\=y3oW28Draso best &amp;gt;/tmp/stdout.log 2&amp;gt;/tmp/stderr.log
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This long line:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;runs the command on 23:59 every day&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cd&lt;/code&gt; to a directory&lt;/li&gt;
  &lt;li&gt;then run the &lt;code class=&quot;highlighter-rouge&quot;&gt;streamlink&lt;/code&gt; command, with full path to the command because cron is run without knowing the env var &lt;code class=&quot;highlighter-rouge&quot;&gt;PATH&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;writes the output to /tmp/stdout.log and error to /tmp/stderr.log&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;use-a-script&quot;&gt;Use a script&lt;/h2&gt;

&lt;p&gt;To keep things tidy in crontab, I will often write the commands in a script eg “job.sh” in ~/Documents.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd ~/Documents
touch job.sh
chmod +x job.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The content of “job.sh”:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/go/bin

&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/Documents

&lt;span class=&quot;nv&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;date &lt;span class=&quot;s2&quot;&gt;&quot;+%Y-%m-%d %H%M&quot;&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;

streamlink &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$now&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.ts&quot;&lt;/span&gt; https://www.youtube.com/watch&lt;span class=&quot;se&quot;&gt;\?&lt;/span&gt;v&lt;span class=&quot;se&quot;&gt;\=&lt;/span&gt;9kVxPmh8eSQ best
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;set the &lt;code class=&quot;highlighter-rouge&quot;&gt;PATH&lt;/code&gt; env var, so that all common executables are available&lt;/li&gt;
  &lt;li&gt;use &lt;code class=&quot;highlighter-rouge&quot;&gt;date&lt;/code&gt; for the file name eg. “2018-07-07 0810.ts”&lt;/li&gt;
  &lt;li&gt;calls &lt;code class=&quot;highlighter-rouge&quot;&gt;streamlink&lt;/code&gt; to download live youtube stream&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then in crontab, each job is simplified to just running the script.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;59 23 * * * ~/Documents/job.sh &amp;gt;/tmp/stdout.log 2&amp;gt;/tmp/stderr.log
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;other-tips&quot;&gt;Other Tips&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# List the processes with name streamlink
ps aux | grep streamlink

# Kill the process with the id eg. 26959
kill -9 26959

# Kill all streamlink processes in 1 command:
ps aux | grep streamlink | awk '{print $2}' | xargs kill -9
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Sat, 07 Jul 2018 04:42:30 +0800</pubDate>
        <link>https://samwize.com/2018/07/07/schedule-cron-jobs-on-mac-with-crontab/</link>
        <guid isPermaLink="true">https://samwize.com/2018/07/07/schedule-cron-jobs-on-mac-with-crontab/</guid>
        
        
      </item>
    
      <item>
        <title>Creating a Private Framework With Carthage</title>
        <description>&lt;h2 id=&quot;install&quot;&gt;Install&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew install carthage
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;create-a-xcode-project&quot;&gt;Create a Xcode Project&lt;/h2&gt;

&lt;p&gt;In Xcode, create a new framework project with &lt;strong&gt;File &amp;gt; New &amp;gt; Project &amp;gt; Cocoa Touch Framework&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;With the project created, click on &lt;strong&gt;Product &amp;gt; Scheme &amp;gt; Manage&lt;/strong&gt; and make sure the &lt;strong&gt;Shared&lt;/strong&gt; checkbox is enabled.&lt;/p&gt;

&lt;p&gt;You will probably want to configure your framework’s target under &lt;strong&gt;General&lt;/strong&gt;. Change the name, version, and especially the &lt;strong&gt;(minimum) Deployment Target&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;It is a good time to initialize git with &lt;code class=&quot;highlighter-rouge&quot;&gt;git init&lt;/code&gt; and do your first commit.&lt;/p&gt;

&lt;h2 id=&quot;add-your-source&quot;&gt;Add your source&lt;/h2&gt;

&lt;p&gt;This is where you add your source files and assets. Make sure they are added to the framework’s target.&lt;/p&gt;

&lt;p&gt;If you use any other external frameworks, make sure they are added under the target’s &lt;strong&gt;General &amp;gt; Linked Frameworks and Libraries&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;add-a-sample-project&quot;&gt;Add a sample project&lt;/h2&gt;

&lt;p&gt;You will most likely create a sample project to showcase how the framework is to be used.&lt;/p&gt;

&lt;p&gt;Go to &lt;strong&gt;File &amp;gt; New &amp;gt; Target&lt;/strong&gt; and choose a suitable one eg. iOS Single View App&lt;/p&gt;

&lt;p&gt;Select the target, and under &lt;strong&gt;Build Phases &amp;gt; Target Dependencies&lt;/strong&gt;, add your framework.&lt;/p&gt;

&lt;h2 id=&quot;build&quot;&gt;Build&lt;/h2&gt;

&lt;p&gt;Build the framework with carthage,&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;carthage build --no-skip-current
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The command will build and output the framework in the &lt;code class=&quot;highlighter-rouge&quot;&gt;Carthage&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;Git tag and push now to publish.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git tag &quot;v1.0.0&quot;
git push --tags
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That’t it for publishing your own framework!&lt;/p&gt;

&lt;p&gt;This tutorial actually does not restrict to only private. If your git repository is public, then you have a public framework :)&lt;/p&gt;

&lt;h2 id=&quot;using-the-framework&quot;&gt;Using the framework&lt;/h2&gt;

&lt;p&gt;There are many tutorials on how to use Carthage to install dependency frameworks. I will keep this short.&lt;/p&gt;

&lt;p&gt;App that wants to use the framework can add to their &lt;a href=&quot;https://github.com/Carthage/Carthage/blob/master/Documentation/Artifacts.md#cartfile&quot;&gt;Cartfile&lt;/a&gt; with the repository URL (HTTP or SSH), and version (or tag), like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git &quot;git@bitbucket.org:just2us/MyFramework.git&quot; ~&amp;gt; 0.0.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then run &lt;code class=&quot;highlighter-rouge&quot;&gt;carthage update&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Unlike Cocoapods, Carthage needs a few more steps to manually &lt;a href=&quot;https://github.com/Carthage/Carthage#adding-frameworks-to-an-application&quot;&gt;add the frameworks to Xcode&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Drag &lt;strong&gt;Carthage/Build/iOS/MyFramework.framework&lt;/strong&gt; into your application target’s &lt;strong&gt;General &amp;gt; Linked Frameworks and Libraries&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Add a &lt;strong&gt;New Run Script Phase&lt;/strong&gt; for the application target’s Build Phases with&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/usr/local/bin/carthage copy-frameworks
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the same run script, add the &lt;strong&gt;Input Files&lt;/strong&gt;,&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$(SRCROOT)/Carthage/Build/iOS/MyFramework.framework
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And the &lt;strong&gt;Output Files&lt;/strong&gt;,&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$(BUILT_PRODUCTS_DIR)/$(FRAMEWORKS_FOLDER_PATH)/MyFramework.framework
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When you add a new dependency, run &lt;code class=&quot;highlighter-rouge&quot;&gt;carthage update&lt;/code&gt; again, and repeat those manual setup steps.&lt;/p&gt;

&lt;p&gt;You might also want to have dependencies for your test targets, in which you can read &lt;a href=&quot;https://github.com/Carthage/Carthage#adding-frameworks-to-unit-tests-or-a-framework&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Wed, 27 Jun 2018 12:12:15 +0800</pubDate>
        <link>https://samwize.com/2018/06/27/creating-a-private-framework-with-carthage/</link>
        <guid isPermaLink="true">https://samwize.com/2018/06/27/creating-a-private-framework-with-carthage/</guid>
        
        
        <category>Carthage</category>
        
      </item>
    
      <item>
        <title>Set Up Your Own VPN Server With $5</title>
        <description>&lt;p&gt;This is a very cheap way to run your dedicated VPN server, with $5/month on &lt;a href=&quot;https://m.do.co/c/69baaaf5a07b&quot;&gt;DigitalOcean&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;1-sign-up-digitalocean&quot;&gt;1. Sign Up DigitalOcean&lt;/h2&gt;

&lt;p&gt;I have been using Digital Ocean for a long time and highly recommend it when you need a dedicated server.&lt;/p&gt;

&lt;p&gt;Sign up DigitalOcean with my &lt;a href=&quot;https://m.do.co/c/69baaaf5a07b&quot;&gt;referral link&lt;/a&gt;, and get &lt;strong&gt;FREE $10 (that’s 2 months!)&lt;/strong&gt; to start with.&lt;/p&gt;

&lt;p&gt;When you do not need the VPN server any longer, you may shut it down anytime, and you won’t incur a thing.&lt;/p&gt;

&lt;h2 id=&quot;2-setup-for-ssh&quot;&gt;2. Setup for SSH&lt;/h2&gt;

&lt;p&gt;Before you create your droplet, you must setup your computer for ssh-ing later on.&lt;/p&gt;

&lt;p&gt;If you have never setup your RSA key pair, then you will have to run &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh-keygen&lt;/code&gt; first.&lt;/p&gt;

&lt;p&gt;Copy the public key,&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cat ~/.ssh/id_rsa.pub|pbcopy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then paste that in DigitalOcean &amp;gt; Settings &amp;gt; Security &amp;gt; Add SSH Key.&lt;/p&gt;

&lt;h2 id=&quot;3-create-droplet-the-server&quot;&gt;3. Create Droplet (the server)&lt;/h2&gt;

&lt;p&gt;Create &amp;gt; Droplets &amp;gt; One-click apps &amp;gt; Docker 17.12.0 on 16.04 (latest version might differ)&lt;/p&gt;

&lt;p&gt;Choose the cheapest $5/month droplet size, with 1 GB memory etc.&lt;/p&gt;

&lt;p&gt;Choose the datacenter region which you want to VPN to eg. Singapore&lt;/p&gt;

&lt;p&gt;Create a hostname eg. sg-vpn&lt;/p&gt;

&lt;p&gt;Note down the IP for your droplet (the ipv4). My example uses 111.111.111.111.&lt;/p&gt;

&lt;h2 id=&quot;4-install-openvpn&quot;&gt;4. Install OpenVPN&lt;/h2&gt;

&lt;p&gt;Now we get into the server and install the VPN service.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssh root@111.111.111.111
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you have trouble SSH in, make sure you setup your SSH keys in step 2 (will need to recreate droplet).&lt;/p&gt;

&lt;p&gt;Run these docker commands, enter a PEM pass phrase when prompted (mandatory). Give a Common Name eg. “sg-vpn”.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;OVPN_DATA=&quot;ovpn-data&quot;
docker run -v $OVPN_DATA:/etc/openvpn --rm kylemanna/openvpn ovpn_genconfig -u udp://111.111.111.111
docker run -v $OVPN_DATA:/etc/openvpn --rm -it kylemanna/openvpn ovpn_initpki
docker run -v $OVPN_DATA:/etc/openvpn -d -p 1194:1194/udp --cap-add=NET_ADMIN kylemanna/openvpn
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next, generate the ovpn file – a configuration that your computer can import later. In the example I have “sg-vpn.ovpn”.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run -v $OVPN_DATA:/etc/openvpn --rm -it kylemanna/openvpn easyrsa build-client-full user1 nopass
docker run -v $OVPN_DATA:/etc/openvpn --rm kylemanna/openvpn ovpn_getclient user1 &amp;gt; sg-vpn.ovpn
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We need to now exit ssh remote and go back to your computer.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;exit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;5-install-tunnelblick&quot;&gt;5. Install TunnelBlick&lt;/h2&gt;

&lt;p&gt;On your computer, download the ovpn file using scp.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# This copy the ovpn file (in /root) to the current directory you're in
scp -r root@111.111.111.111:/root/sg-vpn.ovpn .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Install &lt;a href=&quot;https://tunnelblick.net&quot;&gt;TunnelBlick&lt;/a&gt;, a VPN client. You may use others.&lt;/p&gt;

&lt;p&gt;Open or import the ovpn file, and enjoy your VPN (:&lt;/p&gt;

&lt;h2 id=&quot;optional-multiple-users&quot;&gt;(Optional) Multiple Users&lt;/h2&gt;

&lt;p&gt;The steps above generates for a single user/device.&lt;/p&gt;

&lt;p&gt;To support multiple device, repeat these steps:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# ssh to the machine and create for user2, and more
OVPN_DATA=&quot;ovpn-data&quot;
docker run -v $OVPN_DATA:/etc/openvpn --rm -it kylemanna/openvpn easyrsa build-client-full user2 nopass
docker run -v $OVPN_DATA:/etc/openvpn --rm kylemanna/openvpn ovpn_getclient user2 &amp;gt; sg-vpn-user2.ovpn

# On local computer
scp -r root@111.111.111.111:/root/sg-vpn-user2.ovpn .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;optional-running-on-custom-port&quot;&gt;(Optional) Running on custom port&lt;/h2&gt;

&lt;p&gt;To use a custom UDP port 8349 (instead of default 1194), replace with the following 3 lines:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run -v $OVPN_DATA:/etc/openvpn --rm kylemanna/openvpn ovpn_genconfig -u udp://111.111.111.111:8349
docker run -v $OVPN_DATA:/etc/openvpn --rm -it kylemanna/openvpn ovpn_initpki
docker run -v $OVPN_DATA:/etc/openvpn -d -p 8349:1194/udp --cap-add=NET_ADMIN kylemanna/openvpn
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Mon, 04 Jun 2018 00:46:32 +0800</pubDate>
        <link>https://samwize.com/2018/06/04/steps-to-set-up-your-own-vpn-with/</link>
        <guid isPermaLink="true">https://samwize.com/2018/06/04/steps-to-set-up-your-own-vpn-with/</guid>
        
        
      </item>
    
      <item>
        <title>How my iOS Code evolved in Last 10 Years</title>
        <description>&lt;p&gt;I released my first iOS app in 2008, the year that iPhone changed the world.&lt;/p&gt;

&lt;p&gt;Recently, in time for World Cup 2018, I release v3 of the &lt;a href=&quot;http://just2us.com/sgfootball/&quot;&gt;same app&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As I rewrite the app – from Objective-C to Swift – it dawned on me how much things have changed.&lt;/p&gt;

&lt;p&gt;How much the tools have improved. How different designs and architectures are. How much my code has evolved.&lt;/p&gt;

&lt;p&gt;As I look at the code evolving from &lt;strong&gt;v1 -&amp;gt; v2 -&amp;gt; v3&lt;/strong&gt; (thanks source control), I feel like I am reading my diary. It tells my story in iOS development.&lt;/p&gt;

&lt;h2 id=&quot;v1-2008&quot;&gt;v1 (2008)&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;SVN Source Control (git not popular back then)&lt;/li&gt;
  &lt;li&gt;AppDelegate is 1,600+ lines long!&lt;/li&gt;
  &lt;li&gt;Code form is inconsistent
    &lt;ul&gt;
      &lt;li&gt;Multiple line breaks&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Commented out many code for &lt;em&gt;some&lt;/em&gt; reason&lt;/li&gt;
  &lt;li&gt;Table view cell are constructed with nibs, then configured with &lt;code class=&quot;highlighter-rouge&quot;&gt;viewWithTag&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Models are dictionaries and arrays&lt;/li&gt;
  &lt;li&gt;1 month to finish&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;v2-2014&quot;&gt;v2 (2014)&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;iOS 6 is a big change with cleaner interface&lt;/li&gt;
  &lt;li&gt;Wrote better abstraction
    &lt;ul&gt;
      &lt;li&gt;Replace &lt;code class=&quot;highlighter-rouge&quot;&gt;Type1ViewController&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Type2ViewController&lt;/code&gt;, … etc with &lt;code class=&quot;highlighter-rouge&quot;&gt;OddsViewController&lt;/code&gt;, which configure the cell according to the type&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Still Objective-C (no Swift yet)&lt;/li&gt;
  &lt;li&gt;Use of Cocoapods libraries&lt;/li&gt;
  &lt;li&gt;Use of my own private library&lt;/li&gt;
  &lt;li&gt;Storyboard&lt;/li&gt;
  &lt;li&gt;Helpful models, but with lots of mutation func&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;v3-2018&quot;&gt;v3 (2018)&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Objective-C to Swift
    &lt;ul&gt;
      &lt;li&gt;Strongly typed language eliminates many meaningless crashes.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Better namings of everything
    &lt;ul&gt;
      &lt;li&gt;Xcode can finally can refactor by renaming methods and types&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Scalable UI
    &lt;ul&gt;
      &lt;li&gt;Auto Layout for any device size or orientation&lt;/li&gt;
      &lt;li&gt;Dynamic (Font) Type&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;No more storyboard
    &lt;ul&gt;
      &lt;li&gt;All UI created by code with constraints&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Better Architecture
    &lt;ul&gt;
      &lt;li&gt;Clearer responsibilities&lt;/li&gt;
      &lt;li&gt;Reasonable dependencies&lt;/li&gt;
      &lt;li&gt;MVVM with RxSwift&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Unit Tests with API fixtures&lt;/li&gt;
  &lt;li&gt;Fastlane for managing certs, provisioning profiles, building and uploading releases&lt;/li&gt;
  &lt;li&gt;7 days to rewrite&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 01 Jun 2018 07:21:02 +0800</pubDate>
        <link>https://samwize.com/2018/06/01/evolution-of-my-code-in-last-10-years/</link>
        <guid isPermaLink="true">https://samwize.com/2018/06/01/evolution-of-my-code-in-last-10-years/</guid>
        
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>How to Download IPA Files on macOS High Sierra</title>
        <description>&lt;p&gt;macOS, or more specifially since iTunes v12.7, no longer stores the IPA files.&lt;/p&gt;

&lt;p&gt;There are a number of ways to find an app’s IPA, such as the many untrusted, dangerous sites with &lt;em&gt;their signed IPA&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Be safe, read on.&lt;/p&gt;

&lt;h2 id=&quot;1-download-apple-configurator-2&quot;&gt;1. Download Apple Configurator 2&lt;/h2&gt;

&lt;p&gt;This is Apple’s app for configuring multiple devices for schools and businesses.&lt;/p&gt;

&lt;p&gt;Download it from Mac Store &lt;a href=&quot;https://itunes.apple.com/app/id1037126344?at=11luru&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;2-sign-in&quot;&gt;2. Sign In&lt;/h2&gt;

&lt;p&gt;Go to the app &amp;gt; Account &amp;gt; Sign In using your personal iTunes account.&lt;/p&gt;

&lt;h2 id=&quot;3-update-the-apps&quot;&gt;3. Update The Apps&lt;/h2&gt;

&lt;p&gt;Go to Actions &amp;gt; Update, and select the apps to update (or all). If you have hundreds of apps to update, this process could stuck here.&lt;/p&gt;

&lt;p&gt;Another way is to go to Actions &amp;gt; Add &amp;gt; Apps &amp;gt; Select the app to install from your purchase history.&lt;/p&gt;

&lt;p&gt;After the apps are downloaded, go to step 4 immediately.&lt;/p&gt;

&lt;h2 id=&quot;4-find-in-cache-folder&quot;&gt;4. Find in cache folder&lt;/h2&gt;

&lt;p&gt;The IPAs will be here:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;~/Library/Group Containers/K36BKF7T3D.group.com.apple.configurator/Library/Caches/Assets/TemporaryItems/MobileApps&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Note that they are in a &lt;strong&gt;cache&lt;/strong&gt;, which means it will be deleted anytime, so copy it to somewhere while it is there.&lt;/p&gt;
</description>
        <pubDate>Wed, 30 May 2018 22:16:00 +0800</pubDate>
        <link>https://samwize.com/2018/05/30/how-to-download-ipa-files-on-macos-high-sierra/</link>
        <guid isPermaLink="true">https://samwize.com/2018/05/30/how-to-download-ipa-files-on-macos-high-sierra/</guid>
        
        
        <category>Tips</category>
        
      </item>
    
      <item>
        <title>Guide to Moya for API Services and Testing</title>
        <description>&lt;p&gt;Moya is a very high-level library, enforcing you to create your API services with a strict set of protocol methods. Doing so, you will automatically design API with best practices.&lt;/p&gt;

&lt;p&gt;If Moya is high-level, then Alamofire is mid-level, and URLSession is low-level.&lt;/p&gt;

&lt;p&gt;You can perfectly live without Moya, and use Alamofire directly.&lt;/p&gt;

&lt;h2 id=&quot;what-moya-does&quot;&gt;What Moya does&lt;/h2&gt;

&lt;p&gt;In essence, Moya is creating this &lt;a href=&quot;https://github.com/Moya/Moya/tree/master/docs&quot;&gt;pipeline&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/moya-pipeline.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Target is a collection of your API endpoints/service, enforced by implementing &lt;code class=&quot;highlighter-rouge&quot;&gt;TargetType&lt;/code&gt; protocol.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Endpoint&lt;/code&gt; is a semi-internal structure in Moya that you may or may not deal with.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Request&lt;/code&gt; is a Alamofire’s type, which you have to form when making network calls with Alamofire.&lt;/p&gt;

&lt;p&gt;Moya simplify your workflow such that make a request from your target’s provider.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;provider&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MoyaProvider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;MyService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;provider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;allPopularMovies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Similar to handling Alamofire result&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Read on to see how &lt;code class=&quot;highlighter-rouge&quot;&gt;MyService&lt;/code&gt; (target) is designed.&lt;/p&gt;

&lt;h2 id=&quot;designing-target&quot;&gt;Designing Target&lt;/h2&gt;

&lt;p&gt;A target is an enum, with the API as cases.&lt;/p&gt;

&lt;p&gt;Then implement the protocol &lt;code class=&quot;highlighter-rouge&quot;&gt;TargetType&lt;/code&gt;, and you will have to &lt;a href=&quot;https://github.com/Moya/Moya/blob/master/docs/Targets.md&quot;&gt;conform to 7 methods&lt;/a&gt;. The example shows for only &lt;code class=&quot;highlighter-rouge&quot;&gt;path&lt;/code&gt;, which are the endpoints for each case.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TargetType&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;allPopularMovies&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;movie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;allPopularMovies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/movies/popular&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;movie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;movieId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/movies/&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;movieId&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I will not go into details for the other 6 methods, as they are easy to understand from the method names. You can also refer to Moya’s &lt;a href=&quot;https://github.com/Moya/Moya/blob/master/docs/Examples/Basic.md&quot;&gt;basic example&lt;/a&gt; and &lt;a href=&quot;https://github.com/Moya/Moya/tree/master/docs/Examples&quot;&gt;more&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;testingstubbing&quot;&gt;Testing/Stubbing&lt;/h2&gt;

&lt;p&gt;Instead, I will discuss on unit testing with Moya.&lt;/p&gt;

&lt;p&gt;Too much stubbing is bad in testing, but for server-client API, stubbing is good because it gives:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;consistent response independent from server&lt;/li&gt;
  &lt;li&gt;immediate response&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Moya is built with &lt;a href=&quot;https://github.com/Moya/Moya/blob/master/docs/Testing.md&quot;&gt;testing&lt;/a&gt; in mind. But I didn’t like that &lt;code class=&quot;highlighter-rouge&quot;&gt;sampleData&lt;/code&gt; is a required method in &lt;code class=&quot;highlighter-rouge&quot;&gt;TargetType&lt;/code&gt; protocol.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Because if you stub there, then your production app will contain the stubs.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If stub with JSON files (aka test fixtures), then your app will have to include those files..&lt;/p&gt;

&lt;p&gt;My solution is to stub only when creating a mock provider in my &lt;strong&gt;unit tests&lt;/strong&gt;. Therefore in my Target, simply return nothing for &lt;code class=&quot;highlighter-rouge&quot;&gt;sampleData&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;sampleData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Data&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then in unit test target, set up like this:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;APITests&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;XCTestCase&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;provider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MoyaProvider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;MyService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;!&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setUp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setUp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// A mock provider with a mocking `endpointClosure` that stub immediately&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;provider&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MoyaProvider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;MyService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;endpointClosure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;customEndpointClosure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;stubClosure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MoyaProvider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;immediatelyStub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;customEndpointClosure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Endpoint&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Endpoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;absoluteString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                        &lt;span class=&quot;nv&quot;&gt;sampleResponseClosure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;networkResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testSampleData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
                        &lt;span class=&quot;nv&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                        &lt;span class=&quot;nv&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                        &lt;span class=&quot;nv&quot;&gt;httpHeaderFields&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The gist is that I create a mock provider using a custom &lt;code class=&quot;highlighter-rouge&quot;&gt;endpointClousure&lt;/code&gt;, which in the &lt;code class=&quot;highlighter-rouge&quot;&gt;sampleResponseClosure&lt;/code&gt;, I use my own &lt;code class=&quot;highlighter-rouge&quot;&gt;testSampleData&lt;/code&gt;, which is implemented with an extension in the unit test.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyService&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;testSampleData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Data&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;allPopularMovies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// Returning all-popular-movies.json&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;APITests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;forResource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;all-popular-movies&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;withExtension&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;json&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try!&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;contentsOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once again:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sampleData&lt;/code&gt; - &lt;code class=&quot;highlighter-rouge&quot;&gt;TargetType&lt;/code&gt; protocol method which we don’t utilize&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;testSampleData&lt;/code&gt; - custom extension in unit test that returns a test fixture JSON&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 23 May 2018 07:10:15 +0800</pubDate>
        <link>https://samwize.com/2018/05/23/guide-to-using-moya-for-api-services/</link>
        <guid isPermaLink="true">https://samwize.com/2018/05/23/guide-to-using-moya-for-api-services/</guid>
        
        
        <category>API</category>
        
        <category>Testing</category>
        
      </item>
    
      <item>
        <title>Photos App &amp; EXIF Location Data</title>
        <description>&lt;p&gt;Location, or any metadata, can be saved in 2 places:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;In Photos app’s database&lt;/li&gt;
  &lt;li&gt;In the jpg/heic/dng/mov files&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You WILL have to do both for an iOS app, because if you don’t, then you will lose the information along the way eg importing.&lt;/p&gt;

&lt;h2 id=&quot;1-photos-apps-database&quot;&gt;1. Photos app’s database&lt;/h2&gt;

&lt;p&gt;Let’s start with the easy one.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/documentation/photos/phassetcreationrequest&quot;&gt;PHAssetCreationRequest&lt;/a&gt; makes it very easy to add the location data to the database.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;PHPhotoLibrary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;shared&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;performChanges&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;creationRequest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PHAssetCreationRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;forAsset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;creationRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;latestLocation&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;creationRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addResource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;photo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;photoData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can also set the &lt;code class=&quot;highlighter-rouge&quot;&gt;creationDate&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;isFavorite&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;the-problem&quot;&gt;The Problem&lt;/h2&gt;

&lt;p&gt;If you do (1), but not (2), then when the photo is imported into macOS/Windows, surprisingly, even using Apple’s Photo app, metadata will be lost.&lt;/p&gt;

&lt;p&gt;When importing, only the &lt;strong&gt;metadata in the file&lt;/strong&gt; is used.&lt;/p&gt;

&lt;p&gt;So you need to write metadata to the file, and that is HARDER.&lt;/p&gt;

&lt;h2 id=&quot;2-writing-metadata-to-file&quot;&gt;2. Writing metadata to file&lt;/h2&gt;

&lt;p&gt;If you are using AVFoundation to capture photo, then it is relatively easy. There is a &lt;a href=&quot;https://developer.apple.com/documentation/avfoundation/avcapturephoto/2875953-filedatarepresentation&quot;&gt;variant of &lt;code class=&quot;highlighter-rouge&quot;&gt;fileDataRepresentation&lt;/code&gt;&lt;/a&gt; that can take in the metadata.&lt;/p&gt;

&lt;p&gt;This is what you do in the &lt;code class=&quot;highlighter-rouge&quot;&gt;AVCapturePhotoCaptureDelegate&lt;/code&gt; method:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;photoOutput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AVCapturePhotoOutput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;didFinishProcessingPhoto&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;photo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AVCapturePhoto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;metadata&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;photo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;metadata&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kCGImagePropertyGPSDictionary&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gpsMetadata&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;photoData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;photo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fileDataRepresentation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;withReplacementMetadata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;replacementEmbeddedThumbnailPhotoFormat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;photo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;embeddedThumbnailPhotoFormat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;replacementEmbeddedThumbnailPixelBuffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;replacementDepthData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;photo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;depthData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With the &lt;code class=&quot;highlighter-rouge&quot;&gt;photoData&lt;/code&gt;, you can save to file or add to Photos using &lt;code class=&quot;highlighter-rouge&quot;&gt;PHAssetCreationRequest&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;using-image-io-and-other-frameworks&quot;&gt;Using Image I/O and other frameworks&lt;/h2&gt;

&lt;p&gt;If you are not capturing photo using AVFoundation, then you don’t have the luxury of the above to get the &lt;code class=&quot;highlighter-rouge&quot;&gt;fileDataRepresentation&lt;/code&gt; along with the metadata.&lt;/p&gt;

&lt;p&gt;In that case, you have to add metadata manually to the original image data.&lt;/p&gt;

&lt;p&gt;Image I/O Framework provides methods to &lt;a href=&quot;https://developer.apple.com/library/content/qa/qa1895/_index.html&quot;&gt;Modifying Image Metadata Without Recompressing Image (QA1895)&lt;/a&gt;, using &lt;a href=&quot;https://developer.apple.com/documentation/imageio/1465189-cgimagedestinationcopyimagesourc?language=objc&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CGImageDestinationCopyImageSource&lt;/code&gt;&lt;/a&gt;, which supports JPEG, PNG, PSD, TIFF.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;options_dict&lt;/code&gt; in the sample code is the metadata dictionary.&lt;/p&gt;

&lt;p&gt;Check out S/O answers like &lt;a href=&quot;https://stackoverflow.com/a/5294574/242682&quot;&gt;this&lt;/a&gt; or &lt;a href=&quot;https://stackoverflow.com/a/43376828/242682&quot;&gt;this&lt;/a&gt; (using Core Media).&lt;/p&gt;

&lt;p&gt;Assets Library framework (deprecated) also has it’s own methods to &lt;a href=&quot;https://developer.apple.com/library/content/qa/qa1622/_index.html&quot;&gt;Accessing Image Metadata in iOS (QA1622)&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;metadata&quot;&gt;Metadata&lt;/h2&gt;

&lt;p&gt;Wonder what kind of structure is &lt;code class=&quot;highlighter-rouge&quot;&gt;metadata&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;Metadata is a dictionary of dictionaries.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/documentation/imageio/cgimageproperties&quot;&gt;CGImageProperties&lt;/a&gt; has a reference to the dictionaries you can define. For example, &lt;a href=&quot;https://developer.apple.com/documentation/imageio/cgimageproperties/gps_dictionary_keys&quot;&gt;GPS has it’s own dictionary keys&lt;/a&gt;, so does &lt;a href=&quot;https://developer.apple.com/documentation/imageio/cgimageproperties/exif_dictionary_keys&quot;&gt;EXIF&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// gpsMetadata and exifMetadata are 2 dictionaries&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kCGImagePropertyGPSDictionary&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gpsMetadata&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kCGImagePropertyExifDictionary&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exifMetadata&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There is a helper on turning &lt;code class=&quot;highlighter-rouge&quot;&gt;CLLocation&lt;/code&gt; into the &lt;a href=&quot;https://stackoverflow.com/a/5314634/242682&quot;&gt;GPS data in a dictionary&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A &lt;a href=&quot;https://gist.github.com/kwylez/a4b6ec261e52970e1fa5dd4ccfe8898f&quot;&gt;Swift extension&lt;/a&gt; is kindly available too.&lt;/p&gt;
</description>
        <pubDate>Thu, 17 May 2018 11:55:05 +0800</pubDate>
        <link>https://samwize.com/2018/05/17/photos-app-and-exif-location-data/</link>
        <guid isPermaLink="true">https://samwize.com/2018/05/17/photos-app-and-exif-location-data/</guid>
        
        
      </item>
    
  </channel>
</rss>
