<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>@samwize</title>
    <description>¯\_(ツ)_/¯
</description>
    <link>http://samwize.com/</link>
    <atom:link href="http://samwize.com/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Mon, 29 Aug 2016 11:12:44 +0800</pubDate>
    <lastBuildDate>Mon, 29 Aug 2016 11:12:44 +0800</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>Drawing Images With UIBezierPath</title>
        <description>&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/library/ios/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/Introduction/Introduction.html#//apple_ref/doc/uid/TP40010156-CH1-SW1&quot;&gt;iOS Graphics System&lt;/a&gt; consists of 3 frameworks:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;UIKit - provide views on a high level&lt;/li&gt;
  &lt;li&gt;Core Graphics - lower level drawing support within UIKit views&lt;/li&gt;
  &lt;li&gt;Core Animation - ability to apply animation and transformation to UIKit views&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;performance-of-uiimage-vs-drawing-with-code&quot;&gt;Performance of UIImage vs Drawing with code&lt;/h2&gt;

&lt;p&gt;This &lt;a href=&quot;http://stackoverflow.com/a/22985255/242682&quot;&gt;answer&lt;/a&gt; explained well when is GPU used, and when is CPU used.&lt;/p&gt;

&lt;p&gt;Displaying a UIImage is (generally) faster, because after loading the image file (via CPU), the image is loaded onto the GPU. If you now display the image 100 times, it will be very fast, because the GPU already contains the image/texture.&lt;/p&gt;

&lt;p&gt;Drawing with code via Core Graphics is slower, because the drawing code happens in the CPU, before being loaded onto the GPU. If you are going to draw 100 times, there will be 100 trips from the CPU to the GPU.&lt;/p&gt;

&lt;p&gt;Quoting from Apple Doc:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The use of custom drawing code should be limited to situations where the content you display needs to change dynamically.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you need to combine standard UI elements with custom drawing, consider using a Core Animation layer to superimpose a custom view with a standard view so that you draw as little as possible.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;animation-effects&quot;&gt;Animation Effects&lt;/h2&gt;

&lt;p&gt;Before we jump into the large chunk of this post on drawing images, let’s know how animation effects can be applied to the image.&lt;/p&gt;

&lt;p&gt;Core Animation has a layer object, and this is actually a &lt;strong&gt;model that encapsulates animations properties&lt;/strong&gt; - geometry, timing and visual properties.&lt;/p&gt;

&lt;p&gt;By modifying this model, you achieve animation easily. The actual rendering is taken care of, and optimized for you.&lt;/p&gt;

&lt;h2 id=&quot;drawingcreating-paths&quot;&gt;Drawing/Creating Paths&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIBezierPath_class/index.html#//apple_ref/occ/cl/UIBezierPath&quot;&gt;UIBezierPath&lt;/a&gt; is the class to create vector-based shapes.&lt;/p&gt;

&lt;p&gt;You create paths with 2 types: &lt;strong&gt;straight lines&lt;/strong&gt; and &lt;strong&gt;curves&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;straight-lines&quot;&gt;1. Straight Lines&lt;/h3&gt;

&lt;p&gt;Assume you have 2 points (&lt;code class=&quot;highlighter-rouge&quot;&gt;CGPoint&lt;/code&gt;), you can draw a line with &lt;code class=&quot;highlighter-rouge&quot;&gt;addLineToPoint&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIBezierPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;moveToPoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;point1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addLineToPoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;point2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;curves&quot;&gt;2. Curves&lt;/h3&gt;

&lt;p&gt;There are 2 types of curves:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/types-of-bezier-curves.png&quot; alt=&quot;Types of curves&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Cubic curve - use &lt;code class=&quot;highlighter-rouge&quot;&gt;addCurve(to:controlPoint1:controlPoint2:)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Quadratic curve - use &lt;code class=&quot;highlighter-rouge&quot;&gt;addQuadCurve(to:controlPoint:)&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The difference is that a cubic curve has 2 control points.&lt;/p&gt;

&lt;p&gt;Bezier curve has &lt;a href=&quot;https://en.wikipedia.org/wiki/Bézier_curve&quot;&gt;complex mathematical relationship&lt;/a&gt;, if you are interested.&lt;/p&gt;

&lt;h3 id=&quot;underlying-cgpathref&quot;&gt;Underlying &lt;code class=&quot;highlighter-rouge&quot;&gt;CGPathRef&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UIBezierPath&lt;/code&gt; is really just a wrapper for &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/GraphicsImaging/Reference/CGPath/index.html#//apple_ref/c/tdef/CGPathRef&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CGPathRef&lt;/code&gt; data type&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can create &lt;code class=&quot;highlighter-rouge&quot;&gt;CGPath&lt;/code&gt;s directly then assign to a &lt;code class=&quot;highlighter-rouge&quot;&gt;UIBezierPath&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;fill--stroke&quot;&gt;Fill &amp;amp; Stroke&lt;/h3&gt;

&lt;p&gt;With a path constructed, you can then render by filling and stroking with colors.&lt;/p&gt;

&lt;p&gt;The code below with fill with red, and stroke a blue line 2 point wide.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;UIColor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;redColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setFill&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;UIColor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;blueColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setStroke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lineWidth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;stroke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;There is one thing about filling that you should know. The &lt;a href=&quot;http://stackoverflow.com/a/14841163/242682&quot;&gt;even-odd fill rule&lt;/a&gt; determines if a hole in a path is to be filled or not. By default, &lt;code class=&quot;highlighter-rouge&quot;&gt;usesEvenOddFillRule&lt;/code&gt; is false, so usually the hole will be filled.&lt;/p&gt;

&lt;h3 id=&quot;drawing-an-image&quot;&gt;Drawing an Image&lt;/h3&gt;

&lt;p&gt;You can also draw an image. Read the section on performance earlier. If you can use &lt;code class=&quot;highlighter-rouge&quot;&gt;UIImageView&lt;/code&gt;, then you should.&lt;/p&gt;

&lt;p&gt;Otherwize, you can use the draw methods in &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIImage_Class/&quot;&gt;UIImage&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;drawAtPoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;rendering-uiimage&quot;&gt;Rendering UIImage&lt;/h3&gt;

&lt;p&gt;These are the steps to generate an &lt;code class=&quot;highlighter-rouge&quot;&gt;UIImage&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;UIGraphicsBeginImageContextWithOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIGraphicsGetCurrentContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Create your bezier path, fill, stroke, etc..&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIGraphicsGetImageFromCurrentImageContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;UIGraphicsEndImageContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;It is important that you pass 0.0 to &lt;code class=&quot;highlighter-rouge&quot;&gt;UIGraphicsBeginImageContextWithOptions&lt;/code&gt; so that the &lt;a href=&quot;/2016/04/19/pitfall-drawing-with-core-graphics-gives-blurry-lines/&quot;&gt;appropriate bitmap size&lt;/a&gt; is created for the (eg retina) device automatically.&lt;/p&gt;
</description>
        <pubDate>Thu, 25 Aug 2016 10:36:49 +0800</pubDate>
        <link>http://samwize.com/2016/08/25/drawing-images-with-uibezierpath/</link>
        <guid isPermaLink="true">http://samwize.com/2016/08/25/drawing-images-with-uibezierpath/</guid>
        
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>Out of Memory Crashes</title>
        <description>&lt;p&gt;Crashlytics has released a new feature to &lt;a href=&quot;http://crashlytics.com/blog/introducing-oom-reporting&quot;&gt;report out of memory (OOM) crashes&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We all know regular crashes - termination of an app due to some code (app or system libraries).&lt;/p&gt;

&lt;p&gt;OOM is another type of crash, which has been &lt;em&gt;ignored&lt;/em&gt; in Crashlytics reports until now.&lt;/p&gt;

&lt;p&gt;There are 2 types of OOM crashes:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Foreground OOM (FOOM) - this crashes like regular crashes&lt;/li&gt;
  &lt;li&gt;Background OOM (BOOM) - app is evicted from iOS&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The method to detect OOM is first introducted by Facebook, using a &lt;a href=&quot;https://code.facebook.com/posts/1146930688654547/reducing-fooms-in-the-facebook-ios-app/&quot;&gt;process of elimination&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/oom-crashes-why-app-is-launching.jpg&quot; alt=&quot;Why is the app starting?&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;crashlytics-ooms&quot;&gt;Crashlytics OOMs&lt;/h2&gt;

&lt;p&gt;Crashlytics has provided reporting on OOM-free sessions.&lt;/p&gt;

&lt;p&gt;Specifically, that is a percentage of sessions that are crash free from FOOM. Note: This is only for &lt;strong&gt;FOOM (Foreground OOM)&lt;/strong&gt;, since FOOM are similar to regular crashes while the app is in the foreground.&lt;/p&gt;

&lt;p&gt;Also, the number of sessions in Answers does NOT include OOM sessions that crashed.&lt;/p&gt;

&lt;p&gt;Crashlytics thrives in providing analytics to crashes, and the inclusion of OOM crashes will be very useful.&lt;/p&gt;

&lt;p&gt;Some &lt;a href=&quot;https://docs.fabric.io/apple/crashlytics/OOMs.html&quot;&gt;pointers&lt;/a&gt; on debugging and fixing these memory issues is provided.&lt;/p&gt;
</description>
        <pubDate>Mon, 22 Aug 2016 10:29:21 +0800</pubDate>
        <link>http://samwize.com/2016/08/22/out-of-memory-crashes/</link>
        <guid isPermaLink="true">http://samwize.com/2016/08/22/out-of-memory-crashes/</guid>
        
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>Swift Is a Protocol Oriented Programming Language</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/videos/play/wwdc2015/408/&quot;&gt;WWDC 2015&lt;/a&gt; is where Protocol Oriented Programming (POP) is officially being preached.&lt;/p&gt;

&lt;p&gt;It gave us a different perspective of programming, one that does NOT use &lt;strong&gt;class and inheritance&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Instead, POP use &lt;strong&gt;struct and protocol&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;the-problem-with-object-oriented-programming-language&quot;&gt;The Problem with Object Oriented Programming Language&lt;/h2&gt;

&lt;p&gt;The problem is that in practice, using class inheritance is at times &lt;em&gt;not correct&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Or not flexible.&lt;/p&gt;

&lt;p&gt;Because with inheritance, the only structure you can make is a &lt;strong&gt;hierarchy&lt;/strong&gt;. You are limited by that.&lt;/p&gt;

&lt;p&gt;But with protocols, you are essentially giving your object traits.&lt;/p&gt;

&lt;p&gt;With protocol extension for the trait, you can give it a default trait.&lt;/p&gt;

&lt;p&gt;It makes resuable code, much more resuable (:&lt;/p&gt;

&lt;p&gt;To build a component, you just need to specify these individual traits, like how building blocks should be!&lt;/p&gt;

&lt;h2 id=&quot;an-examplehttpmatthijshollemanscom20150722mixins-and-traits-in-swift-2&quot;&gt;&lt;a href=&quot;http://matthijshollemans.com/2015/07/22/mixins-and-traits-in-swift-2/&quot;&gt;An Example&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;We look at an example of a login view controller, with a password text field.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;LoginViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIViewController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;passwordValidator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PasswordValidator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;@IBAction&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;loginButtonPressed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;passwordValidator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;isPasswordValid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;passwordTextField&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The above use a decompostion pattern, with a &lt;code class=&quot;highlighter-rouge&quot;&gt;PasswordValidator&lt;/code&gt; object.&lt;/p&gt;

&lt;p&gt;This is nice and clean, as we put the validation logic in an object of it’s own.&lt;/p&gt;

&lt;p&gt;Here is how you can improve it with POP, with a default implementation.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ValidatesPassword&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isPasswordValid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ValidatesPassword&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isPasswordValid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// A default implementation&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The validation logic is still a separate object, but now in a protocol extension.&lt;/p&gt;

&lt;p&gt;To use,&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;LoginViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ValidatesPassword&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;@IBAction&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;loginButtonPressed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isPasswordValid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;passwordTextField&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;It is now even cleaner!&lt;/p&gt;

&lt;p&gt;You can call &lt;code class=&quot;highlighter-rouge&quot;&gt;isPasswordValid&lt;/code&gt; because of &lt;code class=&quot;highlighter-rouge&quot;&gt;ValidatesPassword&lt;/code&gt;, the protocol which your view controller now has.&lt;/p&gt;
</description>
        <pubDate>Thu, 11 Aug 2016 16:58:26 +0800</pubDate>
        <link>http://samwize.com/2016/08/11/swift-is-a-protocol-oriented-programming-language/</link>
        <guid isPermaLink="true">http://samwize.com/2016/08/11/swift-is-a-protocol-oriented-programming-language/</guid>
        
        
        <category>Swift</category>
        
      </item>
    
      <item>
        <title>Complexity &amp; Out of the Tarpit</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://shaffner.us/cs/papers/tarpit.pdf&quot;&gt;Out of the Tarpit&lt;/a&gt; is a famous paper that discuss complexity of large-scale software systems. It discussed approach to eliminate “accidental complexity”.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://aestheticio.com/become-a-better-programmer-tame-complexity/&quot;&gt;Better Programmer&lt;/a&gt; wrote a post that is a easier read based on Out of the Tarpit.&lt;/p&gt;

&lt;p&gt;Either is a must read for developers.&lt;/p&gt;

&lt;p&gt;We must work hard to achieve simplicity, because:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Complexity has the same impact on your codebase as compound interest has on your credit card balance.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Thu, 11 Aug 2016 14:56:55 +0800</pubDate>
        <link>http://samwize.com/2016/08/11/complexity-and-out-of-the-tarpit/</link>
        <guid isPermaLink="true">http://samwize.com/2016/08/11/complexity-and-out-of-the-tarpit/</guid>
        
        
        <category>Architecture</category>
        
      </item>
    
      <item>
        <title>Updating Jekyll to 3.0</title>
        <description>&lt;p&gt;This blog was running on Jekyll 2.4.0 since the day I &lt;a href=&quot;/2015/09/30/migrating-octopress-2-to-octopress-3/&quot;&gt;migrated away&lt;/a&gt; from Wordpress.&lt;/p&gt;

&lt;p&gt;Today, I updated Jekyll to 3.1.6, primarily because I want to use kramdown, instead of redcarpet.&lt;/p&gt;

&lt;p&gt;Starting from &lt;a href=&quot;https://github.com/blog/2100-github-pages-now-faster-and-simpler-with-jekyll-3-0&quot;&gt;Jekyll 3.0&lt;/a&gt;, kramdown is the default. It is acknowledged to be the de facto markdown library, along with Rouge over Pygments.&lt;/p&gt;

&lt;p&gt;This is a post on how to update Jeykll, with fix to make things working.&lt;/p&gt;

&lt;h2 id=&quot;update-gemfile-for-octopress&quot;&gt;Update Gemfile for Octopress&lt;/h2&gt;

&lt;p&gt;Update &lt;code class=&quot;highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt; for the octopress group. Many plugins are no longer necessary (at least for me) - codefence, video tag, quote tag, gist. I have in fact try to not to use octopress plugins, as they are not true markdown.&lt;/p&gt;

&lt;p&gt;The last 2 gems for octopress hooks and paginate are necessary.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:jekyll_plugins&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;octopress&#39;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;octopress-image-tag&#39;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;octopress-solarized&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:git&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;https://github.com/samwize/solarized&#39;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;octopress-hooks&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;git: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;https://github.com/octopress/hooks.git&#39;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;octopress-paginate&#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;bundle-update&quot;&gt;Bundle Update&lt;/h2&gt;

&lt;p&gt;With that, update the gems with&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bundle update
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If you have no error, then good luck!&lt;/p&gt;

&lt;p&gt;I wasn’t in such luck. The first hurdle is to do with the terrible nokogiri. I have to &lt;a href=&quot;http://stackoverflow.com/a/19807558/242682&quot;&gt;install&lt;/a&gt; with this for El Capitan:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem install nokogiri -- --with-xml2-include=/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.11.sdk/usr/include/libxml2 --use-system-libraries
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;But should use this for future-proof:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem install nokogiri -- --with-xml2-include=`xcrun --show-sdk-path`/usr/include/libxml2 --use-system-libraries
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;building&quot;&gt;Building&lt;/h2&gt;

&lt;p&gt;Once the gems are installed, edit &lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Specifically, REMOVE the markdown and highlighter.&lt;/p&gt;

&lt;p&gt;You should not specify kramdown or pygments, because they have been superseded by the better defaults.&lt;/p&gt;

&lt;p&gt;Build with &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll build&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;error-octopress-hooks--paginate&quot;&gt;Error: Octopress Hooks &amp;amp; Paginate&lt;/h3&gt;

&lt;p&gt;If you follow my Gemfile, then you should not have the &lt;a href=&quot;https://github.com/octopress/paginate/issues/19&quot;&gt;error&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Liquid Exception: undefined method `start_with?&#39; for nil:NilClass in ...
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;error-liquid&quot;&gt;Error: Liquid&lt;/h3&gt;

&lt;p&gt;There are liquid parsing exception in some my posts like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Liquid Exception: Variable &#39;{{..&#39; was not properly terminated with regexp 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This is because I have used &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;/code&gt;, which are marker for liquid.&lt;/p&gt;

&lt;p&gt;To fix, you need to surround with the &lt;a href=&quot;https://github.com/imathis/octopress/issues/466&quot;&gt;raw tags&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Mon, 08 Aug 2016 21:28:34 +0800</pubDate>
        <link>http://samwize.com/2016/08/08/updating-jekyll-to-3-0/</link>
        <guid isPermaLink="true">http://samwize.com/2016/08/08/updating-jekyll-to-3-0/</guid>
        
        
        <category>Jekyll</category>
        
      </item>
    
      <item>
        <title>Reference Cycle for Closures</title>
        <description>&lt;p&gt;You have probably learn about the &lt;a href=&quot;http://krakendev.io/blog/weak-and-unowned-references-in-swift&quot;&gt;imperils&lt;/a&gt; of reference/retain cycle.&lt;/p&gt;

&lt;p&gt;A reference cycle occurs when object A has a strong reference to object B, and vice versa.&lt;/p&gt;

&lt;p&gt;This happens not only between class instances, but also &lt;strong&gt;between class instance and closure&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;are-we-superfluously-capturing-self-as-weakunowned&quot;&gt;Are we superfluously capturing self as weak/unowned?&lt;/h2&gt;

&lt;p&gt;We often see codes littered with &lt;code class=&quot;highlighter-rouge&quot;&gt;[weak self]&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;[unowned self]&lt;/code&gt; in the capture list of closures.&lt;/p&gt;

&lt;p&gt;But are they necessary? Do we ALWAYS have to use unowned/weak inside closure?&lt;/p&gt;

&lt;p&gt;These is one question that we will attempt to answer (at the end).&lt;/p&gt;

&lt;h2 id=&quot;the-exact-problem-to-avoid&quot;&gt;The exact problem to avoid&lt;/h2&gt;

&lt;p&gt;A reference cycle will occur if and only if:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Class instance has a strong reference to closure&lt;/li&gt;
  &lt;li&gt;Closure has a strong reference to class instance&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If either (1) or (2) has a weak reference instead, then you do NOT have the problem.&lt;/p&gt;

&lt;p&gt;Let’s look closer at 2 scenarios.&lt;/p&gt;

&lt;h2 id=&quot;class-instance-with-strong-reference-to-closure&quot;&gt;1. Class instance with strong reference to closure&lt;/h2&gt;

&lt;p&gt;This is the typical scenario where the class instance has a strong reference to the closure directly, or indirectly.&lt;/p&gt;

&lt;p&gt;What is mean by indirect? The instance could be holding the reference indirectly, via a third-party object.&lt;/p&gt;

&lt;p&gt;Let’s look at an example:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Now, myStrongClass has strong reference to the closure&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyStrongClass&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;deinit&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;deinit MyStrongClass&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;theClosure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)?&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;runClosure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;theClosure&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;dispatch_after&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dispatch_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;DISPATCH_TIME_NOW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;NSEC_PER_SEC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))),&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dispatch_get_main_queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Running the closure and this is self: &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;theClosure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;myStrongClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyStrongClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyStrongClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;myStrongClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;runClosure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;myStrongClass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In the code above, &lt;code class=&quot;highlighter-rouge&quot;&gt;myStrongClass&lt;/code&gt; will not deinit even when it is set to &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is because the closure is (by default), capturing &lt;code class=&quot;highlighter-rouge&quot;&gt;self&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;myStrongClass&lt;/code&gt; &lt;strong&gt;strongly&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The typical solution is to capture &lt;code class=&quot;highlighter-rouge&quot;&gt;self&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;unowned&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;weak&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;theClosure&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;weak&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This is the scenario where it is &lt;strong&gt;necessary&lt;/strong&gt; to use &lt;code class=&quot;highlighter-rouge&quot;&gt;weak&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;unowned&lt;/code&gt;, if not you will have memory leak problem.&lt;/p&gt;

&lt;h2 id=&quot;closure-has-a-strong-reference-to-class-instance&quot;&gt;2. Closure has a strong reference to class instance&lt;/h2&gt;

&lt;p&gt;In this scenario, you might think the closure can be declared with &lt;code class=&quot;highlighter-rouge&quot;&gt;weak&lt;/code&gt; (while still capture &lt;code class=&quot;highlighter-rouge&quot;&gt;self&lt;/code&gt; strongly):&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;weak&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;theClosure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)?&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;But that is not possible.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;weak&lt;/code&gt; can only be applied to class or class-bound protocol.&lt;/p&gt;

&lt;p&gt;To illustrate, we’ll use a closure in a local scope (therefore not strongly referenced by &lt;code class=&quot;highlighter-rouge&quot;&gt;self&lt;/code&gt;).&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyHolder&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;initial&quot;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;deinit&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;deinit MyHolder&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;runClosure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;strongClosure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;dispatch_after&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dispatch_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;DISPATCH_TIME_NOW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;NSEC_PER_SEC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))),&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dispatch_get_main_queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Value of MyHolder: &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;strongClosure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;holder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyHolder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyHolder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;holder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;changed&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;holder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;runClosure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;// Prints changed then deinit&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;holder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Result: holder will deinit once the closure has completed (and printed the value)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// closure deinit, therefore instance deinit too&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The closure is never referenced in the object instance. It is used only in the local scope of &lt;code class=&quot;highlighter-rouge&quot;&gt;runClosure&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;strongClosure&lt;/code&gt; captures self strongly. That’s why it will print the value first, then self will be released.&lt;/p&gt;

&lt;p&gt;The point to emphasize here is:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If &lt;code class=&quot;highlighter-rouge&quot;&gt;self&lt;/code&gt; does NOT have a strong reference to the closure, it is okay to have the closure capture &lt;code class=&quot;highlighter-rouge&quot;&gt;self&lt;/code&gt; strongly.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-case-of-singleton&quot;&gt;The Case of Singleton&lt;/h2&gt;

&lt;p&gt;It is more common that you have scenario (2) in the case of using a singleton:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Singleton&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;sharedInstance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Singleton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;    
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;runClosure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;closure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;dispatch_after&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dispatch_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;DISPATCH_TIME_NOW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;NSEC_PER_SEC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))),&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dispatch_get_main_queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;closure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyHolder&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;runClosure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;Singleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sharedInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;runClosure&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
            &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Value of MyHolderWithSingleton: &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The above code is similar to (2) – the closure has a strong reference to self, but self does NOT have strong reference tot he closure, nor to the singleton.&lt;/p&gt;

&lt;p&gt;I have seen many codes that &lt;strong&gt;superfluously&lt;/strong&gt; capture self as &lt;code class=&quot;highlighter-rouge&quot;&gt;weak&lt;/code&gt; like this:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;runClosure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;Singleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sharedInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;runClosure&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;weak&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Value of MyHolderWithSingleton: &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Usually &lt;code class=&quot;highlighter-rouge&quot;&gt;self&lt;/code&gt; is a view controller, and the superfluous code above have the closure reference the view controller weakly.&lt;/p&gt;

&lt;p&gt;BUT, &lt;code class=&quot;highlighter-rouge&quot;&gt;self&lt;/code&gt; is not referencing the closure strongly in the first place!&lt;/p&gt;

&lt;p&gt;There is no need to avoid a reference cycle, because there isn’t one in the first place.&lt;/p&gt;

&lt;p&gt;Once again:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If self does NOT have a strong reference to the closure, it is okay to have the closure capture self strongly.&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 05 Aug 2016 11:44:31 +0800</pubDate>
        <link>http://samwize.com/2016/08/05/reference-cycle-for-closures/</link>
        <guid isPermaLink="true">http://samwize.com/2016/08/05/reference-cycle-for-closures/</guid>
        
        
        <category>Swift</category>
        
      </item>
    
      <item>
        <title>MVVM for iOS &amp; Swift</title>
        <description>&lt;p&gt;Following a &lt;a href=&quot;/2016/07/20/good-architecture-for-ios-app/&quot;&gt;research into better architectures&lt;/a&gt;, this is some learnings from &lt;a href=&quot;http://artsy.github.io/blog/2015/09/24/mvvm-in-swift/&quot;&gt;MVVM in Swift&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;view-model-vm&quot;&gt;View Model (VM)&lt;/h2&gt;

&lt;p&gt;The VM is a 1-1 with view controller.&lt;/p&gt;

&lt;p&gt;It is actually simply a composition pattern, by separating responsibility from the View Controller (VC).&lt;/p&gt;

&lt;h2 id=&quot;what-is-view-model-responsible-for&quot;&gt;What is View Model responsible for?&lt;/h2&gt;

&lt;p&gt;View Model stands between the Model and the View Controller, and provide the data that a view controller needs to display in it’s views.&lt;/p&gt;

&lt;p&gt;View Controller NO longer access the model directly.&lt;/p&gt;

&lt;p&gt;If the model has a &lt;code class=&quot;highlighter-rouge&quot;&gt;NSDate&lt;/code&gt;, then the VM will have the &lt;code class=&quot;highlighter-rouge&quot;&gt;NSDateFormatter&lt;/code&gt; that knows how to display the date as a string for the view.&lt;/p&gt;

&lt;h2 id=&quot;what-is-view-model-not-responsible-for&quot;&gt;What is View Model NOT responsible for?&lt;/h2&gt;

&lt;p&gt;A VM does not know about the view.&lt;/p&gt;

&lt;p&gt;It does not know stuff about presentation, but it does provide the data for presenting.&lt;/p&gt;

&lt;p&gt;Note that is “data” for presenting is not the actual model, but a intermediatry object (aka boundary object).&lt;/p&gt;

&lt;h2 id=&quot;what-is-grey&quot;&gt;What is grey?&lt;/h2&gt;

&lt;p&gt;Networking call is a grey area. Neither VM nor VC defines where the network logic should go.&lt;/p&gt;

&lt;p&gt;But it is safer to be in VM. Or use another composition pattern with a network object.&lt;/p&gt;

&lt;h2 id=&quot;how-different-is-mvvm-and-mvc&quot;&gt;How different is MVVM and MVC&lt;/h2&gt;

&lt;p&gt;It is actually not much different.&lt;/p&gt;

&lt;p&gt;The introduction of a View Model simply extract the business/app logics out of a View Controller.&lt;/p&gt;

&lt;p&gt;It uses a composition pattern, so a VC now will have a VM. In doing so, you can now write tests for the VM (which has the important business logics).&lt;/p&gt;

&lt;h2 id=&quot;how-view-model-vm-communicates-with-view-controller-vc&quot;&gt;How View Model (VM) communicates with View Controller (VC)?&lt;/h2&gt;

&lt;p&gt;Remember, VM does not know anything about the VC.&lt;/p&gt;

&lt;p&gt;Just like VC does not know anything about the model.&lt;/p&gt;

&lt;p&gt;VM and VC can communicate via delegates or Functional Reactive Programming (FRP).&lt;/p&gt;

&lt;p&gt;You would have have know delegate pattern, which is widely used in Apple’s frameworks. It can work, except it is verbose.&lt;/p&gt;

&lt;p&gt;A better way is FRP, which you would have heard in the form of &lt;a href=&quot;https://github.com/ReactiveKit/ReactiveKit&quot;&gt;Reactive&lt;/a&gt;. A good introduction to FRP is the &lt;a href=&quot;https://www.raywenderlich.com/123108/bond-tutorial&quot;&gt;Swift Bond tutorial by raywenderlich&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(alas, Swift does not support binding out of the box, so a tool like ReactiveKit is much needed)&lt;/p&gt;

&lt;h2 id=&quot;reactivekit&quot;&gt;ReactiveKit&lt;/h2&gt;

&lt;p&gt;This very cool framework was first known as &lt;a href=&quot;https://github.com/SwiftBond/Bond&quot;&gt;Bond&lt;/a&gt;, &lt;em&gt;Swift Bond&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;It’s successor is ReactiveKit, which is now made up of a few components:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ReactiveKit/ReactiveKit&quot;&gt;ReactiveKit&lt;/a&gt; - The core&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ReactiveKit/ReactiveUIKit&quot;&gt;ReactiveUIKit&lt;/a&gt; - provides extension to UIKit to provide binding&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ReactiveKit/ReactiveAlamofire&quot;&gt;ReactiveAlamofire&lt;/a&gt; - provides extension to the popular networking library&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Compared to other libraries doing the same think (like Reactive Cocoa), ReactiveKit looks great.&lt;/p&gt;
</description>
        <pubDate>Tue, 26 Jul 2016 16:14:37 +0800</pubDate>
        <link>http://samwize.com/2016/07/26/mvvm-for-ios-and-swift/</link>
        <guid isPermaLink="true">http://samwize.com/2016/07/26/mvvm-for-ios-and-swift/</guid>
        
        
        <category>Architecture</category>
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>How to Capture Multiple Groups in a Regex With Swift</title>
        <description>&lt;p&gt;Swift does not provide regex support in the language (hopefully in Swift 4!?).  For now we still have to rely on &lt;a href=&quot;https://developer.apple.com/library/mac/documentation/Foundation/Reference/NSRegularExpression_Class/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NSRegularExpression&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here is a &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt; extension that extract the captured groups with a regex pattern.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;capturedGroups&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withRegex&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;results&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]()&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;regex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSRegularExpression&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;regex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSRegularExpression&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;matches&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;regex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;matchesInString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSRange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;characters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        
        &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matches&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;lastRangeIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numberOfRanges&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lastRangeIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lastRangeIndex&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;capturedGroupIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;rangeAtIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;matchedString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;substringWithRange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;capturedGroupIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matchedString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;To use:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Will match &quot;bcde&quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&quot;abcdefg&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;capturedGroups&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;withRegex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;a(.*)f&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;capture-groups-vs-matches&quot;&gt;Capture Groups vs Matches&lt;/h2&gt;

&lt;p&gt;There is a difference.&lt;/p&gt;

&lt;p&gt;The code &lt;code class=&quot;highlighter-rouge&quot;&gt;regex.matchesInString(...)&lt;/code&gt; will return 0 or more &lt;strong&gt;matches&lt;/strong&gt;. For example, “hello hello” will match the regex pattern “hello” twice.&lt;/p&gt;

&lt;p&gt;We did not bother with multiple matches, and instead only handle for the first match.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.regular-expressions.info/brackets.html&quot;&gt;Capture groups&lt;/a&gt; are regex pattern which you define that you want to capture using brackets eg. &lt;code class=&quot;highlighter-rouge&quot;&gt;id=(\\d*)&lt;/code&gt; will capture a number after a “id=”.&lt;/p&gt;
</description>
        <pubDate>Thu, 21 Jul 2016 15:07:17 +0800</pubDate>
        <link>http://samwize.com/2016/07/21/how-to-capture-multiple-groups-in-a-regex-with-swift/</link>
        <guid isPermaLink="true">http://samwize.com/2016/07/21/how-to-capture-multiple-groups-in-a-regex-with-swift/</guid>
        
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>Good Architecture for iOS App</title>
        <description>&lt;p&gt;This post discuss various architecture designs for an iOS app.&lt;/p&gt;

&lt;p&gt;It is an ongoing post which I will update continously.&lt;/p&gt;

&lt;h2 id=&quot;good-architecture&quot;&gt;Good Architecture&lt;/h2&gt;

&lt;p&gt;I wrote this post because I was reading
&lt;a href=&quot;http://slideslive.com/38897361/good-ios-application-architecture-en&quot;&gt;good iOS application architecture&lt;/a&gt;
by Krzysztof Zabłocki&lt;/p&gt;

&lt;p&gt;You might know him from &lt;a href=&quot;https://github.com/krzysztofzablocki/KZLinkedConsole&quot;&gt;KZLinkedConsole&lt;/a&gt;
his popular Xcode plugin &lt;a href=&quot;http://merowing.info/2015/12/writing-xcode-plugin-in-swift/&quot;&gt;written in Swift&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Traits of Good Architecture:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Each object has a clear role&lt;/li&gt;
  &lt;li&gt;Ability to follow data flow with ease&lt;/li&gt;
  &lt;li&gt;Don’t depend on any particular framework&lt;/li&gt;
  &lt;li&gt;Limited Dependencies&lt;/li&gt;
  &lt;li&gt;Flexible because it is simple, not because it is over abstracted&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As Uncle Bob says, a good architecture is one when you look at it, eg an accounting software, it screams ACCOUNTING, not MVC/etc. A good architecture will defer the frameworks it use.&lt;/p&gt;

&lt;h2 id=&quot;how-you-know-it-is-bad&quot;&gt;How you know it is bad?&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# How many lines in your view controllers?
find . -type f -exec wc -l {} + | sort -n
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/PaulTaykalo/objc-dependency-visualizer&quot;&gt;Dependency Visualizer&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;patterns&quot;&gt;Patterns&lt;/h2&gt;

&lt;p&gt;How you use patterns
determines it is good or bad&lt;/p&gt;

&lt;p&gt;Singleton
is very common
but easily misused
Eg. Logger - almost every class needs logging, so singleton is fine&lt;/p&gt;

&lt;p&gt;But when you have a VC using a Singleton
just so it is convenient
then it is likely wrong&lt;/p&gt;

&lt;p&gt;Composition
is 1 pattern that you must know,
which will lead to other great patterns&lt;/p&gt;

&lt;p&gt;DI is good
as it encourages reuse,
and even Apple encourages it in WWDC 2016-06&lt;/p&gt;

&lt;h2 id=&quot;mvc&quot;&gt;1. MVC&lt;/h2&gt;

&lt;p&gt;Apple’s MVC is wrong
because it’s View and Controller are too closely coupled&lt;/p&gt;

&lt;p&gt;Only model can be reused&lt;/p&gt;

&lt;p&gt;MVC is invented in the 80s
but it can still be good
if you do composition&lt;/p&gt;

&lt;p&gt;Apple sample code –
even they admit it is to merely to show a technology,
not written in good architecture&lt;/p&gt;

&lt;p&gt;Problems with our View Controller:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Knowing business logic&lt;/li&gt;
  &lt;li&gt;Maintaining states&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;viper&quot;&gt;2. VIPER&lt;/h2&gt;

&lt;p&gt;Good
But lots of boilerplate&lt;/p&gt;

&lt;h2 id=&quot;mvvm&quot;&gt;3. MVVM&lt;/h2&gt;

&lt;p&gt;Most popular iOS Architecture?&lt;/p&gt;

&lt;p&gt;View Model
is UIKit independent
and is testable&lt;/p&gt;

&lt;p&gt;But no router&lt;/p&gt;

&lt;h2 id=&quot;mvvm-1&quot;&gt;4. MVVM+&lt;/h2&gt;

&lt;p&gt;With Flow Coordinators/Controller/Router&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://merowing.info/2016/01/improve-your-ios-architecture-with-flowcontrollers/&quot;&gt;Improving Architecture with Flow Controllers&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;At least 1 root flow controller&lt;/li&gt;
  &lt;li&gt;Created by AppDelegate&lt;/li&gt;
  &lt;li&gt;Has multiple child controllers (VCs)&lt;/li&gt;
  &lt;li&gt;VC/VM does not know about other VC/VM&lt;/li&gt;
  &lt;li&gt;Configures and coordinate different screens&lt;/li&gt;
  &lt;li&gt;To support multiple devices, subclass the root flow controller&lt;/li&gt;
  &lt;li&gt;You can use for MVC or any other architecture&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;http://khanlou.com/2015/10/coordinators-redux/&quot;&gt;Coordinator Redux&lt;/a&gt; by Khanlou&lt;/p&gt;

&lt;p&gt;What’s wrong with such a line of code in a view controller?&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;navigationController&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;pushViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;detailViewController&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;animated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;YES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;It’s bossing its parent around. In real life, children should never boss their parents around. In programming, I would argue children shouldn’t even know who their parents are!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Libraries vs frameworks&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;They say the distinction between libraries and frameworks is that you call libraries, and frameworks call you. I want to treat 3rd-party dependencies as much like libraries as possible.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A con of using flow coordinators:
It does not play well with segue&lt;/p&gt;

&lt;h2 id=&quot;reswifthttpsgithubcomreswiftreswift&quot;&gt;&lt;a href=&quot;https://github.com/ReSwift/ReSwift&quot;&gt;5. ReSwift&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;The new kid in the block, inspired by Redux.
An &lt;a href=&quot;https://realm.io/news/benji-encz-unidirectional-data-flow-swift/&quot;&gt;introduction presented by Benjamin Encz&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Single point of truth&lt;/p&gt;

&lt;p&gt;It can load a state - persisting state across application launches&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://reswift.github.io/ReSwift/master/getting-started-guide.html&quot;&gt;&lt;img src=&quot;http://reswift.github.io/ReSwift/master/img/reswift_detail.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Wed, 20 Jul 2016 17:17:01 +0800</pubDate>
        <link>http://samwize.com/2016/07/20/good-architecture-for-ios-app/</link>
        <guid isPermaLink="true">http://samwize.com/2016/07/20/good-architecture-for-ios-app/</guid>
        
        
        <category>Architecture</category>
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>Refactor a Mega View Controller - A Live Coding!</title>
        <description>&lt;p&gt;Andy Matuschak gave a good talk on refactoring a mega controller.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://realm.io/news/andy-matuschak-refactor-mega-controller/&quot;&gt;Watch it&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://realm.io/news/andy-matuschak-refactor-mega-controller/&quot;&gt;&lt;img src=&quot;/images/refactor-a-mega-view-controller-demo.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is a very good video by Andy Matuschak,
performing delightful live coding
and narrating his thoughts process.&lt;/p&gt;

&lt;p&gt;You might recognize Andy,
an ex-Apple engineer 
who gave a great talk in &lt;a href=&quot;https://developer.apple.com/videos/play/wwdc2014/229/&quot;&gt;WWDC 2014&lt;/a&gt;
on app architecture – &lt;strong&gt;where is the truth&lt;/strong&gt;?&lt;/p&gt;

&lt;h2 id=&quot;the-usual-problem&quot;&gt;The Usual Problem&lt;/h2&gt;

&lt;p&gt;We often got into
is writing Massive View Controller,
resulting in 1 single file that contains all kind of code!&lt;/p&gt;

&lt;p&gt;Apple sample code 
and programming guide
didn’t help to guide us towards clean code/architecture.&lt;/p&gt;

&lt;h2 id=&quot;techniques&quot;&gt;Techniques&lt;/h2&gt;

&lt;p&gt;There is no magic.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Mostly Decomposition&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Or as Uncle Bob says: &lt;em&gt;Extract till you drop&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Where is the truth?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Think hard which class should hold the truth.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;It is VERY RUDE for a view controller to change it’s parents properties&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For example, don’t change your navigation bar tint color directly. Your view controller does not own the navigation bar. What if another (child) view controller also change the tint?&lt;/p&gt;

&lt;p&gt;Test driven development (TDD) will force you
to architect your code nicely.&lt;/p&gt;

&lt;h2 id=&quot;what-pasta-is-your-code&quot;&gt;What Pasta is Your Code?&lt;/h2&gt;

&lt;p&gt;As you decompose/abstract/encapsulate your code, the structure changes.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Spaghetti code - messy&lt;/li&gt;
  &lt;li&gt;Lasagna code - well layered&lt;/li&gt;
  &lt;li&gt;Ravioli code - very much decoupled&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;http://www.proun-game.com/Oogst3D/BLOG/Italian%20Food%20Coding%20Ravioli.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It is up to you to find the balance,
which is not easy.&lt;/p&gt;

&lt;p&gt;You want to decompose as much, 
but not to the extend
that it difficult to follow the flow of data.&lt;/p&gt;

&lt;h2 id=&quot;bonus&quot;&gt;Bonus&lt;/h2&gt;

&lt;p&gt;Storyboard instantiate your initial view controller
so you have no chance to init yourself.&lt;/p&gt;

&lt;p&gt;A trick is shown in the talk
where you instantiate your VC manually in &lt;code class=&quot;highlighter-rouge&quot;&gt;AppDelegate&lt;/code&gt;
and set it to the navigation VC (the root VC of window).&lt;/p&gt;
</description>
        <pubDate>Tue, 28 Jun 2016 17:06:36 +0800</pubDate>
        <link>http://samwize.com/2016/06/28/refactor-a-mega-view-controller-demo/</link>
        <guid isPermaLink="true">http://samwize.com/2016/06/28/refactor-a-mega-view-controller-demo/</guid>
        
        
        <category>Architecture</category>
        
      </item>
    
  </channel>
</rss>
