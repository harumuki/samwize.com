<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>@samwize</title>
    <description>¯\_(ツ)_/¯
</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Wed, 21 Mar 2018 00:10:57 +0800</pubDate>
    <lastBuildDate>Wed, 21 Mar 2018 00:10:57 +0800</lastBuildDate>
    <generator>Jekyll v3.6.2</generator>
    
      <item>
        <title>How to Setup Free SSL for Github Pages</title>
        <description>&lt;p&gt;SSL/HTTPS is now &lt;a href=&quot;https://searchengineland.com/effective-july-2018-googles-chrome-browser-will-mark-non-https-sites-as-not-secure-291623&quot;&gt;almost mandatory&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Good news is, we can easily setup SSL with &lt;a href=&quot;https://www.Cloudflare.com&quot;&gt;Cloudflare&lt;/a&gt;, and it’s free!&lt;/p&gt;

&lt;h2 id=&quot;requirements&quot;&gt;Requirements&lt;/h2&gt;

&lt;p&gt;Make sure you already have a website hosted on Github Pages, and serving via your own domain name.&lt;/p&gt;

&lt;p&gt;If not, &lt;a href=&quot;/2015/09/02/how-to-host-a-website-on-github-pages/&quot;&gt;get your website running&lt;/a&gt; first.&lt;/p&gt;

&lt;p&gt;Then register a &lt;a href=&quot;https://www.Cloudflare.com&quot;&gt;Cloudflare&lt;/a&gt; account.&lt;/p&gt;

&lt;h2 id=&quot;setup-on-cloudflare&quot;&gt;Setup on Cloudflare&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;In Cloudflare &amp;gt; “Add Site” &amp;gt; Enter your website domain name&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Cloudflare automatically copy your DNS records, but you should double check them&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In your domain registrar, change the nameservers to that provided by Cloudflare – eg. &lt;code class=&quot;highlighter-rouge&quot;&gt;mia.ns.Cloudflare.com&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;yichun.ns.Cloudflare.com&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That’s it!&lt;/p&gt;

&lt;h2 id=&quot;the-thing-about-page-rules&quot;&gt;The Thing About Page Rules&lt;/h2&gt;

&lt;p&gt;Cloudflare’s Page Rules is like nginx configuration. You can rewrite URLs, configure cache settings, redirects, etc.&lt;/p&gt;

&lt;p&gt;For simple redirection/forwarding, you &lt;a href=&quot;https://support.cloudflare.com/hc/en-us/articles/200168306-Is-there-a-tutorial-for-Page-Rules-#redirects&quot;&gt;need 1 page rule&lt;/a&gt; for every redirect.&lt;/p&gt;

&lt;p&gt;Cloudflare free plan provides only 3 page rules.&lt;/p&gt;

&lt;p&gt;Argh, that’s the caveat of being free.&lt;/p&gt;
</description>
        <pubDate>Tue, 20 Mar 2018 17:58:01 +0800</pubDate>
        <link>http://localhost:4000/2018/03/20/how-to-setup-free-ssl-for-github-pages/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/03/20/how-to-setup-free-ssl-for-github-pages/</guid>
        
        
        <category>Website</category>
        
        <category>Github</category>
        
      </item>
    
      <item>
        <title>Swift Lint to Improve Code Quality</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://github.com/realm/SwiftLint&quot;&gt;SwiftLint&lt;/a&gt; helps to enforce coding style.&lt;/p&gt;

&lt;p&gt;It is useful when working in a team because warnings &amp;amp; errors are produced when the code is &lt;em&gt;not up to standard&lt;/em&gt;. The rules are fully customizable according to a team needs.&lt;/p&gt;

&lt;p&gt;This guide will be on how to setup &lt;a href=&quot;https://github.com/realm/SwiftLint&quot;&gt;SwiftLint&lt;/a&gt; for an existing project, and with Fastlane.&lt;/p&gt;

&lt;h2 id=&quot;step-1-install-the-tool&quot;&gt;Step 1. Install the tool&lt;/h2&gt;

&lt;p&gt;Add to &lt;code class=&quot;highlighter-rouge&quot;&gt;Podfile&lt;/code&gt; and do a &lt;code class=&quot;highlighter-rouge&quot;&gt;pod install&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pod 'SwiftLint'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;step-2-run-script-on-build&quot;&gt;Step 2. Run script on build&lt;/h2&gt;

&lt;p&gt;In &lt;strong&gt;Target &amp;gt; Build Phases &amp;gt; New Run Script Phase&lt;/strong&gt;, add&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;${PODS_ROOT}/SwiftLint/swiftlint&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, whenever you build the target, swiftlint will run.&lt;/p&gt;

&lt;p&gt;If you run with an existing project, it is likely to have warnings/errors. This is because the default rules are being used.&lt;/p&gt;

&lt;h2 id=&quot;step-3-customize-the-rules&quot;&gt;Step 3. Customize the rules&lt;/h2&gt;

&lt;p&gt;You can find &lt;a href=&quot;https://github.com/realm/SwiftLint/blob/master/Rules.md&quot;&gt;all the rules&lt;/a&gt; in the wiki. By default, around 70% are enabled.&lt;/p&gt;

&lt;p&gt;You can &lt;a href=&quot;https://github.com/realm/SwiftLint#configuration&quot;&gt;customize the rules&lt;/a&gt; with a &lt;code class=&quot;highlighter-rouge&quot;&gt;.swiftlint.yml&lt;/code&gt; file in the root folder.&lt;/p&gt;

&lt;p&gt;Let’s take a look at how the configuration file works:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# You can disable rules that have been enabled by default&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;disabled_rules&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;identifier_name&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;force_cast&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Similarly, you can enable rules that have been disabled by default&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;opt_in_rules&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;first_where&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Exclude directories that you don't want to lint&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;excluded&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Pods&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;fastlane&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Use &quot;xcode&quot; so that when you build, the result will be shown in Xcode&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;reporter&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;xcode&quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Other reporters: json, csv, checkstyle, junit, html, emoji&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# The rule `function_body_length` by default triggers warning at 40, error at 100&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# This example increases by 3 times&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;function_body_length&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;warning&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;120&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;300&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Sometimes, you want to dig into the &lt;a href=&quot;https://github.com/realm/SwiftLint/tree/master/Source/SwiftLintFramework/Rules&quot;&gt;code for each rule&lt;/a&gt; to understand how it works.&lt;/p&gt;

&lt;p&gt;And you can also create &lt;a href=&quot;https://github.com/realm/SwiftLint#defining-custom-rules&quot;&gt;custom rules&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;step-4-integrate-with-fastlane&quot;&gt;Step 4. Integrate with fastlane&lt;/h2&gt;

&lt;p&gt;You can already see the warnings whenever you build in Xcode.&lt;/p&gt;

&lt;p&gt;Integrating with Fastlane is for another purpose – to generate a HTML report.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Add a lane in Fastfile&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;desc&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Run lint&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;lane&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:lint&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;swiftlint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;mode: :lint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;executable: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Pods/SwiftLint/swiftlint&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;reporter: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;html&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;output_file: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;swiftlint-results.html&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;ignore_exit_status: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The difference with using fastlane is that the reporter is set to &lt;strong&gt;html&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;You can run &lt;code class=&quot;highlighter-rouge&quot;&gt;fastlane lint&lt;/code&gt; manually, and open up swiftlint-results.html to see all the violations.&lt;/p&gt;

&lt;h2 id=&quot;step-5-autocorrect&quot;&gt;Step 5. Autocorrect&lt;/h2&gt;

&lt;p&gt;Swiftlint has magic.&lt;/p&gt;

&lt;p&gt;For some rules, the tool can automatically fix your code! You are lucky if a rule &lt;a href=&quot;https://github.com/realm/SwiftLint/blob/master/Rules.md&quot;&gt;&lt;strong&gt;supports autocorrection&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Add another lane that run autocorrect mode&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;desc&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Run lint autocorrect&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;lane&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:lint_autocorrect&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;swiftlint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;mode: :autocorrect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;executable: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Pods/SwiftLint/swiftlint&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;config_file: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.swiftlint-autocorrect.yml&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note that we use a different config file &lt;code class=&quot;highlighter-rouge&quot;&gt;.swiftlint-autocorrect.yml&lt;/code&gt;. And in this file, we use another approach to specify the rules – whitelisting.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Only work with these rules&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;whitelist_rules&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;trailing_whitespace&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;trailing_newline&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;vertical_whitespace&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Run &lt;code class=&quot;highlighter-rouge&quot;&gt;fastlane lint_autocorrect&lt;/code&gt; and watch the magic happens.&lt;/p&gt;

&lt;h2 id=&quot;step-6-disable-rules-in-code&quot;&gt;Step 6: Disable rules in code&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Rules are meant to be broken.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Sometimes, you knowingly break rules.&lt;/p&gt;

&lt;p&gt;When that happens, and you really want it that way, you can disable the rule &lt;a href=&quot;https://github.com/realm/SwiftLint#disable-rules-in-code&quot;&gt;in code&lt;/a&gt; on a case-by-case basis.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// swiftlint:disable force_cast&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Now the rule force_cast is disabled&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;noWarning&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as!&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Re-enable back the rules&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// swiftlint:enable force_cast&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Disable with `this` (inline), `next` (next line) or `previous`&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;noWarning&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as!&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// swiftlint:disable:this force_cast&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;summary-the-approach-for-an-existing-project&quot;&gt;Summary: The approach for an existing project&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Use the default rules&lt;/li&gt;
  &lt;li&gt;Build&lt;/li&gt;
  &lt;li&gt;Fix a rule by either:
    &lt;ol&gt;
      &lt;li&gt;Autocorrect, if possible&lt;/li&gt;
      &lt;li&gt;Remove it by adding to &lt;code class=&quot;highlighter-rouge&quot;&gt;disabled_rules&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Customize it&lt;/li&gt;
      &lt;li&gt;Disable in code&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When all the default rules are “fixed”, go through the rules that are disabled by default. Add them to &lt;code class=&quot;highlighter-rouge&quot;&gt;opt_in_rules&lt;/code&gt;, if useful.&lt;/p&gt;

&lt;h2 id=&quot;bonus-rule-trailing_whitespace&quot;&gt;Bonus: Rule trailing_whitespace&lt;/h2&gt;

&lt;p&gt;“Lines should not have trailing whitespace.”&lt;/p&gt;

&lt;p&gt;Xcode by default will have whitespace for empty lines, following the indentation. This is unecessary, a bad default, which you can change.&lt;/p&gt;

&lt;p&gt;Enable in &lt;strong&gt;Xcode Preferences &amp;gt; Text Editing &amp;gt; Including whitespace-only lines&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/xcode-preference-whitelines.jpg&quot; alt=&quot;Xcode Preferences&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 08 Mar 2018 13:43:08 +0800</pubDate>
        <link>http://localhost:4000/2018/03/08/swift-lint-to-improve-code-quality/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/03/08/swift-lint-to-improve-code-quality/</guid>
        
        
        <category>Swift</category>
        
        <category>Code</category>
        
      </item>
    
      <item>
        <title>How to Make Xcode Run Faster</title>
        <description>&lt;h2 id=&quot;show-build-time&quot;&gt;Show Build Time&lt;/h2&gt;

&lt;p&gt;You have to enable this settings via command line:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;defaults write com.apple.dt.Xcode ShowBuildOperationDuration -bool YES
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Whenever Xcode finish building, you will see the time it spent in the top status panel (where you see build “Succeeded”).&lt;/p&gt;

&lt;p&gt;With this data displayed, let’s make Xcode build faster.&lt;/p&gt;

&lt;h2 id=&quot;whole-module-optimization&quot;&gt;Whole Module Optimization&lt;/h2&gt;

&lt;p&gt;The default settings from Xcode makes the build process slow. You may say it is a bug.&lt;/p&gt;

&lt;p&gt;Do this for your target’s &lt;strong&gt;Debug configuration&lt;/strong&gt;:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;In Build Settings &amp;gt; Optimization Level &amp;gt; change to &lt;strong&gt;Fast, Whole Module Optimization&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;In Build Settings &amp;gt; Swift Flags &amp;gt; Add &lt;code class=&quot;highlighter-rouge&quot;&gt;-Onone&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you are not sure, &lt;a href=&quot;http://developear.com/blog/2016/12/30/Speed-Swift-Compilation.html&quot;&gt;screenshots here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;pods-too&quot;&gt;Pods too&lt;/h2&gt;

&lt;p&gt;Similarly, you can add a post install hook to &lt;code class=&quot;highlighter-rouge&quot;&gt;Podfile&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;post_install&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;installer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;installer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pods_project&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;targets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;build_configurations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Debug'&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;build_settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'OTHER_SWIFT_FLAGS'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'$(inherited)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'-Onone'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;build_settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'SWIFT_OPTIMIZATION_LEVEL'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'-Owholemodule'&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;build-active-architecture-only&quot;&gt;Build Active Architecture Only&lt;/h2&gt;

&lt;p&gt;The default from Xcode is correct, but you should double check.&lt;/p&gt;

&lt;p&gt;Build Settings &amp;gt; Build Active Architecture &amp;gt; should be &lt;strong&gt;Yes for Debug configuration&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;What this means is that &lt;a href=&quot;http://samwize.com/2015/01/14/what-is-build-active-architecture-only/&quot;&gt;Xcode will detect&lt;/a&gt; the device that is connected and build only for that architecture alone.&lt;/p&gt;

&lt;h2 id=&quot;other-tricks&quot;&gt;Other Tricks&lt;/h2&gt;

&lt;p&gt;If you have followed the recommendations above, you should see significant improvement in your build time.&lt;/p&gt;

&lt;p&gt;If not, this &lt;a href=&quot;https://github.com/fastred/Optimizing-Swift-Build-Times#whole-module-optimization&quot;&gt;wiki on github&lt;/a&gt; provides other tricks and good settings.&lt;/p&gt;
</description>
        <pubDate>Wed, 28 Feb 2018 15:34:12 +0800</pubDate>
        <link>http://localhost:4000/2018/02/28/how-to-make-xcode-run-faster/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/02/28/how-to-make-xcode-run-faster/</guid>
        
        
        <category>Xcode</category>
        
      </item>
    
      <item>
        <title>Setting Up Travis CI With Fastlane for iOS Project</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://travis-ci.com&quot;&gt;Travis CI&lt;/a&gt; is a service, providing machines, to help build your app, test, deploy, and more.&lt;/p&gt;

&lt;p&gt;Note: It integrates very easily with github, but does NOT support bitbucket etc.&lt;/p&gt;

&lt;p&gt;It is FREE for open source projects eg. public Github project.&lt;/p&gt;

&lt;p&gt;First 100 builds are free too, as a trial. Afterwhich, it starts from &lt;a href=&quot;https://travis-ci.com/plans&quot;&gt;$69/mth&lt;/a&gt; for 1 concurrent job. Read about alternatives in last section of this post.&lt;/p&gt;

&lt;h2 id=&quot;setting-up&quot;&gt;&lt;a href=&quot;https://docs.travis-ci.com/user/languages/objective-c/&quot;&gt;Setting Up&lt;/a&gt;&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Create &lt;code class=&quot;highlighter-rouge&quot;&gt;.travis.yml&lt;/code&gt; in project root and configure (see below)&lt;/li&gt;
  &lt;li&gt;Push to repository&lt;/li&gt;
  &lt;li&gt;Sign in your Github account on &lt;a href=&quot;https://travis-ci.com/&quot;&gt;travis-ci.com&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Configure on the dashboard&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The most important step is with &lt;code class=&quot;highlighter-rouge&quot;&gt;.travis.yml&lt;/code&gt; configuration file.&lt;/p&gt;

&lt;p&gt;You can &lt;a href=&quot;https://docs.travis-ci.com/user/customizing-the-build&quot;&gt;customize&lt;/a&gt; all you want. A bare minimum one for swift looks like this:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;osx_image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;xcode9.2&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;swift&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;fastlane run_tests&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;a href=&quot;https://docs.fastlane.tools/actions/scan/&quot;&gt;lane “run_tests”&lt;/a&gt;, builds and run unit tests. The result will then be available to travis-ci.&lt;/p&gt;

&lt;h2 id=&quot;when-to-build&quot;&gt;When to build&lt;/h2&gt;

&lt;p&gt;There are 2 options to turn on/off in the dashboard:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Build branch updates&lt;/li&gt;
  &lt;li&gt;Build pull request updates&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The default is both ON.&lt;/p&gt;

&lt;p&gt;Having (1) ON could be build crazy, because every commit and push will trigger a build. But you could do tweak more, with advanced configuration.&lt;/p&gt;

&lt;h2 id=&quot;when-to-build-advanced&quot;&gt;When to build (Advanced)&lt;/h2&gt;

&lt;p&gt;You may &lt;a href=&quot;https://docs.travis-ci.com/user/customizing-the-build/#Building-Specific-Branches&quot;&gt;further restrict when to build&lt;/a&gt;. You can safelist branches and tags, with regex.&lt;/p&gt;

&lt;p&gt;So let’s say you want only build with tag such as “build-123”, you can use regex in the yaml file:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# safelist&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;branches&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;only&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;master&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/^build-\d+$/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Another way is to write bash commands in the &lt;code class=&quot;highlighter-rouge&quot;&gt;script&lt;/code&gt; phrase.&lt;/p&gt;

&lt;p&gt;For example, if you want to run a lane named “beta” when the commit message has “[beta]” in it:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; 
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;if [[ &quot;$TRAVIS_COMMIT_MESSAGE&quot; = *&quot;[beta]&quot;* ]]; then bundle exec fastlane beta; else bundle exec fastlane some_other_lane; fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;TRAVIS_COMMIT_MESSAGE&lt;/code&gt; is &lt;a href=&quot;https://docs.travis-ci.com/user/environment-variables/#Default-Environment-Variables&quot;&gt;one of many environment variables&lt;/a&gt; provided in travis.&lt;/p&gt;

&lt;h2 id=&quot;after-build-comes-deploy&quot;&gt;After build comes deploy&lt;/h2&gt;

&lt;p&gt;Deploy is an optional phase, the CD in &lt;code class=&quot;highlighter-rouge&quot;&gt;CI/CD&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If build is successful, then the deploy phase will start.&lt;/p&gt;

&lt;p&gt;For iOS, the deploy phase could be pushing the build to Testflight.&lt;/p&gt;

&lt;h2 id=&quot;encrypting-secure-env-var&quot;&gt;Encrypting secure env var&lt;/h2&gt;

&lt;p&gt;In &lt;code class=&quot;highlighter-rouge&quot;&gt;.travis.yml&lt;/code&gt;, you will frequently see &lt;code class=&quot;highlighter-rouge&quot;&gt;secure&lt;/code&gt; key.&lt;/p&gt;

&lt;p&gt;These are &lt;a href=&quot;https://docs.travis-ci.com/user/environment-variables/&quot;&gt;environment variables&lt;/a&gt; that you can use everywhere - travis.yml, Fastfile or any script.&lt;/p&gt;

&lt;p&gt;As they are sensitive values, you have to encrypt them in &lt;code class=&quot;highlighter-rouge&quot;&gt;.travis.yml&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Run this in terminal:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Install the tool&lt;/span&gt;
gem install travis

&lt;span class=&quot;c&quot;&gt;# Login&lt;/span&gt;
travis login &lt;span class=&quot;nt&quot;&gt;--pro&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Encrypt the env var and add to travis.yml&lt;/span&gt;
travis encrypt &lt;span class=&quot;nv&quot;&gt;SOMEVAR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;secretvalue&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--add&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For every key-value, it will add a “secure” to the env.global list.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;secure&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;some-encrypted-value&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;secure&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;another-encrypted-value&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can then &lt;a href=&quot;https://docs.travis-ci.com/user/encryption-keys/&quot;&gt;use the key&lt;/a&gt; eg. &lt;code class=&quot;highlighter-rouge&quot;&gt;SOMEVAR&lt;/code&gt; as an environment variable.&lt;/p&gt;

&lt;h2 id=&quot;bonus-dependencies-in-multiple-repository&quot;&gt;Bonus: Dependencies in multiple repository&lt;/h2&gt;

&lt;p&gt;If your project has &lt;a href=&quot;https://docs.travis-ci.com/user/private-dependencies/&quot;&gt;dependencies to multiple repositories&lt;/a&gt;, there are 2 approach:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Deploy key&lt;/li&gt;
  &lt;li&gt;User key&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;User key is the best practice, with a dedicated &lt;a href=&quot;https://docs.travis-ci.com/user/private-dependencies/#Dedicated-User-Account&quot;&gt;CI user account&lt;/a&gt;. This means creating an independent Github account, with access to those repositories, then generate the user’s SSH key for use in travis.&lt;/p&gt;

&lt;p&gt;User key is preferred over Deploy key because Deploy key is per repo, hence it gets hard to maintain many keys (1 key per repo).&lt;/p&gt;

&lt;h2 id=&quot;alternatives&quot;&gt;Alternatives&lt;/h2&gt;

&lt;p&gt;The thing with Travis CI is that it is expensive, starting from $69/mth.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.atlassian.com/software/bamboo&quot;&gt;Bamboo&lt;/a&gt; is part of Atlassian, so it integrates well with Bitbucket, Jira, etc, and starts from $10/mth. &lt;a href=&quot;https://confluence.atlassian.com/bamboo/xcode-354353193.html&quot;&gt;Setup for Xcode&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.shippable.com/pricing.html&quot;&gt;Shippable&lt;/a&gt; has a generous free hosted service providing 150 builds/mth for private project.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://honzadvorsky.com/articles/2015-08-04-xcs_tutorials_1_getting_started/&quot;&gt;Xcode Server&lt;/a&gt; aka XCS have bots (like jobs). It integrates to Xcode nicely.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://medium.com/@cherrmann.com/continuous-integration-and-delivery-for-ios-with-jenkins-and-fastlane-part-1-3b17f1901a73&quot;&gt;Jenkins&lt;/a&gt; is free and you can self host it, on a macOS machine, that also means maintaining it.&lt;/p&gt;

&lt;p&gt;Also, sample &lt;a href=&quot;https://github.com/spotify/ios-ci&quot;&gt;Spotify CI scripts&lt;/a&gt; for their open source projects. They use Travis CI and others.&lt;/p&gt;
</description>
        <pubDate>Thu, 22 Feb 2018 16:02:51 +0800</pubDate>
        <link>http://localhost:4000/2018/02/22/setting-up-travis-ci-with-fastlane-for-ios-project/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/02/22/setting-up-travis-ci-with-fastlane-for-ios-project/</guid>
        
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>Guide to Creating UIViewController Without Storyboard</title>
        <description>&lt;p&gt;This is a guide on creating your custom &lt;code class=&quot;highlighter-rouge&quot;&gt;UIViewController&lt;/code&gt; with code, without any storyboard/nibs/xibs. You may also be interested in reading &lt;a href=&quot;/2017/11/01/guide-to-creating-custom-uiview/&quot;&gt;guide to creating custom &lt;code class=&quot;highlighter-rouge&quot;&gt;UIView&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;initializer&quot;&gt;Initializer&lt;/h2&gt;

&lt;p&gt;The view controller’s initializer can be bare minimal, but it must use the &lt;a href=&quot;https://developer.apple.com/documentation/uikit/uiviewcontroller/1621359-init&quot;&gt;designated initializer &lt;code class=&quot;highlighter-rouge&quot;&gt;init(nibName:bundle:)&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;nibName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As silly as it sound, you will find the documentation stating:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you subclass UIViewController, you must call the super implementation of this method, even if you aren’t using a NIB… and specify nil for both …&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Yup, that’s proof that Apple prefers storyboard, but we know what’s good for ourselves.&lt;/p&gt;

&lt;p&gt;If you use MVVM, or you require any dependency injection to the view controller, then it will look like this:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;viewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyViewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;someDependency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SomeDependency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;nibName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;viewModel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;viewModel&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;someDependency&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;someDependency&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You may setup lightweight initialization in &lt;code class=&quot;highlighter-rouge&quot;&gt;init&lt;/code&gt;, but you should never setup your views (read on where to do that later).&lt;/p&gt;

&lt;h2 id=&quot;no-need-for-initcoder&quot;&gt;No Need for &lt;code class=&quot;highlighter-rouge&quot;&gt;init(coder:)&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;init(coder:)&lt;/code&gt; is called only when you create your views from storyboard. It will never be invoked since we are going with no-storyboard so we can safely fatal out.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;required&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;coder&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;aDecoder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSCoder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;fatalError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Never will happen&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;create-your-view-in-viewdidload&quot;&gt;Create your view in &lt;code class=&quot;highlighter-rouge&quot;&gt;viewDidLoad&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Take a look at the &lt;a href=&quot;https://rdkw.wordpress.com/2013/02/24/ios-uiviewcontroller-lifecycle/&quot;&gt;life cycle diagram&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Importantly, the diagram is saying that &lt;em&gt;view will be unloaded/deallocated when memory is low&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;If your view is then asked to appear again, it needs to re-loaded.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;viewDidLoad&lt;/code&gt; is where you should create your view, or more specifically, create all your subviews in &lt;code class=&quot;highlighter-rouge&quot;&gt;self.view&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I break the creation of views into 2 stages, in 2 &lt;code class=&quot;highlighter-rouge&quot;&gt;private func&lt;/code&gt;s.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;setupViews&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;bindViews&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;1-setupviews&quot;&gt;1. &lt;code class=&quot;highlighter-rouge&quot;&gt;setupViews()&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Add each subview with &lt;code class=&quot;highlighter-rouge&quot;&gt;view.addSubview(someSubview)&lt;/code&gt;, then setup the layout constraints (we use &lt;a href=&quot;https://github.com/robb/Cartography&quot;&gt;Cartography&lt;/a&gt;, a autolayout helper).&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setupViews&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addSubview&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subview1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;constrain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subview1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subview1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;subview1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;edges&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;edges&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;// Similarly for subview2, subview3, ...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;subview1&lt;/code&gt; is being initialized via lazy loading.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;lazy&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;subview1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;backgroundColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;red&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is equivalent to how you configure a view in Storyboard, but in code, and within the lazy load code block. It is the initial configuration. Afterwhich, you may of course programmatically change any of the properties.&lt;/p&gt;

&lt;h3 id=&quot;2-bindviews&quot;&gt;2. &lt;code class=&quot;highlighter-rouge&quot;&gt;bindViews()&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;This 2nd stage is to bind the views with the model. It sets the actual content of the views.&lt;/p&gt;

&lt;p&gt;In a very simple example, we set the transparency level &lt;code class=&quot;highlighter-rouge&quot;&gt;subview1.alpha&lt;/code&gt; with a view model.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bindViews&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;subview1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;viewModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note that we are “binding” without using any frameworks (such as RxSwift), so this binding is one-time only. If subsequently &lt;code class=&quot;highlighter-rouge&quot;&gt;viewModel.alpha&lt;/code&gt; is changed, the function &lt;code class=&quot;highlighter-rouge&quot;&gt;bindViews()&lt;/code&gt; must be called again to update the view.&lt;/p&gt;

&lt;h2 id=&quot;the-reactive-way&quot;&gt;The Reactive Way&lt;/h2&gt;

&lt;p&gt;Contrast this with using &lt;a href=&quot;https://github.com/ReactiveX/RxSwift&quot;&gt;RxSwift&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bindViews&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;viewModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subview1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;disposed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;disposeBag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Using RxSwift, &lt;code class=&quot;highlighter-rouge&quot;&gt;viewModel.alpha&lt;/code&gt; is an observable, and whenever it observes a new value of alpha, the binding &lt;code class=&quot;highlighter-rouge&quot;&gt;subview1&lt;/code&gt; will be updated automatically.&lt;/p&gt;
</description>
        <pubDate>Wed, 31 Jan 2018 16:43:53 +0800</pubDate>
        <link>http://localhost:4000/2018/01/31/guide-to-creating-uiviewcontroller-without-storyboard/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/01/31/guide-to-creating-uiviewcontroller-without-storyboard/</guid>
        
        
      </item>
    
      <item>
        <title>Localization - Fallback to Base Language</title>
        <description>&lt;p&gt;This post explains how iOS determines the language to use in an app, and how Apple fallback to the next-best default language when necessary.&lt;/p&gt;

&lt;p&gt;Throughout this post, we use the example where &lt;code class=&quot;highlighter-rouge&quot;&gt;en&lt;/code&gt; (English) is the developmen and base language, while &lt;code class=&quot;highlighter-rouge&quot;&gt;zh-Hans&lt;/code&gt; (Chinese) is an additional supported language.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# en Localizable.strings
&quot;awesome-title&quot; = &quot;Hello World&quot;;
&quot;another-title&quot; = &quot;Localization Rocks&quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# zh-Hans Localizable.strings
&quot;awesome-title&quot; = &quot;你好&quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Deliberately, the &lt;code class=&quot;highlighter-rouge&quot;&gt;zh-Hans&lt;/code&gt; strings file is 50% localized (&lt;code class=&quot;highlighter-rouge&quot;&gt;another-title&lt;/code&gt; is not translated).&lt;/p&gt;

&lt;h2 id=&quot;how-apple-determines-the-langauge&quot;&gt;How Apple determines the langauge&lt;/h2&gt;

&lt;p&gt;Apple &lt;a href=&quot;https://developer.apple.com/library/content/qa/qa1828/_index.html&quot;&gt;explains the process&lt;/a&gt;. Here is the “alogrithm” in pseudocode:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func determineTheLanguageToUse():
  for each user's preferredLanguages
    if app supports the language
      return the language
    if app supports a more generic dialect
      return the generic language

  # Exhausted preferredLanguages and still cannot determine..
  return CFBundleDevelopmentRegion
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;User’s &lt;code class=&quot;highlighter-rouge&quot;&gt;preferredLanguages&lt;/code&gt; is those listed in &lt;strong&gt;Settings App &amp;gt; General &amp;gt; Language &amp;amp; Region&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The algo starts with the most preferred language, checks if the app supports it (or a more generic dialect), before finally using &lt;code class=&quot;highlighter-rouge&quot;&gt;CFBundleDevelopmentRegion&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;There are different cases of fallback. Let’s look at them in detail.&lt;/p&gt;

&lt;h2 id=&quot;fallback-1-generic-dialect&quot;&gt;Fallback 1: Generic Dialect&lt;/h2&gt;

&lt;p&gt;In the algo, iOS will check if there is a more generic dialect for the preferred language, and if so return that.&lt;/p&gt;

&lt;p&gt;What is a &lt;strong&gt;more generic dialect&lt;/strong&gt;? &lt;code class=&quot;highlighter-rouge&quot;&gt;en&lt;/code&gt; is more generic than &lt;code class=&quot;highlighter-rouge&quot;&gt;en-GB&lt;/code&gt; (British English). In our example, if user prefers &lt;code class=&quot;highlighter-rouge&quot;&gt;en-GB&lt;/code&gt;, then &lt;code class=&quot;highlighter-rouge&quot;&gt;en&lt;/code&gt; will be used.&lt;/p&gt;

&lt;p&gt;This is because the app does NOT have &lt;code class=&quot;highlighter-rouge&quot;&gt;en-GB&lt;/code&gt;, but &lt;code class=&quot;highlighter-rouge&quot;&gt;en&lt;/code&gt; is good enough.&lt;/p&gt;

&lt;p&gt;The other way round is not true. If the app supports &lt;code class=&quot;highlighter-rouge&quot;&gt;en-GB&lt;/code&gt; (and not &lt;code class=&quot;highlighter-rouge&quot;&gt;en&lt;/code&gt;), then if user prefers &lt;code class=&quot;highlighter-rouge&quot;&gt;en&lt;/code&gt;, then &lt;code class=&quot;highlighter-rouge&quot;&gt;en-GB&lt;/code&gt; will not be the fallback – because &lt;code class=&quot;highlighter-rouge&quot;&gt;en-GB&lt;/code&gt; is &lt;em&gt;not&lt;/em&gt; more generic.&lt;/p&gt;

&lt;h2 id=&quot;fallback-2-unsupported-language&quot;&gt;Fallback 2: Unsupported Language&lt;/h2&gt;

&lt;p&gt;An unsupported language is when all &lt;code class=&quot;highlighter-rouge&quot;&gt;preferredLanguages&lt;/code&gt; is exhausted, and the app does not have a suitable language to use.&lt;/p&gt;

&lt;p&gt;For example if a user prefers &lt;code class=&quot;highlighter-rouge&quot;&gt;ms&lt;/code&gt; (Malay), but which the app does not support at all, then the language specified in &lt;code class=&quot;highlighter-rouge&quot;&gt;CFBundleDevelopmentRegion&lt;/code&gt; of the Info.plist will be used. This is aka the &lt;strong&gt;localization native development region&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This is a very common case. When we lanuch an app, we probably support only a few languages, or just one!&lt;/p&gt;

&lt;h2 id=&quot;fallback-3-unsupported-phrase&quot;&gt;Fallback 3: Unsupported Phrase&lt;/h2&gt;

&lt;p&gt;This is an obscure case, and is not mention in Apple’s documentation, nor in the alogrithm.&lt;/p&gt;

&lt;p&gt;Let’s take the example where a user prefers &lt;code class=&quot;highlighter-rouge&quot;&gt;zh-Hans&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;What happens when iOS try to get the &lt;code class=&quot;highlighter-rouge&quot;&gt;NSLocalizedString&lt;/code&gt; of “another-title”?&lt;/p&gt;

&lt;p&gt;Remember, &lt;code class=&quot;highlighter-rouge&quot;&gt;zh-Hans&lt;/code&gt; is not fully translated. It does not have “another-title”. What do you think will happen?&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Fallback to development language &lt;code class=&quot;highlighter-rouge&quot;&gt;en&lt;/code&gt; or&lt;/li&gt;
  &lt;li&gt;Return “another-title”&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Many developers think it is (1). Unfortunately, it is (2), with that ugly key name!&lt;/p&gt;

&lt;p&gt;If you refer to the &lt;code class=&quot;highlighter-rouge&quot;&gt;determineTheLanguageToUse&lt;/code&gt; algo, the language to use is still &lt;code class=&quot;highlighter-rouge&quot;&gt;zh-Hans&lt;/code&gt;, regardless that it is incomplete. It can’t find “another-title”, so it just return the key as value..&lt;/p&gt;

&lt;p&gt;iOS should really improve on this fallback behaviour.. for now, we need some custom code.&lt;/p&gt;

&lt;h2 id=&quot;the-fallback-code&quot;&gt;The Fallback Code&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;LS&lt;/code&gt; is a global function to replace &lt;code class=&quot;highlighter-rouge&quot;&gt;NSLocalizedString&lt;/code&gt;. It is a shorthand, with added fallback capability:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;LS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSLocalizedString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;comment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSLocale&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;preferredLanguages&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;en&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Fall back to en&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bundle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;forResource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ofType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;lproj&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bundle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSLocalizedString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;comment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When a phrase is not yet translated, it will be &lt;code class=&quot;highlighter-rouge&quot;&gt;value == key&lt;/code&gt;, which is dumb, so we fall back to using &lt;code class=&quot;highlighter-rouge&quot;&gt;en&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The rest of the code is simply geting &lt;code class=&quot;highlighter-rouge&quot;&gt;NSLocalizedString&lt;/code&gt; from the en bundle.&lt;/p&gt;

&lt;h2 id=&quot;more-resourses&quot;&gt;More Resourses&lt;/h2&gt;

&lt;p&gt;Apple’s &lt;a href=&quot;https://developer.apple.com/library/content/technotes/tn2418/_index.html&quot;&gt;Technical Note on language identifiers&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 23 Jan 2018 15:49:41 +0800</pubDate>
        <link>http://localhost:4000/2018/01/23/localization-fall-back-to-base-language/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/01/23/localization-fall-back-to-base-language/</guid>
        
        
        <category>Localization</category>
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>UI Testing With BrowserStack Cloud Devices</title>
        <description>&lt;p&gt;This guide is on using BrowserStack to run UI Tests on cloud devices.&lt;/p&gt;

&lt;p&gt;I don’t recommend using BrowserStack, unless you need:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;UI Testing with cloud devices&lt;/li&gt;
  &lt;li&gt;Want the same stack for testing across all platforms (Android, iOS, Web)&lt;/li&gt;
  &lt;li&gt;Probably a dedicated QA engineer&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;if-you-are-an-indie&quot;&gt;If you are an indie..&lt;/h2&gt;

&lt;p&gt;If you don’t need all of the above, and is just an indie, focusing on iOS, then keep it simple.&lt;/p&gt;

&lt;p&gt;For UI Testing, use &lt;code class=&quot;highlighter-rouge&quot;&gt;XCUITest&lt;/code&gt; framework and add test cases to the project in Xcode. Make use of the UI recorder.&lt;/p&gt;

&lt;p&gt;Run on as many simulators.&lt;/p&gt;

&lt;p&gt;Integrate to your CI tool eg. travis.&lt;/p&gt;

&lt;h2 id=&quot;ok-so-you-want-browserstack&quot;&gt;Ok, so you want BrowserStack..&lt;/h2&gt;

&lt;p&gt;But if you are still here, ok, I have &lt;em&gt;some guide&lt;/em&gt; for you, because the ecosystem is just too complicated. Many things are never explained.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.browserstack.com/app-automate/appium-webdriverio#integration-with-browserstack&quot;&gt;BrowserStack documentation&lt;/a&gt; is terrible. They will guide you on how to set up with Appium, that’s all.&lt;/p&gt;

&lt;p&gt;BrowserStack main contribution is their cloud devices, aka the &lt;a href=&quot;https://www.browserstack.com/app-automate/capabilities&quot;&gt;capabilities&lt;/a&gt; you can use.&lt;/p&gt;

&lt;h2 id=&quot;its-all-about-appium&quot;&gt;It’s all about Appium&lt;/h2&gt;

&lt;p&gt;You need to &lt;a href=&quot;http://appium.io/docs/en/about-appium/intro/?lang=en&quot;&gt;understand Appium&lt;/a&gt;, know the goals, and how they achieve it.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You test on the same compiled app you ship to App Store&lt;/li&gt;
  &lt;li&gt;Appium use vendor supplied framework eg XCUITest under the hood&lt;/li&gt;
  &lt;li&gt;WebDriver API wraps the hood, providing a REST + JSON API to drive the tests&lt;/li&gt;
  &lt;li&gt;WebDriver is the same protocol as Selenium&lt;/li&gt;
  &lt;li&gt;Extend WebDriver for mobile automation&lt;/li&gt;
  &lt;li&gt;Appium is open source&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Appium has a &lt;strong&gt;server-client architecture&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;BrowserStack simply runs the server part.&lt;/p&gt;

&lt;h2 id=&quot;webdriverio-as-client&quot;&gt;WebDriver.io as client&lt;/h2&gt;

&lt;p&gt;You need to use a client and write the tests, and WebDriver.io is one such client. There are &lt;a href=&quot;https://github.com/webdriverio/webdriverio/issues/138&quot;&gt;others&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let’s look at the JS code that uses webdriver.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'should show do something'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;browser&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;waitForVisible&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'//XCUIElementTypeOther[@name=&quot;container-foo&quot;]/XCUIElementTypeCollectionView/XCUIElementTypeCell[1]/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;visible&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;visible&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;be&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'~some-accessibility-id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Each of the API called from &lt;code class=&quot;highlighter-rouge&quot;&gt;browser&lt;/code&gt; is &lt;a href=&quot;http://webdriver.io/api.html&quot;&gt;WebDriver’s API&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;selector&quot;&gt;Selector&lt;/h2&gt;

&lt;p&gt;In the code, we illustrated 2 ways you can refer to UI elements.&lt;/p&gt;

&lt;p&gt;Using &lt;strong&gt;accessibility identifer&lt;/strong&gt; such as &lt;code class=&quot;highlighter-rouge&quot;&gt;~some-accessibility-id&lt;/code&gt; is the preferred way.&lt;/p&gt;

&lt;p&gt;Because &lt;strong&gt;Xpath&lt;/strong&gt; is not stable on Appium!&lt;/p&gt;

&lt;p&gt;Note: Don’t use the &lt;a href=&quot;https://github.com/appium/appium/blob/master/docs/en/advanced-concepts/migrating-to-xcuitest.md&quot;&gt;old UIAutomation framework selector&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;appium-inspector&quot;&gt;Appium Inspector&lt;/h2&gt;

&lt;p&gt;You can easily find the Xpath by using the &lt;a href=&quot;https://github.com/appium/appium-desktop&quot;&gt;Appium Desktop Inspector app&lt;/a&gt;.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Start Server&lt;/li&gt;
  &lt;li&gt;Start Inspector Session&lt;/li&gt;
  &lt;li&gt;Create and save a capability&lt;/li&gt;
  &lt;li&gt;One of the capability you must add is &lt;code class=&quot;highlighter-rouge&quot;&gt;app&lt;/code&gt; which points to your IPA file eg &lt;code class=&quot;highlighter-rouge&quot;&gt;/Users/junda/Library/Developer/Xcode/DerivedData/MyApp-avrefqcpyqccstgkxgaottezlrvt/Build/Products/Debug-iphonesimulator/MyAPp.app&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Start Session&lt;/li&gt;
  &lt;li&gt;Xcode simulator will run and you can inspect!&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Tue, 09 Jan 2018 16:53:56 +0800</pubDate>
        <link>http://localhost:4000/2018/01/09/ui-testing-with-browserstack-cloud-devices/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/01/09/ui-testing-with-browserstack-cloud-devices/</guid>
        
        
        <category>Testing</category>
        
      </item>
    
      <item>
        <title>Developer Guide to Support iPhone X</title>
        <description>&lt;p&gt;iPhone X introduced The Notch, The Home Indicator, Safe Area, and a different resolution form factor..&lt;/p&gt;

&lt;p&gt;UI design is much affected.&lt;/p&gt;

&lt;p&gt;This post is a guide walking through various aspect and how it affects development.&lt;/p&gt;

&lt;p&gt;Let’s start with the biggest change in the phone.&lt;/p&gt;

&lt;h2 id=&quot;the-notch&quot;&gt;The Notch&lt;/h2&gt;

&lt;p&gt;I like &lt;a href=&quot;http://blog.maxrudberg.com/post/166045445103/ui-design-for-iphone-x-top-elements-and-the-notch&quot;&gt;maxrudberg’s mentality&lt;/a&gt; towards The Notch:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Eventually, they will get rid of the notch. It could be 2, 5, or even 10 years, but it’s a stop gap, not a permanent design solution. In the meantime, treat it like the elephant in the room. We all know it’s there, but for the most part, you should design as if it’s not.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Apple’s Music app and etc uses Card style, and that is against their guideline towards the top notch space.&lt;/p&gt;

&lt;p&gt;So, don’t always follow guidelines.&lt;/p&gt;

&lt;h2 id=&quot;the-home-indicator&quot;&gt;The Home Indicator&lt;/h2&gt;

&lt;p&gt;Unlike The Notch, the home indicator is a software element. It is a UI on the screen, at the bottom.&lt;/p&gt;

&lt;p&gt;To allow auto hide (after user not touching screen) for a view controller:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;prefersHomeIndicatorAutoHidden&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But &lt;a href=&quot;https://medium.com/the-traveled-ios-developers-guide/iphone-x-dealing-with-home-indicator-2e8e47f5647f&quot;&gt;note&lt;/a&gt; the comment in the doc:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The system takes your preference into account, but returning YES is not a guarantee that an indicator will be hidden.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;nav-bar&quot;&gt;Nav bar&lt;/h2&gt;

&lt;p&gt;iOS automatically fills a nav bar background for the extra space at the top.&lt;/p&gt;

&lt;p&gt;Use &lt;strong&gt;black&lt;/strong&gt; and it blends with the Notch.&lt;/p&gt;

&lt;p&gt;Use &lt;strong&gt;transparent&lt;/strong&gt; and extend your content view beyond.&lt;/p&gt;

&lt;h2 id=&quot;status-bar-when-you-have-nav-bar&quot;&gt;Status Bar when you have Nav Bar&lt;/h2&gt;

&lt;p&gt;There is an &lt;a href=&quot;https://forums.developer.apple.com/thread/88962&quot;&gt;undocumented behaviour&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you want to hide the status bar on iPhone X, you should also hide the navigation bar, otherwise you should leave both visible. This is the behavior that UINavigationController implements.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you implemented &lt;a href=&quot;https://developer.apple.com/documentation/uikit/uiviewcontroller/1621440-prefersstatusbarhidden&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;prefersStatusBarHidden&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://developer.apple.com/documentation/uikit/uiviewcontroller/1621451-childviewcontrollerforstatusbarh&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;childViewControllerForStatusBarHidden&lt;/code&gt;&lt;/a&gt;, they will NOT work as intended, if you have the navigation bar shown.&lt;/p&gt;

&lt;p&gt;Status bar will always be shown, if navigation bar is shown.&lt;/p&gt;

&lt;p&gt;You may only &lt;strong&gt;control the color&lt;/strong&gt; of the status bar.&lt;/p&gt;

&lt;p&gt;&lt;del&gt;This &lt;a href=&quot;http://stackoverflow.com/a/19513714/242682&quot;&gt;method is weird&lt;/a&gt;, but yes it works.&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;This &lt;a href=&quot;https://stackoverflow.com/a/42301499/242682&quot;&gt;extension&lt;/a&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;UINavigationController&lt;/code&gt; is the cleanest solution (another alternative is subclass it).&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UINavigationController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;childViewControllerForStatusBarStyle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;topViewController&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;table-view&quot;&gt;Table View&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UITableView&lt;/code&gt; should still layout edge to edge (NOT to safe area).&lt;/p&gt;

&lt;p&gt;Instead, the &lt;strong&gt;content inset&lt;/strong&gt; should be mark safe via &lt;a href=&quot;https://developer.apple.com/documentation/uikit/uitableview/2921665-insetscontentviewstosafearea&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;insetsContentViewsToSafeArea&lt;/code&gt;&lt;/a&gt; (new in iOS 11).&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;#available(iOS 11.0, *)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insetsContentViewsToSafeArea&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;scroll-view&quot;&gt;Scroll View&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/documentation/uikit/uiscrollview/2902261-contentinsetadjustmentbehavior&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;contentInsetAdjustmentBehavior&lt;/code&gt;&lt;/a&gt; provides more control on how safe area modifies the content inset.&lt;/p&gt;

&lt;h2 id=&quot;search-controller&quot;&gt;Search Controller&lt;/h2&gt;

&lt;p&gt;iOS seems to be not adjusting correctly for search controller. Fixed with:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contentInsetAdjustmentBehavior&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;never&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;/2016/11/27/uisearchcontroller-development-guide/&quot;&gt;Search controller&lt;/a&gt; is a difficult topic, and with iPhone X the recommended way is to set the search bar in the nav bar.&lt;/p&gt;

&lt;h2 id=&quot;storyboard&quot;&gt;Storyboard&lt;/h2&gt;

&lt;p&gt;If you use storyboard, in File Inspector, check &lt;strong&gt;Use Safe Area Layout Guides&lt;/strong&gt;, and interface builder will replace the old top bottom layout guides with the new safe area.&lt;/p&gt;

&lt;p&gt;After which, it is up to you to make changes depending on your UI.&lt;/p&gt;

&lt;p&gt;Some pointers:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;For table view, don’t &lt;strong&gt;Clip to Bounds&lt;/strong&gt; (under Attributes Inspector)&lt;/li&gt;
  &lt;li&gt;For cutom bottom tool bar, you can provide a background for the void occupied by Home Indicator&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are more guides. &lt;a href=&quot;https://developer.apple.com/ios/update-apps-for-iphone-x/&quot;&gt;Apple official guide&lt;/a&gt;, and &lt;a href=&quot;https://useyourloaf.com/blog/supporting-iphone-x/&quot;&gt;many&lt;/a&gt; &lt;a href=&quot;https://medium.com/rosberryapps/ios-safe-area-ca10e919526f&quot;&gt;more&lt;/a&gt;. &lt;a href=&quot;https://designcode.io/ios11-iphone-x&quot;&gt;Designcode.io&lt;/a&gt; summed up well, with many valuable resources for design. &lt;a href=&quot;https://iosdesignkit.io/ios-11-gui/&quot;&gt;Sketch file&lt;/a&gt; &amp;amp; &lt;a href=&quot;http://v1.designcode.io/angle&quot;&gt;device mockups&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Thu, 21 Dec 2017 11:49:22 +0800</pubDate>
        <link>http://localhost:4000/2017/12/21/developer-guide-to-support-iphone-x/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/12/21/developer-guide-to-support-iphone-x/</guid>
        
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>Guide to Universal Links</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/library/content/documentation/General/Conceptual/AppSearch/UniversalLinks.html&quot;&gt;Universal links&lt;/a&gt; are HTTP links that open your app, instead of the website in Safari.&lt;/p&gt;

&lt;p&gt;The old way is called deeplink – where every app register it’s own schema eg. &lt;code class=&quot;highlighter-rouge&quot;&gt;myapp://&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Universal links bring closer synergy between web and app with the familiar &lt;code class=&quot;highlighter-rouge&quot;&gt;https://&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;step-1-apple-app-site-association-json-file&quot;&gt;Step 1. apple-app-site-association JSON file&lt;/h2&gt;

&lt;p&gt;This &lt;strong&gt;association file&lt;/strong&gt; (AASA) is to establish the trust between your domain/server/website with your app.&lt;/p&gt;

&lt;p&gt;Among the 3 steps, this step is the most complicated.&lt;/p&gt;

&lt;p&gt;Let’s use an example of a &lt;code class=&quot;highlighter-rouge&quot;&gt;apple-app-site-association&lt;/code&gt; file (note, there is no file extension):&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;applinks&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;apps&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;details&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;appID&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;9JA89QQLNQ.com.apple.wwdc&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;paths&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/wwdc/news/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;NOT /videos/wwdc/2010/*&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/videos/wwdc/201?/*&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;appID&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ABCD1234.com.apple.messaging&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;paths&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;*&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;details&lt;/code&gt; array is a list, with implicit priority in matching the paths.&lt;/p&gt;

&lt;p&gt;You can support multiple apps as each detail has it’s own &lt;code class=&quot;highlighter-rouge&quot;&gt;appID&lt;/code&gt;. The &lt;code class=&quot;highlighter-rouge&quot;&gt;appID&lt;/code&gt; is made up of the team ID and the bundle ID.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;paths&lt;/code&gt; is a list of paths and:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You can exclude paths by using &lt;code class=&quot;highlighter-rouge&quot;&gt;NOT&lt;/code&gt; prefix&lt;/li&gt;
  &lt;li&gt;The system evaluate each path in order&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;step-15-optional-sign-it-or-not&quot;&gt;Step 1.5 (Optional) Sign it or not&lt;/h2&gt;

&lt;p&gt;If you only need universal link, this is optional.&lt;/p&gt;

&lt;p&gt;But if you want to support &lt;a href=&quot;https://developer.apple.com/documentation/security/shared_web_credentials&quot;&gt;Shared Web Credentials&lt;/a&gt; and Handsoff, then you must sign the AASA file.&lt;/p&gt;

&lt;h2 id=&quot;step-2-upload-to-server&quot;&gt;Step 2. Upload to server&lt;/h2&gt;

&lt;p&gt;You must make the AASA file crawlable by Apple bot, and can either place in:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;https://mydomain.com/apple-app-site-association&lt;/li&gt;
  &lt;li&gt;https://mydomain.com/.well-known/apple-app-site-association&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The following is important, yet it is not stated in the Apple’s guide (but you can find in the &lt;a href=&quot;https://developer.apple.com/library/content/qa/qa1916/_index.html&quot;&gt;troubleshooting FAQ&lt;/a&gt;):&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The AASA file must NOT be served through a 3xx redirect. Make sure this file is served without any redirects.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And via HTTPS/SSL. And HTTP Content-type must be &lt;code class=&quot;highlighter-rouge&quot;&gt;application/json&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;del&gt;&lt;a href=&quot;https://search.developer.apple.com/appsearch-validation-tool&quot;&gt;Validate with Apple Bot&lt;/a&gt;, and &lt;strong&gt;Link to Application&lt;/strong&gt; should pass.&lt;/del&gt; Apple’s tool is unreliable, so instead use &lt;a href=&quot;http://branch.io/resources/aasa-validator/&quot;&gt;Branch.io’s tool&lt;/a&gt;,or &lt;a href=&quot;https://limitless-sierra-4673.herokuapp.com&quot;&gt;this heroku app&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;step-3-add-entitlement-in-app&quot;&gt;Step 3. Add entitlement in app&lt;/h2&gt;

&lt;p&gt;Go to your target &amp;gt; Capabilities &amp;gt; Associated Domains, and include the domains that your app wants to handle.&lt;/p&gt;

&lt;p&gt;You MUST prefix with &lt;code class=&quot;highlighter-rouge&quot;&gt;applinks:&lt;/code&gt; eg. &lt;code class=&quot;highlighter-rouge&quot;&gt;applinks:mydomain.com&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The system uses the longest substring matching.&lt;/p&gt;

&lt;p&gt;When matched, it will trigger an NSUserActivity in your app delegate.&lt;/p&gt;

&lt;h2 id=&quot;step-4-handle-nsuseractivity&quot;&gt;Step 4. Handle NSUserActivity&lt;/h2&gt;

&lt;p&gt;Implement &lt;a href=&quot;https://developer.apple.com/documentation/uikit/uiapplicationdelegate/1623072-application&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;application:continueUserActivity:restorationHandler:&lt;/code&gt;&lt;/a&gt; in your app delegate.&lt;/p&gt;

&lt;p&gt;The same handler is used for Handsoff or Spotlight search. So how do you differentiate it is handling for tapping universal links? Look at &lt;code class=&quot;highlighter-rouge&quot;&gt;activityType&lt;/code&gt; of &lt;a href=&quot;https://developer.apple.com/documentation/foundation/nsuseractivity&quot;&gt;NSUserActivity&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;userActivity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSUserActivity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;restorationHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;@escaping&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]?)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userActivity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;activityType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;  &lt;span class=&quot;kt&quot;&gt;NSUserActivityTypeBrowsingWeb&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// Handle universal link&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userActivity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;webpageURL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// Handle it..&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userActivity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;activityType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CSSearchableItemActionType&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// Handle spotlight search&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;step-5-test-it&quot;&gt;Step 5. Test it&lt;/h2&gt;

&lt;p&gt;Your integration test flow:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Uninstall your app&lt;/li&gt;
  &lt;li&gt;Install from Xcode (or TestFlight)&lt;/li&gt;
  &lt;li&gt;Test a universal link in eg Email, Notes&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It seems like when you install your app during development, or beta from TestFlight, Apple bot will crawl the AASA file. That’s the trigger. That’s how you test universal links during development.&lt;/p&gt;

&lt;h2 id=&quot;when-will-it-open-app&quot;&gt;When will it open app?&lt;/h2&gt;

&lt;p&gt;If you reach here, then your app should be working with universal links.&lt;/p&gt;

&lt;p&gt;But there are many pitfalls with universal links.&lt;/p&gt;

&lt;p&gt;Sometimes, it doesn’t open as expected. Here is why it does NOT open your app:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;In Safari, if user enter the domain in URL search bar&lt;/li&gt;
  &lt;li&gt;In Safari, clicking on the same domain&lt;/li&gt;
  &lt;li&gt;When your app is opened, but user tap on the top left breadcrumb that “Opens Safari”&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;more-on-the-breadcrumb&quot;&gt;More on the breadcrumb&lt;/h2&gt;

&lt;p&gt;iOS remembers the choice the user made when opening the universal link the first time.&lt;/p&gt;

&lt;p&gt;Users could tap on the top left breadcrumb in status bar that says “Back to Safari”, and iOS will remember that the user does NOT want to open that in app!&lt;/p&gt;

&lt;p&gt;Afterwhich, iOS continues to open your website in Safari until the user chooses to open your app &lt;strong&gt;by tapping OPEN in the Smart App Banner&lt;/strong&gt; on the webpage. See these &lt;a href=&quot;https://stackoverflow.com/a/39694208/242682&quot;&gt;screenshots&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;a-big-tip&quot;&gt;A BIG Tip&lt;/h2&gt;

&lt;p&gt;Another way is &lt;strong&gt;long pressing a link&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This will provide 2 options in a alert:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Open in Safari&lt;/li&gt;
  &lt;li&gt;Open in “Your App”&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you see (2), you know your universal link integration worked.&lt;/p&gt;

&lt;p&gt;And now, whichever option the user chooses, iOS will remember it as The Choice.&lt;/p&gt;

&lt;h2 id=&quot;wkwebviewuiwebview&quot;&gt;WKWebView/UIWebView&lt;/h2&gt;

&lt;p&gt;We know universal links when tapped in Safari or Messages or etc will open the app (if possible).&lt;/p&gt;

&lt;p&gt;What about in web views in other apps?&lt;/p&gt;

&lt;p&gt;Quoting my previous &lt;a href=&quot;http://samwize.com/2016/06/08/complete-guide-to-implementing-wkwebview/&quot;&gt;guide in WKWebView&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;As noted in Apple Doc, iOS 9 users can tap on universal links in WKWebView, and it will open the app. It is the same for UIWebView and SFSafariViewController.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;However, recently there seems to be a &lt;a href=&quot;https://stackoverflow.com/a/44942814/242682&quot;&gt;hack&lt;/a&gt; to NOT open the app. Use it to your advantage.&lt;/p&gt;

&lt;h2 id=&quot;troubleshooting&quot;&gt;Troubleshooting&lt;/h2&gt;

&lt;p&gt;It could be frustrating to troubleshoot, so here is a list &lt;a href=&quot;http://building.usebutton.com/debugging/ios/deep-linking/links/universal-links/2016/03/31/debugging-universal-links/&quot;&gt;things to debug&lt;/a&gt;, more on the &lt;a href=&quot;https://sailthru.zendesk.com/hc/en-us/articles/217102466-Universal-Links-Troubleshooting-and-FAQ&quot;&gt;paths in AASA&lt;/a&gt;, the previously mentioned non-Apple &lt;a href=&quot;https://limitless-sierra-4673.herokuapp.com&quot;&gt;AASA validation tool&lt;/a&gt;, and good to know that it seems like the AASA file is fetched on the device everytime the app is &lt;a href=&quot;https://stackoverflow.com/a/35616335/242682&quot;&gt;installed/updated&lt;/a&gt;, and then cached.&lt;/p&gt;

&lt;p&gt;If still didn’t work, at least know there are others who &lt;a href=&quot;https://medium.com/mobile-growth/the-things-i-hate-and-you-should-know-about-apple-universal-links-5beb15f88a29&quot;&gt;hate&lt;/a&gt; it too.&lt;/p&gt;

&lt;p&gt;Try restarting your device too. It did happen to me once during development where it just won’t fetch from any of the applinks domain, until I restart my phone.&lt;/p&gt;
</description>
        <pubDate>Fri, 10 Nov 2017 11:32:18 +0800</pubDate>
        <link>http://localhost:4000/2017/11/10/guide-to-universal-links/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/11/10/guide-to-universal-links/</guid>
        
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>Guide to Creating Custom UIView</title>
        <description>&lt;p&gt;This is a guide to creating custom &lt;code class=&quot;highlighter-rouge&quot;&gt;UIView&lt;/code&gt; using Auto Layout, without Nib/Storyboard, and in Swift 4.&lt;/p&gt;

&lt;h2 id=&quot;why-custom-uiview&quot;&gt;Why custom UIView?&lt;/h2&gt;

&lt;p&gt;We create custom view when the controls from UIKit is not sufficient to do your job.&lt;/p&gt;

&lt;p&gt;Custom view will be composed of other views, with certain custom behaviours.&lt;/p&gt;

&lt;p&gt;There are often times when you construct your storyboard or init your view controller with multiple views, but they could – alternatively – be accomplished with a custom view.&lt;/p&gt;

&lt;h2 id=&quot;about-initializers&quot;&gt;About Initializers&lt;/h2&gt;

&lt;p&gt;It is important to learn the fundamental about &lt;a href=&quot;https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Initialization.html&quot;&gt;Swift initialization&lt;/a&gt;. It is a complex and lengthy topic, but will be useful in understanding because our custom view subclass &lt;code class=&quot;highlighter-rouge&quot;&gt;UIView&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;designated-initializer&quot;&gt;Designated initializer&lt;/h3&gt;

&lt;p&gt;You specify a designated initializer by &lt;em&gt;not&lt;/em&gt; specifying &lt;code class=&quot;highlighter-rouge&quot;&gt;convenience&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Subclass MUST call it’s superclass designated initializer – not difficult to reason because without so, the superclass would not be completely initialized.&lt;/p&gt;

&lt;h3 id=&quot;convenience-initializer&quot;&gt;Convenience initializer&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;convenience&lt;/code&gt; is secondary/optional, and is simply shortcut to calling designated initializer.&lt;/p&gt;

&lt;h3 id=&quot;required-init&quot;&gt;Required init&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;required&lt;/code&gt; specify that subclasses must implement the initialization. &lt;code class=&quot;highlighter-rouge&quot;&gt;UIView&lt;/code&gt; has such an init because it conforms to &lt;a href=&quot;https://developer.apple.com/documentation/foundation/nscoding&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NSCoding&lt;/code&gt;&lt;/a&gt;, a protocol for the view to be encoded and decoded for archiving.&lt;/p&gt;

&lt;p&gt;Our custom view has to implement (it is an override, but without the override modifier), and decode to init the view.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;required&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;coder&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;aDecoder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSCoder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;coder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aDecoder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Custom decoding..&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But, you probably will not have any custom decoding, because archiving a view is a bad idea (instead you should archive the model).&lt;/p&gt;

&lt;p&gt;The corresponding func is &lt;a href=&quot;https://developer.apple.com/documentation/foundation/nscoding/1413933-encode&quot;&gt;encoding&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;our-custom-view-initializers&quot;&gt;Our custom view initializers&lt;/h2&gt;

&lt;p&gt;With the basics of initializers explained, a custom view will usually need a few inits like this:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AppIconView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIView&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;// #1&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;required&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;coder&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;aDecoder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSCoder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;coder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aDecoder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;setupView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// #2&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGRect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;setupView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;    
    
    &lt;span class=&quot;c1&quot;&gt;// #3&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;convenience&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zero&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;setupView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setupView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;translatesAutoresizingMaskIntoConstraints&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
        
        &lt;span class=&quot;c1&quot;&gt;// Create, add and layout the children views ..&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There are 3 inits and here is why:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Because &lt;code class=&quot;highlighter-rouge&quot;&gt;UIView&lt;/code&gt; &lt;strong&gt;required&lt;/strong&gt; it&lt;/li&gt;
  &lt;li&gt;Because #3 will need to call a designated initializer (we choose #2 over #1)&lt;/li&gt;
  &lt;li&gt;Our own initializer with the data for the view&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In each of the init, we will call &lt;code class=&quot;highlighter-rouge&quot;&gt;setupView()&lt;/code&gt; – which is the one place where we will layout the custom view.&lt;/p&gt;

&lt;h3 id=&quot;translatesautoresizingmaskintoconstraints&quot;&gt;translatesAutoresizingMaskIntoConstraints&lt;/h3&gt;

&lt;p&gt;Every view that uses auto layout should set &lt;code class=&quot;highlighter-rouge&quot;&gt;translatesAutoresizingMaskIntoConstraints&lt;/code&gt; to false. That is the very first thing to do in &lt;code class=&quot;highlighter-rouge&quot;&gt;setupView()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This is because in days before we have Auto Layout, there is the concept of auto resizing. Via &lt;code class=&quot;highlighter-rouge&quot;&gt;autoresizingMask&lt;/code&gt;, a view will auto resize, similar to auto layout.&lt;/p&gt;

&lt;p&gt;But we don’t use auto resize anymore, now that we have auto layout.&lt;/p&gt;

&lt;h3 id=&quot;intrinsic-content-size&quot;&gt;Intrinsic Content Size&lt;/h3&gt;

&lt;p&gt;The &lt;strong&gt;natural size&lt;/strong&gt; for it’s content eg. &lt;code class=&quot;highlighter-rouge&quot;&gt;UILabel&lt;/code&gt; intrinsic size is the length of the text.&lt;/p&gt;

&lt;p&gt;Apple’s &lt;a href=&quot;https://developer.apple.com/library/content/documentation/UserExperience/Conceptual/AutolayoutPG/AnatomyofaConstraint.html#//apple_ref/doc/uid/TP40010853-CH9-SW21&quot;&gt;auto layout guide&lt;/a&gt; has a section on it, and a &lt;a href=&quot;https://developer.apple.com/library/content/documentation/UserExperience/Conceptual/AutolayoutPG/ViewswithIntrinsicContentSize.html&quot;&gt;cook book&lt;/a&gt; of common scenarios.&lt;/p&gt;

&lt;p&gt;How does it work?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;It generates a pair of constraints for each dimension (width &amp;amp; height). The pair constrain the compression resistance (priority 750) and content hugging (priority 250).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Intrinsic content size simplifies auto layout, reducing number of constraints needed, because those constraints are added for you. You only need to manage the priority.&lt;/p&gt;

&lt;p&gt;It is a helper, and you ought to understand that it adds constraints for you.&lt;/p&gt;

&lt;p&gt;Let’s say we want our custom view to have a fixed height, but varying width, we can override the &lt;code class=&quot;highlighter-rouge&quot;&gt;intrinsicContentSize&lt;/code&gt; like this.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;intrinsicContentSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGSize&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Your calculated or fixed height&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIViewNoIntrinsicMetric&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As a rule of thumb: &lt;strong&gt;custom view should never create constraint for it’s own width and height&lt;/strong&gt; (obviously also not for it’s postion x &amp;amp; y).&lt;/p&gt;

&lt;p&gt;But sometimes you want to &lt;em&gt;conveniently constraint your size&lt;/em&gt;. This is where intrinsic content size comes in.&lt;/p&gt;

&lt;h3 id=&quot;fitting-size&quot;&gt;Fitting Size&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Intrinsic size is an input&lt;/strong&gt; to Auto Layout engine (which in turn generates/output constraints about it’s size).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fitting size is an output&lt;/strong&gt; from Auto Layout engine.&lt;/p&gt;

&lt;p&gt;Fitting size is the size calculated to fit the content.&lt;/p&gt;

&lt;p&gt;Use &lt;a href=&quot;https://developer.apple.com/documentation/uikit/uiview/1622624-systemlayoutsizefitting&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;systemLayoutSizeFitting(_:)&lt;/code&gt;&lt;/a&gt;. The parameter &lt;code class=&quot;highlighter-rouge&quot;&gt;targetSize&lt;/code&gt; is the smallest or largest size that meets the constraint.&lt;/p&gt;

&lt;p&gt;Eg. To know the smallest possible size of our content view, call &lt;code class=&quot;highlighter-rouge&quot;&gt;appView.systemLayoutSizeFitting(UILayoutFittingCompressedSize)&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;the-thing-with-uistackview&quot;&gt;The thing with UIStackView&lt;/h3&gt;

&lt;p&gt;It is easily misled to think stack view has intrinsic size. Using a stack view, it seems the width and height constraints are not required.&lt;/p&gt;

&lt;p&gt;But NO, stack view intrinsic size is always &lt;code class=&quot;highlighter-rouge&quot;&gt;UIViewNoIntrinsicMetric&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;What really happened is that Auto Layout engine calculate the fitting size (an output) for the stack.&lt;/p&gt;

&lt;p&gt;So how do you get the fitting size?&lt;/p&gt;

&lt;p&gt;Simply &lt;code class=&quot;highlighter-rouge&quot;&gt;stack.systemLayoutSizeFitting(UILayoutFittingCompressedSize)&lt;/code&gt;.&lt;/p&gt;
</description>
        <pubDate>Wed, 01 Nov 2017 10:42:21 +0800</pubDate>
        <link>http://localhost:4000/2017/11/01/guide-to-creating-custom-uiview/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/11/01/guide-to-creating-custom-uiview/</guid>
        
        
        <category>UI</category>
        
      </item>
    
  </channel>
</rss>
