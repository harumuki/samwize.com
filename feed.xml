<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>@samwize</title>
    <description>¯\_(ツ)_/¯
</description>
    <link>https://samwize.com/</link>
    <atom:link href="https://samwize.com/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Thu, 16 Jul 2020 16:30:45 +0800</pubDate>
    <lastBuildDate>Thu, 16 Jul 2020 16:30:45 +0800</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>How to Localize Resources in Swift Packages</title>
        <description>&lt;p&gt;At last, in Swift 5.3, the updated Swift Package Manager (SPM) now supports resources! Yipee~&lt;/p&gt;

&lt;p&gt;This post is a guide to adding resources to your package.&lt;/p&gt;

&lt;h2 id=&quot;1-add-to-target&quot;&gt;1. Add to Target&lt;/h2&gt;

&lt;p&gt;The convention is to add them in a “Resources” subfolder for the &lt;strong&gt;target&lt;/strong&gt;. So if you have a target called &lt;code class=&quot;highlighter-rouge&quot;&gt;MyTarget&lt;/code&gt;, you will add resources to&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/Sources/MyTarget/Resources/&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;But you could actually add to &lt;em&gt;anywhere&lt;/em&gt; in “MyTarget”.&lt;/p&gt;

&lt;h2 id=&quot;2-edit-packageswift&quot;&gt;2. Edit Package.swift&lt;/h2&gt;

&lt;p&gt;Add &lt;code class=&quot;highlighter-rouge&quot;&gt;defaultLocalization&lt;/code&gt; to the &lt;strong&gt;package&lt;/strong&gt; descriptor.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;MyPackage&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;defaultLocalization&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;3-implicit--explicit-resources&quot;&gt;3. Implicit &amp;amp; Explicit Resources&lt;/h2&gt;

&lt;p&gt;Xcode automatically recognize for these &lt;strong&gt;known resources&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;XIB, storyboards&lt;/li&gt;
  &lt;li&gt;Core Data xcdatamodeld&lt;/li&gt;
  &lt;li&gt;Asset Catalogs&lt;/li&gt;
  &lt;li&gt;strings files&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.lproj&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So for the above known resources, there is nothing else to do.&lt;/p&gt;

&lt;p&gt;For for other resources, you need to declare them explicitly.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;targets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;MyLibrary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;resources&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;flu.jpg&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;pandemic.json&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Do NOT process&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;process&lt;/code&gt; will have Xcode optimize the resource for the platform, while &lt;code class=&quot;highlighter-rouge&quot;&gt;copy&lt;/code&gt; will not.&lt;/p&gt;

&lt;h2 id=&quot;4-expose-in-the-package&quot;&gt;4. Expose in the package&lt;/h2&gt;

&lt;p&gt;You should &lt;strong&gt;expose resources from within the package&lt;/strong&gt;, instead of having the app accessing them directly. So let’s say you have this localized string “Okay”, you will publicly expose with&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;localizedOkay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSLocalizedString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Okay&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bundle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;comment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There is something new here: &lt;code class=&quot;highlighter-rouge&quot;&gt;Bundle.module&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This is a generated code for the package (specifically the target)! Prior to this, we make use of &lt;code class=&quot;highlighter-rouge&quot;&gt;Bundle(name:inFramework:)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You cannot (and it does not make sense) to use &lt;code class=&quot;highlighter-rouge&quot;&gt;Bundle.module&lt;/code&gt; in an app. Though it doesn’t stop you from exposing it with&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bundleForMyTarget&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bundle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;module&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then in the app, you can use &lt;code class=&quot;highlighter-rouge&quot;&gt;NSLocalizedString(&quot;Okay&quot;, bundle: bundleForMyTarget, comment: &quot;&quot;)&lt;/code&gt;. &lt;em&gt;Just suggesting.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;pitfall-app-must-add-localization&quot;&gt;PITFALL: App must add localization&lt;/h2&gt;

&lt;p&gt;Even if a package supports a certain localization, the app has to add it first under the app’s Project &amp;gt; Localizations.&lt;/p&gt;

&lt;p&gt;It seems like Xcode will optimize and strip out localizations, if they are not supported in the app.&lt;/p&gt;
</description>
        <pubDate>Thu, 16 Jul 2020 15:52:09 +0800</pubDate>
        <link>https://samwize.com/2020/07/16/how-to-localize-resources-in-swift-packages/</link>
        <guid isPermaLink="true">https://samwize.com/2020/07/16/how-to-localize-resources-in-swift-packages/</guid>
        
        
        <category>SPM</category>
        
      </item>
    
      <item>
        <title>Ideal Xcode Project Structure</title>
        <description>&lt;p&gt;The &lt;a href=&quot;https://developer.apple.com/documentation/swiftui/fruta_building_a_feature-rich_app_with_swiftui&quot;&gt;Fruta sample code&lt;/a&gt; provides a good example of a project structure that supports multi-platforms.&lt;/p&gt;

&lt;h2 id=&quot;use-group-as-folder&quot;&gt;Use Group as Folder&lt;/h2&gt;

&lt;p&gt;Every group in Xcode is an actual folder.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Stop using logical groups without folder.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-main-groups&quot;&gt;The Main Groups&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Shared&lt;/li&gt;
  &lt;li&gt;iOS&lt;/li&gt;
  &lt;li&gt;iOS Clip&lt;/li&gt;
  &lt;li&gt;iOS Widgets&lt;/li&gt;
  &lt;li&gt;macOS&lt;/li&gt;
  &lt;li&gt;macOS Widgets&lt;/li&gt;
  &lt;li&gt;Packages&lt;/li&gt;
  &lt;li&gt;Playgrounds&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Platforms &amp;amp; extensions have their own group. Within them, structure as per your selected architecture eg. MVVM, VIPER. Or any logical grouping that makes the most sense.&lt;/p&gt;

&lt;h2 id=&quot;shared-code&quot;&gt;Shared Code&lt;/h2&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;Shared&lt;/code&gt; group is for code used in &lt;strong&gt;all&lt;/strong&gt; platforms. In Fruta, almost all the code is under &lt;code class=&quot;highlighter-rouge&quot;&gt;Shared&lt;/code&gt;. Only few Swift files are in the platform specific group.&lt;/p&gt;

&lt;p&gt;Even the &lt;code class=&quot;highlighter-rouge&quot;&gt;@main App&lt;/code&gt; is in Shared, and it runs for all: iOS, macOS, widgets, clips. It works because it uses preprocessor code. Alternatively, we could create specific Swift file for each platform.&lt;/p&gt;

&lt;p&gt;You can even breakdown further eg. &lt;code class=&quot;highlighter-rouge&quot;&gt;Shared-iOS&lt;/code&gt;. It is up to you as needed.&lt;/p&gt;

&lt;h2 id=&quot;packages&quot;&gt;Packages&lt;/h2&gt;

&lt;p&gt;Local packages within the projects. Eg. &lt;code class=&quot;highlighter-rouge&quot;&gt;Fruta-Networking&lt;/code&gt;. This is also shared code, but in a formal self contained package. Later on, they can also be moved out of the project to become an external dependency.&lt;/p&gt;

&lt;p&gt;These packages are selectively added to the targets; they can be excluded in a certain target.&lt;/p&gt;

&lt;h2 id=&quot;use-of-preprocessor-code&quot;&gt;Use of Preprocessor Code&lt;/h2&gt;

&lt;p&gt;Aka &lt;em&gt;Active Compilation Conditions&lt;/em&gt; (NEW!) under build settings. Yet not exactly new, since before this, we already have been adding to &lt;a href=&quot;/2019/02/26/preprocessor-codes-for-swift/&quot;&gt;Other Swift Flags&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;With that, we can write preprocessors such as &lt;code class=&quot;highlighter-rouge&quot;&gt;#if APPCLIP&lt;/code&gt;, or &lt;code class=&quot;highlighter-rouge&quot;&gt;#if ENABLE_DANCE_MONKEY_FEATURE&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We can also use &lt;code class=&quot;highlighter-rouge&quot;&gt;#if os(iOS)&lt;/code&gt; etc.&lt;/p&gt;

&lt;h2 id=&quot;playgrounds&quot;&gt;Playgrounds&lt;/h2&gt;

&lt;p&gt;Playground is a scratchpad. Nice to try out some codes, or even to explain certain concepts.&lt;/p&gt;

&lt;h2 id=&quot;tests&quot;&gt;Tests&lt;/h2&gt;

&lt;p&gt;The Fruta project did not tests. Generally, you have 2 types of tests:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Unit Testing&lt;/li&gt;
  &lt;li&gt;UI Testing&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Therefore each platform will have to create 2 test targets eg. &lt;code class=&quot;highlighter-rouge&quot;&gt;FrutaiOSUnitTests&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;FrutaiOSUITests&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;That’s a lot of tests, if you’re testing 😄&lt;/p&gt;
</description>
        <pubDate>Tue, 30 Jun 2020 15:22:35 +0800</pubDate>
        <link>https://samwize.com/2020/06/30/ideal-xcode-project-structure/</link>
        <guid isPermaLink="true">https://samwize.com/2020/06/30/ideal-xcode-project-structure/</guid>
        
        
        <category>Xcode</category>
        
      </item>
    
      <item>
        <title>SwiftUI and Data Flow</title>
        <description>&lt;p&gt;WWDC 2020 has clarify much on how we should manage data flow when using SwiftUI.&lt;/p&gt;

&lt;p&gt;I had a hard time understanding the role of &lt;code class=&quot;highlighter-rouge&quot;&gt;StateObject&lt;/code&gt;, until I watched &lt;a href=&quot;https://developer.apple.com/videos/play/wwdc2020/10040&quot;&gt;Session 10040: Data Essentials in SwiftUI&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/videos/play/wwdc2020/10040&quot;&gt;&lt;img src=&quot;/images/source-of-truth-timeline.jpg&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://developer.apple.com/documentation/swiftui/managing-model-data-in-your-app&quot;&gt;Apple documentation&lt;/a&gt; was also helped.&lt;/p&gt;

&lt;h2 id=&quot;the-right-way-to-use&quot;&gt;The right way to use&lt;/h2&gt;

&lt;p&gt;It is very important to know how to use the various components correctly.&lt;/p&gt;

&lt;p&gt;I have been writing in SwfitUI 1.0, and now I know I have bugs. I have misused &lt;code class=&quot;highlighter-rouge&quot;&gt;@ObservedObject&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here are a few things to remind myself.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;SwiftUI might create or recreate a view at any time,&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt; is a descriptor of the view, not like typical &lt;code class=&quot;highlighter-rouge&quot;&gt;UIView&lt;/code&gt;. They are lightweight. It is unwise to override &lt;code class=&quot;highlighter-rouge&quot;&gt;View.init&lt;/code&gt;. If you have &lt;em&gt;anything&lt;/em&gt; to do with states and data objects, you do it using one of the state components provided.&lt;/p&gt;

&lt;p&gt;The state is &lt;strong&gt;attached&lt;/strong&gt; to the view by SwiftUI.&lt;/p&gt;

&lt;p&gt;App Hierarchy: &lt;code class=&quot;highlighter-rouge&quot;&gt;App&lt;/code&gt; -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Scene&lt;/code&gt; -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The most important decision is to decide &lt;strong&gt;where to store the truth&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Is it a global truth for the app, or across scenes, or is it for an individual view?&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;stateobject-vs-observedobject&quot;&gt;StateObject vs ObservedObject&lt;/h2&gt;

&lt;p&gt;One of the most common &lt;a href=&quot;https://stackoverflow.com/q/62544115/242682&quot;&gt;question&lt;/a&gt; is how to use these 2 correctly.&lt;/p&gt;

&lt;p&gt;We initialise with &lt;code class=&quot;highlighter-rouge&quot;&gt;@StateObject&lt;/code&gt; when we want the view/scene/app to hold on to the truth.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;LibraryView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;@StateObject&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;book&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Hold on to the 1 truth&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;BookView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Pass it to another view&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We declare &lt;code class=&quot;highlighter-rouge&quot;&gt;@ObservedObject&lt;/code&gt;, but never initialize it. When declared in a view, it becomes the view’s dependency. Some view higher up will have to pass to it. In this case, &lt;code class=&quot;highlighter-rouge&quot;&gt;LibraryView&lt;/code&gt; pass the source of truth to &lt;code class=&quot;highlighter-rouge&quot;&gt;BookView&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;BookView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;@ObservedObject&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Book&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// From external source&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Mon, 29 Jun 2020 15:01:38 +0800</pubDate>
        <link>https://samwize.com/2020/06/29/swiftui-and-data-flow/</link>
        <guid isPermaLink="true">https://samwize.com/2020/06/29/swiftui-and-data-flow/</guid>
        
        
        <category>SwiftUI</category>
        
      </item>
    
      <item>
        <title>New Property Wrapper in 2020</title>
        <description>&lt;p&gt;WWDC 2020 introduced a few more property wrappers. &lt;a href=&quot;/2019/12/04/guide-to-property-wrapper/&quot;&gt;I don’t take system wrappers lightly&lt;/a&gt;, as they must be introduced for very good reason. So better know them well.&lt;/p&gt;

&lt;p&gt;They are available in iOS 14, macOS 11 (aka 10.16), tvOS 14, and watchOS 7. &lt;em&gt;Let’s stick with just the year.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Some of the new 2020 APIs: &lt;a href=&quot;https://developer.apple.com/documentation/swiftui/appstorage&quot;&gt;AppStorage&lt;/a&gt;, &lt;a href=&quot;https://developer.apple.com/documentation/swiftui/scenestorage&quot;&gt;SceneStorage&lt;/a&gt;, &lt;a href=&quot;https://developer.apple.com/documentation/swiftui/scaledmetric&quot;&gt;ScaledMetric&lt;/a&gt;, &lt;a href=&quot;https://developer.apple.com/documentation/swiftui/stateobject&quot;&gt;StateObject&lt;/a&gt;, &lt;a href=&quot;https://developer.apple.com/documentation/swiftui/uiapplicationdelegateadaptor&quot;&gt;UIApplicationDelegateAdaptor&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;appstorage-for-userdefaults&quot;&gt;@AppStorage for UserDefaults&lt;/h2&gt;

&lt;p&gt;AppStorage is the &lt;strong&gt;persistent storage&lt;/strong&gt; provided by SwiftUI, with &lt;code class=&quot;highlighter-rouge&quot;&gt;UserDefaults&lt;/code&gt; as the underlying backing data. The following code will persist the email across launched.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AppStorageView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;@AppStorage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;email&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;email&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;initial@hey.com&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;TextField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Email Address&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Any change to the underlying &lt;code class=&quot;highlighter-rouge&quot;&gt;UserDefaults&lt;/code&gt; will &lt;em&gt;publish&lt;/em&gt; the changes, therefore updating the SwiftUI view.&lt;/p&gt;

&lt;h2 id=&quot;scenestorage-for-scenes&quot;&gt;@SceneStorage for scenes&lt;/h2&gt;

&lt;p&gt;It is another persistent storage for SwiftUI, but for &lt;strong&gt;each scene state restoration&lt;/strong&gt;. You’re not familiar with scene lifecycle, it is introduced in &lt;a href=&quot;https://developer.apple.com/videos/play/wwdc2019/212/&quot;&gt;2019&lt;/a&gt; for multi-windows.&lt;/p&gt;

&lt;p&gt;Unlike AppStorage,&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The underlying data that backs SceneStorage is not available to you&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;NOTE: This can only be used with &lt;a href=&quot;https://developer.apple.com/documentation/swiftui/app-structure-and-behavior&quot;&gt;SwiftUI App + Scene structure&lt;/a&gt;. If you’re using the &lt;em&gt;old&lt;/em&gt; AppDelegate way, there will be fatal error “@SceneStorage is only for use with SwiftUI App Lifecycle”.&lt;/p&gt;

&lt;h2 id=&quot;stateobject&quot;&gt;@StateObject&lt;/h2&gt;

&lt;p&gt;Initiating with &lt;code class=&quot;highlighter-rouge&quot;&gt;@ObservedObject&lt;/code&gt; in a view is &lt;a href=&quot;https://developer.apple.com/documentation/swiftui/managing-model-data-in-your-app&quot;&gt;&lt;strong&gt;unsafe&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;@ObservedObject&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;myModel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// UNSAFE&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;SwiftUI might create or recreate a view at any time, so it’s important that initializing a view with a given set of inputs always results in the same view. As a result, it’s unsafe to create an observed object inside a view.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Instead, use &lt;code class=&quot;highlighter-rouge&quot;&gt;@StateObject&lt;/code&gt; for a view (or structure), &lt;strong&gt;when it can be the owner&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;For external dependencies, stick to &lt;code class=&quot;highlighter-rouge&quot;&gt;@ObservedObject&lt;/code&gt; and also &lt;code class=&quot;highlighter-rouge&quot;&gt;@EnvironmentObject&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;@StateObject&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;myModel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;@ObservedObject&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;externalModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ExternalModel&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;@EnvironmentObject&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;globalModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;GlobalModel&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can also create &lt;code class=&quot;highlighter-rouge&quot;&gt;StateObject&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;App&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;Scene&lt;/code&gt; – if they can be the owner and should hold on to the truth.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyApp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Or for Scene&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;@StateObject&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;store&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;scaledmetric&quot;&gt;@ScaledMetric&lt;/h2&gt;

&lt;p&gt;This scales a float according to the user’s Dynamic Type settings. All along, only fonts are scaled automatically. Now we can scale an image like this:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;@ScaledMetric&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGFloat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;Image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;systemName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;bolt.fill&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;resizable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;uiapplicationdelegateadaptor&quot;&gt;@UIApplicationDelegateAdaptor&lt;/h2&gt;

&lt;p&gt;If you are mixing UIKit’s AppDelegate and SwiftUI, then this is a way to access the app delegate. I don’t see any reason why this is even needed, but here’s the gist:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;@UIApplicationMain&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AppDelegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIResponder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIApplicationDelegate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;@UIApplicationDelegateAdaptor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;AppDelegate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;appDelegate&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;appDelegate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Fri, 26 Jun 2020 17:34:58 +0800</pubDate>
        <link>https://samwize.com/2020/06/26/new-property-wrapper-in-2020/</link>
        <guid isPermaLink="true">https://samwize.com/2020/06/26/new-property-wrapper-in-2020/</guid>
        
        
        <category>Swift</category>
        
        <category>SwiftUI</category>
        
      </item>
    
      <item>
        <title>Download All WWDC 2020 Videos</title>
        <description>&lt;p&gt;In &lt;a href=&quot;/2016/06/16/swift-script-to-download-all-wwdc-2016-videos-and-pdfs-automatically/&quot;&gt;2016&lt;/a&gt;, I wrote a &lt;a href=&quot;https://github.com/samwize/wwdc-dl&quot;&gt;Swift script&lt;/a&gt; to download all the WWDC PDFs and videos from the command line.&lt;/p&gt;

&lt;p&gt;I have fixed for WWDC 2020. You can download the &lt;a href=&quot;https://github.com/samwize/wwdc-dl/releases/tag/wwdc2020&quot;&gt;binary&lt;/a&gt;, then download all with:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./wwdc-dl -a
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The script is still in a mess. Prime time for re-writing in Swift 5.3, with the &lt;a href=&quot;https://swift.org/blog/argument-parser/&quot;&gt;proper CLI support&lt;/a&gt;. &lt;em&gt;But I am more likely to spend the time exploring SwiftUI 2.0, Catalyst, and awesome new features.&lt;/em&gt; 😁&lt;/p&gt;

&lt;p&gt;What’s more, the official app will catch up eventually.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/wwdc-2020-downloaded.jpg&quot; alt=&quot;All in one place&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;apple-developer-app&quot;&gt;Apple Developer App&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&quot;https://apps.apple.com/app/id640199958&quot;&gt;Apple Developer app&lt;/a&gt; is getting better. You can download videos, play them at 2x speed (unfortunately, there’s the fastest), and there’s even has a code section for easy copying!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/apple-developer-code-copy.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;But there’s still much room for improvement, as it is clearly a Catalyst app for iPhone.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/apple-developer-app-on-imac.jpg&quot; alt=&quot;On my iMac 27&amp;quot;..&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I still prefer to download all and browse them in Finder, and playing at variable speed (1.75x, 3x, whatever) with VLC player. I can also take snapshots easily (especially since 2020 there’s no PDF).&lt;/p&gt;

&lt;p&gt;Features will eventually catch up. Just like Swift UI 2.0. Just last week I was still brooding over how to make certain layouts and features, but now it is all doable.&lt;/p&gt;
</description>
        <pubDate>Thu, 25 Jun 2020 11:25:25 +0800</pubDate>
        <link>https://samwize.com/2020/06/25/download-all-wwdc-2020-videos/</link>
        <guid isPermaLink="true">https://samwize.com/2020/06/25/download-all-wwdc-2020-videos/</guid>
        
        
        <category>WWDC</category>
        
      </item>
    
      <item>
        <title>Embedding YouTube on Website and Loading Lazily</title>
        <description>&lt;p&gt;If you have ever embed YouTube using their iframe code, this post would optimize your webpage loading speed tremendously.&lt;/p&gt;

&lt;h2 id=&quot;the-problem&quot;&gt;The Problem&lt;/h2&gt;

&lt;p&gt;Embedding multiple YouTube videos will slow down a webpage loading speed.&lt;/p&gt;

&lt;p&gt;I tested &lt;a href=&quot;https://dualgram.com&quot;&gt;my website&lt;/a&gt; which contains just 4 YouTube videos, and it gave a very bad score on PageSpeed.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/pagespeed-dualgram-web-old.jpg&quot; alt=&quot;A desktop score of 44/100&quot; class=&quot;border&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-solution&quot;&gt;The Solution&lt;/h2&gt;

&lt;p&gt;It turns out loading iframe will use a lot of resources, and multiple times for every video! A big waste on the time spent to download unnecessary scripts and stuff.&lt;/p&gt;

&lt;p&gt;There are a few lazy loading solutions, involving JS.&lt;/p&gt;

&lt;p&gt;The latest I found is a &lt;a href=&quot;https://css-tricks.com/lazy-load-embedded-youtube-videos/&quot;&gt;genius way&lt;/a&gt; using &lt;code class=&quot;highlighter-rouge&quot;&gt;srcdoc&lt;/code&gt;, which would fall back to &lt;code class=&quot;highlighter-rouge&quot;&gt;src&lt;/code&gt; in case unsupported.&lt;/p&gt;

&lt;p&gt;The iframe will look like this:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;iframe&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;800&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;450&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://www.youtube.com/embed/zuY4KtE9w-E?start=0&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;srcdoc=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;style&amp;gt;*{padding:0;margin:0;overflow:hidden}html,body{height:100%}img,span{position:absolute;width:100%;top:0;bottom:0;margin:auto}span{height:1.5em;text-align:center;font:48px/1.5 sans-serif;color:white;text-shadow:0 0 0.5em black}.title{font:24px/1.5 sans-serif;color:white;position:relative;left:20px;top:10px;}&amp;lt;/style&amp;gt;&amp;lt;a href=https://www.youtube.com/embed/zuY4KtE9w-E?autoplay=1&amp;amp;amp;start=0&amp;gt;&amp;lt;img src=https://img.youtube.com/vi/zuY4KtE9w-E/hqdefault.jpg alt='Review by Phones and stuff'&amp;gt;&amp;lt;span&amp;gt;▶&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;span class='title'&amp;gt;Review by Phones and stuff&amp;lt;/span&amp;gt;&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;frameborder=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;allow=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;allowfullscreen=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you can read, the addition is the &lt;code class=&quot;highlighter-rouge&quot;&gt;srcdoc&lt;/code&gt;, which is a long line of CSS and HTML. I also modified the original css to include a title at the top.&lt;/p&gt;

&lt;p&gt;When the iframe is embedded it looks like this:&lt;/p&gt;

&lt;iframe width=&quot;800&quot; height=&quot;450&quot; src=&quot;https://www.youtube.com/embed/zuY4KtE9w-E?start=0&quot; srcdoc=&quot;&amp;lt;style&amp;gt;*{padding:0;margin:0;overflow:hidden}html,body{height:100%}img,span{position:absolute;width:100%;top:0;bottom:0;margin:auto}span{height:1.5em;text-align:center;font:48px/1.5 sans-serif;color:white;text-shadow:0 0 0.5em black}.title{font:24px/1.5 sans-serif;color:white;position:relative;left:20px;top:10px;}&amp;lt;/style&amp;gt;&amp;lt;a href=https://www.youtube.com/embed/zuY4KtE9w-E?autoplay=1&amp;amp;start=0&amp;gt;&amp;lt;img src=https://img.youtube.com/vi/zuY4KtE9w-E/hqdefault.jpg alt='Review by Phones and stuff'&amp;gt;&amp;lt;span&amp;gt;▶&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;span class='title'&amp;gt;Review by Phones and stuff&amp;lt;/span&amp;gt;&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;The above is different from &lt;em&gt;the real thing&lt;/em&gt; from YouTube, but it loads much much faster.&lt;/p&gt;

&lt;p&gt;With lazy loading, my PageSpeed increased to nearly 100 😁 IMO it’s worth the tradeoff.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/pagespeed-dualgram-web-lazy-loaded.jpg&quot; alt=&quot;A desktop score of 98/100&quot; class=&quot;border&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;my-jekyll-solution&quot;&gt;My Jekyll Solution&lt;/h2&gt;

&lt;p&gt;This website is powered by Jekyll, so I will use some Liquid Template to embed easily.&lt;/p&gt;

&lt;p&gt;The usage will look like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
{% include youtube.html width=&quot;800&quot; height=&quot;450&quot; id=&quot;f1aBlyYax6o&quot; start=&quot;12&quot; title=&quot;Top 10 iOS Apps of October 2019&quot; %}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The usage is much simpler, because the included &lt;strong&gt;youtube.html&lt;/strong&gt; does the hard work:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;iframe&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{{ include.width }}&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{{ include.height }}&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://www.youtube.com/embed/{{ include.id }}?start={{ include.start | default: 0 }}&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;srcdoc=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;style&amp;gt;*{padding:0;margin:0;overflow:hidden}html,body{height:100%}img,span{position:absolute;width:100%;top:0;bottom:0;margin:auto}span{height:1.5em;text-align:center;font:48px/1.5 sans-serif;color:white;text-shadow:0 0 0.5em black}.title{font:24px/1.5 sans-serif;color:white;position:relative;left:20px;top:10px;}&amp;lt;/style&amp;gt;&amp;lt;a href=https://www.youtube.com/embed/{{ include.id }}?autoplay=1&amp;amp;start={{ include.start | default: 0 }}&amp;gt;&amp;lt;img src=https://img.youtube.com/vi/{{ include.id }}/hqdefault.jpg alt='{{ include.title | default: 'video' }}'&amp;gt;&amp;lt;span&amp;gt;▶&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;{% if include.title %}&amp;lt;span class='title'&amp;gt;{{ include.title }}&amp;lt;/span&amp;gt;{% endif %}&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;frameborder=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;allow=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;allowfullscreen&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Tue, 23 Jun 2020 12:17:18 +0800</pubDate>
        <link>https://samwize.com/2020/06/23/embedding-youtube-on-website-lazily/</link>
        <guid isPermaLink="true">https://samwize.com/2020/06/23/embedding-youtube-on-website-lazily/</guid>
        
        
        <category>Website</category>
        
      </item>
    
      <item>
        <title>App Store Expects Developers to bring in Revenue 🤣</title>
        <description>&lt;p&gt;Once again, a high profile developer &lt;a href=&quot;https://techcrunch.com/2020/06/18/interview-apples-schiller-says-position-on-hey-app-is-unchanged-and-no-rules-changes-are-imminent/&quot;&gt;kicked up a good fuss&lt;/a&gt; over App Store policy.&lt;/p&gt;

&lt;p&gt;Apple enforcing their law &amp;amp; order on &lt;em&gt;their citizen&lt;/em&gt; is nothing new. We have been enslaved for 10 years. But Apple reply to Basecamp really cracked me up 🤣🤣&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/basecamp-no-revenue.jpg&quot; alt=&quot;&quot; class=&quot;border&quot; /&gt;&lt;/p&gt;

&lt;p&gt;That’s a PR fail.&lt;/p&gt;

&lt;p&gt;While some facts are true, you can’t just say it.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;These apps do not offer in-app purchase — and, consequently, &lt;strong&gt;have not contributed any revenue to the App Store&lt;/strong&gt; over the last eight years.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It is so easily refuted.&lt;/p&gt;

&lt;p&gt;The value that FREE apps bring to the App Store is enormous. Imagine removing all the free apps on Apple App Store – would anyone buy an iPhone?&lt;/p&gt;

&lt;h2 id=&quot;on-rejections&quot;&gt;On Rejections&lt;/h2&gt;

&lt;p&gt;Personally I am &lt;a href=&quot;/2019/09/20/i-am-no-longer-surprise-over-app-store-review-rejections/&quot;&gt;no longer surprise with rejections&lt;/a&gt;, or &lt;a href=&quot;https://blog.just2us.com/2020/04/19/taking-down-concert-camera/&quot;&gt;apps being taken down&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I no longer have expectations, and so I don’t have anxiety like many years ago – the feeling whenever I submit an app for review.&lt;/p&gt;

&lt;p&gt;In fact I submitted a new app last night, yet I go to sleep soundly, without bothering to read why it is being rejected.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/reject-papa.jpg&quot; alt=&quot;Anyway, a record time from submission to rejection&quot; /&gt;&lt;/p&gt;

&lt;p&gt;However, we need to speak up.&lt;/p&gt;
</description>
        <pubDate>Fri, 19 Jun 2020 10:14:55 +0800</pubDate>
        <link>https://samwize.com/2020/06/19/app-store-expected-developers-to-bring-in-revenue/</link>
        <guid isPermaLink="true">https://samwize.com/2020/06/19/app-store-expected-developers-to-bring-in-revenue/</guid>
        
        
        <category>App Store</category>
        
      </item>
    
      <item>
        <title>42 Most Common SwiftUI API That I Can't Remember</title>
        <description>&lt;p&gt;This is a list of SwiftUI code snippets that I will be updating continuously. They are not hard, just not easy to remember when you have been using UIKit for 10 years. Some are more like workarounds :) &lt;strong&gt;Not yet 42&lt;/strong&gt;, but I believe I can reach the magic number as I continue to use SwiftUI.&lt;/p&gt;

&lt;h2 id=&quot;resizable-image-fits-in-frame&quot;&gt;Resizable image, fits in frame&lt;/h2&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;Image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;systemName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;umbrella&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;resizable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;aspectRatio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;contentMode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;increase-hit-area-including-transparent-area&quot;&gt;Increase hit area, including transparent area&lt;/h2&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;HStack&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;When should you test yourself?&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;Spacer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Without `contentShape`, this space is not hittable&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;contentShape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Rectangle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Define hit testing&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;onTapGesture&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;custom-modifier&quot;&gt;Custom Modifier&lt;/h2&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyModifer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ViewModifier&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Do something with the content&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Convenient method on View&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;myModifer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;modifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;MyModifer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;dismiss-modal-view&quot;&gt;Dismiss modal view&lt;/h2&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;@Environment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(\&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;presentationMode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;presentationMode&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;presentationMode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wrappedValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dismiss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Actually, &lt;code class=&quot;highlighter-rouge&quot;&gt;dismiss()&lt;/code&gt; is not for just modal view. If the view is in a navigation, it will “Go Back” – which is not the &lt;em&gt;dismiss&lt;/em&gt; we expect. There’s another way.&lt;/p&gt;

&lt;h2 id=&quot;dismiss-modal-view-2--the-explicit-way&quot;&gt;Dismiss modal view 2 – the explicit way&lt;/h2&gt;

&lt;p&gt;In the presenter,&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;@State&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;isPresented&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Declare an @State&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;isPresented&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// when it's time to present&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sheet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;isPresented&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isPresented&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// The modal sheet uses the binding&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;DeeperView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;isPresented&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isPresented&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Also pass the binding to any children&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the child views of the navigation stack,&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;@Binding&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;isPresented&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Declare the binding&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;isPresented&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// when it's time to dismiss the modal for real&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;fix-text-truncating-when-it-shouldnt&quot;&gt;FIX Text truncating when it shouldn’t&lt;/h2&gt;

&lt;p&gt;This usually happens when the &lt;code class=&quot;highlighter-rouge&quot;&gt;Text&lt;/code&gt; is in &lt;code class=&quot;highlighter-rouge&quot;&gt;VStack&lt;/code&gt; contained in a &lt;code class=&quot;highlighter-rouge&quot;&gt;ScollView&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Why the hell is this text truncated without reason?&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fixedSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;horizontal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;vertical&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Workaround magic&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;select-an-item-using-picker-in-a-form&quot;&gt;Select an item using Picker in a Form&lt;/h2&gt;

&lt;p&gt;Picker can show the currently selected item, but somehow only works of the selection is Int/String.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Assuming we have an enum to represent the list of items&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Side&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CaseIterable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wife&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;husband&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;@State&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;sideIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;Picker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Whose side you taking?&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;selection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sideIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;ForEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Side&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;allCases&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;indices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Side&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;allCases&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Mon, 08 Jun 2020 13:34:41 +0800</pubDate>
        <link>https://samwize.com/2020/06/08/42-most-common-swiftui-api-modifiers-that-i-cant-remember/</link>
        <guid isPermaLink="true">https://samwize.com/2020/06/08/42-most-common-swiftui-api-modifiers-that-i-cant-remember/</guid>
        
        
        <category>SwiftUI</category>
        
      </item>
    
      <item>
        <title>Subscribing to @Published</title>
        <description>&lt;p&gt;I wrote on &lt;a href=&quot;https://stackoverflow.com/q/56735382/242682&quot;&gt;StackOverflow&lt;/a&gt; with a piece of code on how to observe an &lt;code class=&quot;highlighter-rouge&quot;&gt;@Published&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ObservableObject&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;@Published&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sink&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The code works, but might not be as intended.&lt;/p&gt;

&lt;p&gt;In the sink, if you print out &lt;code class=&quot;highlighter-rouge&quot;&gt;value&lt;/code&gt;, it will NOT be the new value. It will be the old value, before the change.&lt;/p&gt;

&lt;p&gt;The subscriber is getting the sink when the value &lt;code class=&quot;highlighter-rouge&quot;&gt;willChange&lt;/code&gt;, NOT &lt;code class=&quot;highlighter-rouge&quot;&gt;didChange&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;That’s how &lt;code class=&quot;highlighter-rouge&quot;&gt;ObservableObject&lt;/code&gt; &lt;a href=&quot;https://developer.apple.com/documentation/combine/observableobject/3362556-objectwillchange&quot;&gt;works&lt;/a&gt;. But in SwiftUI early beta, it was once designed to emit after the change, with &lt;code class=&quot;highlighter-rouge&quot;&gt;objectDidChange&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;why-swfitui-emit-before-the-change&quot;&gt;Why SwfitUI emit BEFORE the change?&lt;/h2&gt;

&lt;p&gt;Why did the design changed?&lt;/p&gt;

&lt;p&gt;It was discussed &lt;a href=&quot;https://forums.swift.org/t/combine-observableobject-in-uikit/28433/2&quot;&gt;here&lt;/a&gt;. In this &lt;a href=&quot;https://twitter.com/luka_bernardi/status/1151633281982406656&quot;&gt;tweet&lt;/a&gt; they mention the reason:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;We made the change because it allows us to do a better job in coalescing updates; especially in the presence of animations.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For the sake of them doing a &lt;em&gt;better job&lt;/em&gt;, optimizing for animations, they made the change.&lt;/p&gt;

&lt;p&gt;It is a pitfall, so we need workarounds.&lt;/p&gt;

&lt;h2 id=&quot;solution-1&quot;&gt;Solution 1&lt;/h2&gt;

&lt;p&gt;The easiest way is to use a dispatch call.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sink&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;weak&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;DispatchQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;weak&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That &lt;em&gt;usually works&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;solution-2&quot;&gt;Solution 2&lt;/h2&gt;

&lt;p&gt;The more full proof way is to have a separate event being emitted when the &lt;code class=&quot;highlighter-rouge&quot;&gt;@Published&lt;/code&gt; is &lt;code class=&quot;highlighter-rouge&quot;&gt;didSet&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ObservableObject&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;valueDidChange&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PassthroughSubject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Never&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;@Published&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;didSet&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;valueDidChange&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then subscribe to &lt;code class=&quot;highlighter-rouge&quot;&gt;valueDidChange&lt;/code&gt; instead.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;valueDidChange&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sink&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;weak&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Wed, 03 Jun 2020 12:29:31 +0800</pubDate>
        <link>https://samwize.com/2020/06/03/subscribing-to-published/</link>
        <guid isPermaLink="true">https://samwize.com/2020/06/03/subscribing-to-published/</guid>
        
        
        <category>SwiftUI</category>
        
        <category>Combine</category>
        
      </item>
    
      <item>
        <title>Issues with macOS Catalyst</title>
        <description>&lt;p&gt;While working on an iOS app with SwiftUI, I thought I should trying converting it to a Catalyst app.&lt;/p&gt;

&lt;h2 id=&quot;just-1-checkbox-to-enable&quot;&gt;Just 1 checkbox to enable&lt;/h2&gt;

&lt;p&gt;It’s easy. In &lt;strong&gt;Deployment Info&lt;/strong&gt;, enable Mac.&lt;/p&gt;

&lt;p&gt;It’s &lt;em&gt;easy&lt;/em&gt;, but there’re couple of issues I faced.&lt;/p&gt;

&lt;h2 id=&quot;provisioning-profiles&quot;&gt;Provisioning Profiles&lt;/h2&gt;

&lt;p&gt;I use fastlane match, and it ran into an issue. My app uses App Group, and the profiles would never include the capability. Apple developer portal does not have the option to add the capability for macOS Catalyst, somehow.&lt;/p&gt;

&lt;p&gt;The solution: Let Xcode manage, and it will be fine 🤷🏻‍♂️&lt;/p&gt;

&lt;h2 id=&quot;same-app-id-as-ios&quot;&gt;Same App ID as iOS?&lt;/h2&gt;

&lt;p&gt;The option &lt;strong&gt;Use iOS Bundle Identifier&lt;/strong&gt; has implications.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Enabled: &lt;a href=&quot;https://developer.apple.com/support/universal-purchase/&quot;&gt;Universal Purchase&lt;/a&gt;, 1 app, multiple platforms&lt;/li&gt;
  &lt;li&gt;Disabled: Use different ID, different apps on App Store Connect&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Most likely you want it enabled so that it is 1 app family. Pay once, use anywhere.&lt;/p&gt;

&lt;h2 id=&quot;cocoapods&quot;&gt;Cocoapods&lt;/h2&gt;

&lt;p&gt;I use Cocoapods, and also SPM.&lt;/p&gt;

&lt;p&gt;For Cocoapods, if any of the frameworks is unsupported (eg. Fabric), they have to be excluded for macOS Catalyst.&lt;/p&gt;

&lt;p&gt;There is good solution &lt;a href=&quot;https://medium.com/better-programming/macos-catalyst-debugging-problems-using-catalyst-and-cocoapods-579679150fa9&quot;&gt;by fermoya&lt;/a&gt; to not compile those pods. The ruby script he provided is &lt;a href=&quot;https://gist.github.com/fermoya/f9be855ad040d5545ae3cb254ed201e4#file-remove_unsupported_libraries-rb&quot;&gt;here&lt;/a&gt;, and it works like this in Podfile:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;load&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'remove_unsupported_libraries.rb'&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;unsupported_pods&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Fabric'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Crashlytics'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Firebase'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;supported_pods&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'IQKeyboardManagerSwift'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;post_install&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;installer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;installer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;configure_support_catalyst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;supported_pods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unsupported_pods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;preprocessor-code&quot;&gt;Preprocessor Code&lt;/h2&gt;

&lt;p&gt;Even after you exclude unsupported frameworks, you will still need to write some preprocessor codes like this:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#if !targetEnvironment(macCatalyst)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Firebase&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Crashlytics&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#endif&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Or you might be using &lt;code class=&quot;highlighter-rouge&quot;&gt;#available&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;#available(macCatalyst 13.4, *)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;NOTE: &lt;code class=&quot;highlighter-rouge&quot;&gt;#available&lt;/code&gt; is not a preprocessor code. If you try to use it in a &lt;code class=&quot;highlighter-rouge&quot;&gt;ViewBuilder&lt;/code&gt; (eg Group, VStack), it will have error that &lt;em&gt;the closure can’t be used in a ViewBuilder&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;final-thoughts&quot;&gt;Final thoughts&lt;/h2&gt;

&lt;p&gt;Catalyst is very new technology. There’s still lots to improve on. SwiftUI has so much limitations and bugs!&lt;/p&gt;

&lt;p&gt;But it’s a great feeling when you can write once and it runs on iPhone, iPad, and macOS.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/mac-catalyst-the-king.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 01 Jun 2020 17:11:09 +0800</pubDate>
        <link>https://samwize.com/2020/06/01/issues-with-macos-catalyst/</link>
        <guid isPermaLink="true">https://samwize.com/2020/06/01/issues-with-macos-catalyst/</guid>
        
        
        <category>macOS</category>
        
      </item>
    
  </channel>
</rss>
