<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>@samwize</title>
    <description>¯\_(ツ)_/¯
</description>
    <link>http://samwize.com/</link>
    <atom:link href="http://samwize.com/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Mon, 26 Sep 2016 11:19:37 +0800</pubDate>
    <lastBuildDate>Mon, 26 Sep 2016 11:19:37 +0800</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>Pitfall With Opening Universal Link</title>
        <description>&lt;p&gt;Universal link are familiar http links that iOS apps can now use to open apps, rather than opening the link in Safari web browser.&lt;/p&gt;

&lt;p&gt;If the app is installed, then the universal should work just fine.&lt;/p&gt;

&lt;p&gt;One pitfall is when the user &lt;strong&gt;disassociate&lt;/strong&gt; the link; as if telling iOS that the link should NOT open the app.&lt;/p&gt;

&lt;p&gt;We will explain how that happens and the solution.&lt;/p&gt;

&lt;h2 id=&quot;opening-a-universal-link&quot;&gt;Opening a Universal Link&lt;/h2&gt;

&lt;p&gt;We use Uber app as an example.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;https://m.uber.com/&quot;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;UIApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sharedApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;openURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The above will open Uber app.&lt;/p&gt;

&lt;h2 id=&quot;the-pitfall&quot;&gt;The Pitfall&lt;/h2&gt;

&lt;p&gt;The pitfall is when the user tap on the top right &lt;strong&gt;uber.com&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/uber-open-universal-link.jpg&quot; alt=&quot;Open Universal Link&quot; class=&quot;border&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Tapping on that will tell iOS that you, the user, do NOT want Uber app to be opened for the link.&lt;/p&gt;

&lt;p&gt;To be specific, it only affects the app that opened it. Other apps will still open fine. The reason is for user to &lt;em&gt;disable&lt;/em&gt; certain apps.&lt;/p&gt;

&lt;h2 id=&quot;the-solution&quot;&gt;The solution&lt;/h2&gt;

&lt;p&gt;When the universal link &lt;em&gt;doesn’t work&lt;/em&gt;, it will open Safari instead.&lt;/p&gt;

&lt;p&gt;In the webpage, you have to &lt;strong&gt;pull down&lt;/strong&gt; to reveal the &lt;em&gt;smart banner&lt;/em&gt; that will give you the option to re-open Uber app.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/uber-in-safari.jpg&quot; alt=&quot;Open Uber App, Again&quot; class=&quot;border&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Tap on &lt;strong&gt;OPEN&lt;/strong&gt;, and iOS will re-associate the universal link to work for your app.&lt;/p&gt;
</description>
        <pubDate>Mon, 26 Sep 2016 10:59:41 +0800</pubDate>
        <link>http://samwize.com/2016/09/26/pitfall-with-opening-universal-link/</link>
        <guid isPermaLink="true">http://samwize.com/2016/09/26/pitfall-with-opening-universal-link/</guid>
        
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>The Thing About Top &amp; Bottom Autolayout Guide</title>
        <description>&lt;p&gt;iOS 7 introduced the concept of a translucent tab/nav/status bar.&lt;/p&gt;

&lt;p&gt;In doing so, view controllers “extend” their views so that it is beneath the bar, giving a &lt;em&gt;there-but-not-there-blurry&lt;/em&gt; effect.&lt;/p&gt;

&lt;p&gt;To help view controllers to adapt to this iOS 7 concepts, know this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the view is now expanded to beneath the bar(s)&lt;/li&gt;
  &lt;li&gt;to know the area that is NOT beneath the bar, you have to use the top &amp;amp; bottom layout guide (these are 2 properties in view controller)&lt;/li&gt;
  &lt;li&gt;hence when you add subviews, they should usually be &lt;strong&gt;between&lt;/strong&gt; the layout guides&lt;/li&gt;
  &lt;li&gt;however, for scroll view, they should &lt;strong&gt;extend&lt;/strong&gt; beyond the guides, with an inset using the layout guides&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;if-you-have-scroll-view-with-translucent-bar&quot;&gt;If you have Scroll View with Translucent Bar&lt;/h2&gt;

&lt;p&gt;Assuming you use scroll view (including table/collection views) with a translucent nav and tab bar, this is how you configure your storyboard for the view controller:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Enable &lt;strong&gt;Adjust Scroll View Insets&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Enable &lt;strong&gt;Under Top Bars&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Enable &lt;strong&gt;Under Bottom Bars&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Pin the scroll view to &lt;strong&gt;Superview&lt;/strong&gt; top, bottom, left, right&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Why this works?&lt;/p&gt;

&lt;p&gt;When you enable &lt;strong&gt;Under Top/Bottom Bars&lt;/strong&gt;, it tells the view controller’s root view to extend the edges. Programatically you can set &lt;a href=&quot;https://developer.apple.com/reference/uikit/uiviewcontroller/1621515-edgesforextendedlayout&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;edgesForExtendedLayout&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We make the scroll view the same rect as it’s superview, that is the view controller’s root view.&lt;/p&gt;

&lt;p&gt;Then enable &lt;strong&gt;Adjust Scroll View Insets&lt;/strong&gt; so that view controller automatically make the inset fall between the top &amp;amp; bottom layout guide!&lt;/p&gt;

&lt;h2 id=&quot;trivial&quot;&gt;Trivial&lt;/h2&gt;

&lt;p&gt;The top and bottom layout guides are &lt;a href=&quot;https://developer.apple.com/reference/uikit/uilayoutsupport&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UILayoutSupport&lt;/code&gt;&lt;/a&gt; protocol implemented by &lt;code class=&quot;highlighter-rouge&quot;&gt;UIViewController&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It is not &lt;code class=&quot;highlighter-rouge&quot;&gt;UILayoutGuide&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/reference/uikit/uilayoutguide&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UILayoutGuide&lt;/code&gt;&lt;/a&gt; is a different object. It is a useful object if you have constructed &lt;em&gt;dummy views&lt;/em&gt;, or container views, merely to help with autolayout.&lt;/p&gt;

&lt;p&gt;It replace the heavyweight dummy views with this lightweight object, which you can continue to place autolayout constraints with other views.&lt;/p&gt;

</description>
        <pubDate>Fri, 23 Sep 2016 15:32:08 +0800</pubDate>
        <link>http://samwize.com/2016/09/23/the-thing-about-top-and-bottom-autolayout-guide/</link>
        <guid isPermaLink="true">http://samwize.com/2016/09/23/the-thing-about-top-and-bottom-autolayout-guide/</guid>
        
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>Setup Your Own $5 VPN With Docker, OpenVPN and Digital Ocean</title>
        <description>&lt;p&gt;I have set up VPN on my virtual private servers before, but the experience has never been easy.&lt;/p&gt;

&lt;p&gt;Recently, I tried again, using Docker approach, and it is amazingly smooth. Done in 5 minutes!&lt;/p&gt;

&lt;p&gt;Stop spending a fortune on paid VPN services. You can get one at $5/month on Digital Ocean. For me, I didn’t spend a cent, since I am using existing instance that already runs my stuff (:&lt;/p&gt;

&lt;h2 id=&quot;the-pre-requisite&quot;&gt;The Pre-requisite&lt;/h2&gt;

&lt;p&gt;First you need a &lt;a href=&quot;https://m.do.co/c/69baaaf5a07b&quot;&gt;DigitalOcean&lt;/a&gt; account.&lt;/p&gt;

&lt;p&gt;I have been using Digital Ocean for a long time, and I recommend anyone who requires a dedicated server to use it. Register an account with my &lt;a href=&quot;https://m.do.co/c/69baaaf5a07b&quot;&gt;referral link&lt;/a&gt;, and get FREE $10 (that’s 2 months!) to start with.&lt;/p&gt;

&lt;p&gt;Set up a droplet running Ubuntu 14.x, in a geographical location of your liking. I actually have 2 droplets with this VPN setup, 1 in Singapore and 1 in US.&lt;/p&gt;

&lt;p&gt;Then &lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-getting-started&quot;&gt;install Docker&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;setting-up-openvpn&quot;&gt;Setting Up OpenVPN&lt;/h2&gt;

&lt;p&gt;We are using the work of &lt;a href=&quot;https://github.com/kylemanna/docker-openvpn&quot;&gt;kylemanna/docker-openvpn&lt;/a&gt; dockerfile.&lt;/p&gt;

&lt;p&gt;To setup the docker container (change &lt;code class=&quot;highlighter-rouge&quot;&gt;vpn.samwize.com&lt;/code&gt; to your domain/IP):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;OVPN_DATA=&quot;ovpn-data&quot;
docker run -v $OVPN_DATA:/etc/openvpn --rm kylemanna/openvpn ovpn_genconfig -u udp://vpn.samwize.com
docker run -v $OVPN_DATA:/etc/openvpn --rm -it kylemanna/openvpn ovpn_initpki
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You will be prompted to enter your EasyRSA passphrase. These are kept in your data volume &lt;code class=&quot;highlighter-rouge&quot;&gt;ovpn-data&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Run the docker container:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run -v $OVPN_DATA:/etc/openvpn -d -p 1194:1194/udp --cap-add=NET_ADMIN kylemanna/openvpn
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Next, generate the ovpn file for your computer to connect to the VPN later.&lt;/p&gt;

&lt;p&gt;Change &lt;code class=&quot;highlighter-rouge&quot;&gt;CLIENTNAME&lt;/code&gt; to your computer name (eg. &lt;code class=&quot;highlighter-rouge&quot;&gt;MacBook-Supreme&lt;/code&gt; for me ^^).&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run -v $OVPN_DATA:/etc/openvpn --rm -it kylemanna/openvpn easyrsa build-client-full CLIENTNAME nopass
docker run -v $OVPN_DATA:/etc/openvpn --rm kylemanna/openvpn ovpn_getclient CLIENTNAME &amp;gt; CLIENTNAME.ovpn
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;setting-up-your-client&quot;&gt;Setting up your Client&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CLIENTNAME.ovpn&lt;/code&gt; is generated on your server.&lt;/p&gt;

&lt;p&gt;You need to &lt;strong&gt;transfer the file to your computer&lt;/strong&gt;, eg. via SSH or &lt;a href=&quot;https://cyberduck.io&quot;&gt;Cyberduck&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Down a VPN software. For Mac, we can download &lt;a href=&quot;https://tunnelblick.net&quot;&gt;TunnelBlick&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Drag the &lt;code class=&quot;highlighter-rouge&quot;&gt;CLIENTNAME.ovpn&lt;/code&gt; file to TunnelBlick in the menu, and you should be good to use!&lt;/p&gt;
</description>
        <pubDate>Sat, 10 Sep 2016 22:09:52 +0800</pubDate>
        <link>http://samwize.com/2016/09/10/setup-your-own-vpn-with-docker-openvpn-and-digital-ocean/</link>
        <guid isPermaLink="true">http://samwize.com/2016/09/10/setup-your-own-vpn-with-docker-openvpn-and-digital-ocean/</guid>
        
        
        <category>VPS</category>
        
      </item>
    
      <item>
        <title>Drawing Images With UIBezierPath</title>
        <description>&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/library/ios/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/Introduction/Introduction.html#//apple_ref/doc/uid/TP40010156-CH1-SW1&quot;&gt;iOS Graphics System&lt;/a&gt; consists of 3 frameworks:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;UIKit - provide views on a high level&lt;/li&gt;
  &lt;li&gt;Core Graphics - lower level drawing support within UIKit views&lt;/li&gt;
  &lt;li&gt;Core Animation - ability to apply animation and transformation to UIKit views&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;performance-of-uiimage-vs-drawing-with-code&quot;&gt;Performance of UIImage vs Drawing with code&lt;/h2&gt;

&lt;p&gt;This &lt;a href=&quot;http://stackoverflow.com/a/22985255/242682&quot;&gt;answer&lt;/a&gt; explained well when is GPU used, and when is CPU used.&lt;/p&gt;

&lt;p&gt;Displaying a UIImage is (generally) faster, because after loading the image file (via CPU), the image is loaded onto the GPU. If you now display the image 100 times, it will be very fast, because the GPU already contains the image/texture.&lt;/p&gt;

&lt;p&gt;Drawing with code via Core Graphics is slower, because the drawing code happens in the CPU, before being loaded onto the GPU. If you are going to draw 100 times, there will be 100 trips from the CPU to the GPU.&lt;/p&gt;

&lt;p&gt;Quoting from Apple Doc:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The use of custom drawing code should be limited to situations where the content you display needs to change dynamically.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you need to combine standard UI elements with custom drawing, consider using a Core Animation layer to superimpose a custom view with a standard view so that you draw as little as possible.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;animation-effects&quot;&gt;Animation Effects&lt;/h2&gt;

&lt;p&gt;Before we jump into the large chunk of this post on drawing images, let’s know how animation effects can be applied to the image.&lt;/p&gt;

&lt;p&gt;Core Animation has a layer object, and this is actually a &lt;strong&gt;model that encapsulates animations properties&lt;/strong&gt; - geometry, timing and visual properties.&lt;/p&gt;

&lt;p&gt;By modifying this model, you achieve animation easily. The actual rendering is taken care of, and optimized for you.&lt;/p&gt;

&lt;h2 id=&quot;drawingcreating-paths&quot;&gt;Drawing/Creating Paths&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIBezierPath_class/index.html#//apple_ref/occ/cl/UIBezierPath&quot;&gt;UIBezierPath&lt;/a&gt; is the class to create vector-based shapes.&lt;/p&gt;

&lt;p&gt;You create paths with 2 types: &lt;strong&gt;straight lines&lt;/strong&gt; and &lt;strong&gt;curves&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;straight-lines&quot;&gt;1. Straight Lines&lt;/h3&gt;

&lt;p&gt;Assume you have 2 points (&lt;code class=&quot;highlighter-rouge&quot;&gt;CGPoint&lt;/code&gt;), you can draw a line with &lt;code class=&quot;highlighter-rouge&quot;&gt;addLineToPoint&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIBezierPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;moveToPoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;point1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addLineToPoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;point2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;curves&quot;&gt;2. Curves&lt;/h3&gt;

&lt;p&gt;There are 2 types of curves:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/types-of-bezier-curves.png&quot; alt=&quot;Types of curves&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Cubic curve - use &lt;code class=&quot;highlighter-rouge&quot;&gt;addCurve(to:controlPoint1:controlPoint2:)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Quadratic curve - use &lt;code class=&quot;highlighter-rouge&quot;&gt;addQuadCurve(to:controlPoint:)&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The difference is that a cubic curve has 2 control points.&lt;/p&gt;

&lt;p&gt;Bezier curve has &lt;a href=&quot;https://en.wikipedia.org/wiki/Bézier_curve&quot;&gt;complex mathematical relationship&lt;/a&gt;, if you are interested.&lt;/p&gt;

&lt;h3 id=&quot;underlying-cgpathref&quot;&gt;Underlying &lt;code class=&quot;highlighter-rouge&quot;&gt;CGPathRef&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UIBezierPath&lt;/code&gt; is really just a wrapper for &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/GraphicsImaging/Reference/CGPath/index.html#//apple_ref/c/tdef/CGPathRef&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CGPathRef&lt;/code&gt; data type&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can create &lt;code class=&quot;highlighter-rouge&quot;&gt;CGPath&lt;/code&gt;s directly then assign to a &lt;code class=&quot;highlighter-rouge&quot;&gt;UIBezierPath&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;fill--stroke&quot;&gt;Fill &amp;amp; Stroke&lt;/h3&gt;

&lt;p&gt;With a path constructed, you can then render by filling and stroking with colors.&lt;/p&gt;

&lt;p&gt;The code below with fill with red, and stroke a blue line 2 point wide.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;UIColor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;redColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setFill&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;UIColor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;blueColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setStroke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lineWidth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;stroke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;There is one thing about filling that you should know. The &lt;a href=&quot;http://stackoverflow.com/a/14841163/242682&quot;&gt;even-odd fill rule&lt;/a&gt; determines if a hole in a path is to be filled or not. By default, &lt;code class=&quot;highlighter-rouge&quot;&gt;usesEvenOddFillRule&lt;/code&gt; is false, so usually the hole will be filled.&lt;/p&gt;

&lt;h3 id=&quot;drawing-an-image&quot;&gt;Drawing an Image&lt;/h3&gt;

&lt;p&gt;You can also draw an image. Read the section on performance earlier. If you can use &lt;code class=&quot;highlighter-rouge&quot;&gt;UIImageView&lt;/code&gt;, then you should.&lt;/p&gt;

&lt;p&gt;Otherwize, you can use the draw methods in &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIImage_Class/&quot;&gt;UIImage&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;drawAtPoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;cgcontext-transformation&quot;&gt;CGContext Transformation&lt;/h3&gt;

&lt;p&gt;You can change the &lt;a href=&quot;https://developer.apple.com/library/tvos/documentation/GraphicsImaging/Reference/CGContext/index.html&quot;&gt;Current Transformation Matix (CTM)&lt;/a&gt; for the graphics context.&lt;/p&gt;

&lt;p&gt;For example, you can scale the drawing by 50%, then translate (20, 20):&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIGraphicsGetCurrentContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;CGContextSaveGState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;CGContextScaleCTM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;CGContextTranslateCTM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Draw and render your path etc, with respect to the origin.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// However, the CTM transformation will affect the render.&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;CGContextRestoreGState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Notice that you should save and restore the graphics states.&lt;/p&gt;

&lt;h3 id=&quot;rendering-uiimage&quot;&gt;Rendering UIImage&lt;/h3&gt;

&lt;p&gt;These are the steps to generate an &lt;code class=&quot;highlighter-rouge&quot;&gt;UIImage&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;UIGraphicsBeginImageContextWithOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIGraphicsGetCurrentContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Create your bezier path, fill, stroke, etc..&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIGraphicsGetImageFromCurrentImageContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;UIGraphicsEndImageContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;It is important that you pass 0.0 to &lt;code class=&quot;highlighter-rouge&quot;&gt;UIGraphicsBeginImageContextWithOptions&lt;/code&gt; so that the &lt;a href=&quot;/2016/04/19/pitfall-drawing-with-core-graphics-gives-blurry-lines/&quot;&gt;appropriate bitmap size&lt;/a&gt; is created for the (eg retina) device automatically.&lt;/p&gt;
</description>
        <pubDate>Thu, 25 Aug 2016 10:36:49 +0800</pubDate>
        <link>http://samwize.com/2016/08/25/drawing-images-with-uibezierpath/</link>
        <guid isPermaLink="true">http://samwize.com/2016/08/25/drawing-images-with-uibezierpath/</guid>
        
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>Out of Memory Crashes</title>
        <description>&lt;p&gt;Crashlytics has released a new feature to &lt;a href=&quot;http://crashlytics.com/blog/introducing-oom-reporting&quot;&gt;report out of memory (OOM) crashes&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We all know regular crashes - termination of an app due to some code (app or system libraries).&lt;/p&gt;

&lt;p&gt;OOM is another type of crash, which has been &lt;em&gt;ignored&lt;/em&gt; in Crashlytics reports until now.&lt;/p&gt;

&lt;p&gt;There are 2 types of OOM crashes:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Foreground OOM (FOOM) - this crashes like regular crashes&lt;/li&gt;
  &lt;li&gt;Background OOM (BOOM) - app is evicted from iOS&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The method to detect OOM is first introducted by Facebook, using a &lt;a href=&quot;https://code.facebook.com/posts/1146930688654547/reducing-fooms-in-the-facebook-ios-app/&quot;&gt;process of elimination&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/oom-crashes-why-app-is-launching.jpg&quot; alt=&quot;Why is the app starting?&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;crashlytics-ooms&quot;&gt;Crashlytics OOMs&lt;/h2&gt;

&lt;p&gt;Crashlytics has provided reporting on OOM-free sessions.&lt;/p&gt;

&lt;p&gt;Specifically, that is a percentage of sessions that are crash free from FOOM. Note: This is only for &lt;strong&gt;FOOM (Foreground OOM)&lt;/strong&gt;, since FOOM are similar to regular crashes while the app is in the foreground.&lt;/p&gt;

&lt;p&gt;Also, the number of sessions in Answers does NOT include OOM sessions that crashed.&lt;/p&gt;

&lt;p&gt;Crashlytics thrives in providing analytics to crashes, and the inclusion of OOM crashes will be very useful.&lt;/p&gt;

&lt;p&gt;Some &lt;a href=&quot;https://docs.fabric.io/apple/crashlytics/OOMs.html&quot;&gt;pointers&lt;/a&gt; on debugging and fixing these memory issues is provided.&lt;/p&gt;
</description>
        <pubDate>Mon, 22 Aug 2016 10:29:21 +0800</pubDate>
        <link>http://samwize.com/2016/08/22/out-of-memory-crashes/</link>
        <guid isPermaLink="true">http://samwize.com/2016/08/22/out-of-memory-crashes/</guid>
        
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>Swift Is a Protocol Oriented Programming Language</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/videos/play/wwdc2015/408/&quot;&gt;WWDC 2015&lt;/a&gt; is where Protocol Oriented Programming (POP) is officially being preached.&lt;/p&gt;

&lt;p&gt;It gave us a different perspective of programming, one that does NOT use &lt;strong&gt;class and inheritance&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Instead, POP use &lt;strong&gt;struct and protocol&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;the-problem-with-object-oriented-programming-language&quot;&gt;The Problem with Object Oriented Programming Language&lt;/h2&gt;

&lt;p&gt;The problem is that in practice, using class inheritance is at times &lt;em&gt;not correct&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Or not flexible.&lt;/p&gt;

&lt;p&gt;Because with inheritance, the only structure you can make is a &lt;strong&gt;hierarchy&lt;/strong&gt;. You are limited by that.&lt;/p&gt;

&lt;p&gt;But with protocols, you are essentially giving your object traits.&lt;/p&gt;

&lt;p&gt;With protocol extension for the trait, you can give it a default trait.&lt;/p&gt;

&lt;p&gt;It makes resuable code, much more resuable (:&lt;/p&gt;

&lt;p&gt;To build a component, you just need to specify these individual traits, like how building blocks should be!&lt;/p&gt;

&lt;h2 id=&quot;an-examplehttpmatthijshollemanscom20150722mixins-and-traits-in-swift-2&quot;&gt;&lt;a href=&quot;http://matthijshollemans.com/2015/07/22/mixins-and-traits-in-swift-2/&quot;&gt;An Example&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;We look at an example of a login view controller, with a password text field.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;LoginViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIViewController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;passwordValidator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PasswordValidator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;@IBAction&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;loginButtonPressed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;passwordValidator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;isPasswordValid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;passwordTextField&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The above use a decompostion pattern, with a &lt;code class=&quot;highlighter-rouge&quot;&gt;PasswordValidator&lt;/code&gt; object.&lt;/p&gt;

&lt;p&gt;This is nice and clean, as we put the validation logic in an object of it’s own.&lt;/p&gt;

&lt;p&gt;Here is how you can improve it with POP, with a default implementation.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ValidatesPassword&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isPasswordValid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ValidatesPassword&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isPasswordValid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// A default implementation&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The validation logic is still a separate object, but now in a protocol extension.&lt;/p&gt;

&lt;p&gt;To use,&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;LoginViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ValidatesPassword&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;@IBAction&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;loginButtonPressed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isPasswordValid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;passwordTextField&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;It is now even cleaner!&lt;/p&gt;

&lt;p&gt;You can call &lt;code class=&quot;highlighter-rouge&quot;&gt;isPasswordValid&lt;/code&gt; because of &lt;code class=&quot;highlighter-rouge&quot;&gt;ValidatesPassword&lt;/code&gt;, the protocol which your view controller now has.&lt;/p&gt;
</description>
        <pubDate>Thu, 11 Aug 2016 16:58:26 +0800</pubDate>
        <link>http://samwize.com/2016/08/11/swift-is-a-protocol-oriented-programming-language/</link>
        <guid isPermaLink="true">http://samwize.com/2016/08/11/swift-is-a-protocol-oriented-programming-language/</guid>
        
        
        <category>Swift</category>
        
      </item>
    
      <item>
        <title>Complexity &amp; Out of the Tarpit</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://shaffner.us/cs/papers/tarpit.pdf&quot;&gt;Out of the Tarpit&lt;/a&gt; is a famous paper that discuss complexity of large-scale software systems. It discussed approach to eliminate “accidental complexity”.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://aestheticio.com/become-a-better-programmer-tame-complexity/&quot;&gt;Better Programmer&lt;/a&gt; wrote a post that is a easier read based on Out of the Tarpit.&lt;/p&gt;

&lt;p&gt;Either is a must read for developers.&lt;/p&gt;

&lt;p&gt;We must work hard to achieve simplicity, because:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Complexity has the same impact on your codebase as compound interest has on your credit card balance.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Thu, 11 Aug 2016 14:56:55 +0800</pubDate>
        <link>http://samwize.com/2016/08/11/complexity-and-out-of-the-tarpit/</link>
        <guid isPermaLink="true">http://samwize.com/2016/08/11/complexity-and-out-of-the-tarpit/</guid>
        
        
        <category>Architecture</category>
        
      </item>
    
      <item>
        <title>Updating Jekyll to 3.0</title>
        <description>&lt;p&gt;This blog was running on Jekyll 2.4.0 since the day I &lt;a href=&quot;/2015/09/30/migrating-octopress-2-to-octopress-3/&quot;&gt;migrated away&lt;/a&gt; from Wordpress.&lt;/p&gt;

&lt;p&gt;Today, I updated Jekyll to 3.1.6, primarily because I want to use kramdown, instead of redcarpet.&lt;/p&gt;

&lt;p&gt;Starting from &lt;a href=&quot;https://github.com/blog/2100-github-pages-now-faster-and-simpler-with-jekyll-3-0&quot;&gt;Jekyll 3.0&lt;/a&gt;, kramdown is the default. It is acknowledged to be the de facto markdown library, along with Rouge over Pygments.&lt;/p&gt;

&lt;p&gt;This is a post on how to update Jeykll, with fix to make things working.&lt;/p&gt;

&lt;h2 id=&quot;update-gemfile-for-octopress&quot;&gt;Update Gemfile for Octopress&lt;/h2&gt;

&lt;p&gt;Update &lt;code class=&quot;highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt; for the octopress group. Many plugins are no longer necessary (at least for me) - codefence, video tag, quote tag, gist. I have in fact try to not to use octopress plugins, as they are not true markdown.&lt;/p&gt;

&lt;p&gt;The last 2 gems for octopress hooks and paginate are necessary.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:jekyll_plugins&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;octopress&#39;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;octopress-image-tag&#39;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;octopress-solarized&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:git&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;https://github.com/samwize/solarized&#39;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;octopress-hooks&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;git: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;https://github.com/octopress/hooks.git&#39;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;octopress-paginate&#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;bundle-update&quot;&gt;Bundle Update&lt;/h2&gt;

&lt;p&gt;With that, update the gems with&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bundle update
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If you have no error, then good luck!&lt;/p&gt;

&lt;p&gt;I wasn’t in such luck. The first hurdle is to do with the terrible nokogiri. I have to &lt;a href=&quot;http://stackoverflow.com/a/19807558/242682&quot;&gt;install&lt;/a&gt; with this for El Capitan:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem install nokogiri -- --with-xml2-include=/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.11.sdk/usr/include/libxml2 --use-system-libraries
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;But should use this for future-proof:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem install nokogiri -- --with-xml2-include=`xcrun --show-sdk-path`/usr/include/libxml2 --use-system-libraries
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;building&quot;&gt;Building&lt;/h2&gt;

&lt;p&gt;Once the gems are installed, edit &lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Specifically, REMOVE the markdown and highlighter.&lt;/p&gt;

&lt;p&gt;You should not specify kramdown or pygments, because they have been superseded by the better defaults.&lt;/p&gt;

&lt;p&gt;Build with &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll build&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;error-octopress-hooks--paginate&quot;&gt;Error: Octopress Hooks &amp;amp; Paginate&lt;/h3&gt;

&lt;p&gt;If you follow my Gemfile, then you should not have the &lt;a href=&quot;https://github.com/octopress/paginate/issues/19&quot;&gt;error&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Liquid Exception: undefined method `start_with?&#39; for nil:NilClass in ...
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;error-liquid&quot;&gt;Error: Liquid&lt;/h3&gt;

&lt;p&gt;There are liquid parsing exception in some my posts like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Liquid Exception: Variable &#39;{{..&#39; was not properly terminated with regexp 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This is because I have used &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;/code&gt;, which are marker for liquid.&lt;/p&gt;

&lt;p&gt;To fix, you need to surround with the &lt;a href=&quot;https://github.com/imathis/octopress/issues/466&quot;&gt;raw tags&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Mon, 08 Aug 2016 21:28:34 +0800</pubDate>
        <link>http://samwize.com/2016/08/08/updating-jekyll-to-3-0/</link>
        <guid isPermaLink="true">http://samwize.com/2016/08/08/updating-jekyll-to-3-0/</guid>
        
        
        <category>Jekyll</category>
        
      </item>
    
      <item>
        <title>Reference Cycle for Closures</title>
        <description>&lt;p&gt;You have probably learn about the &lt;a href=&quot;http://krakendev.io/blog/weak-and-unowned-references-in-swift&quot;&gt;imperils&lt;/a&gt; of reference/retain cycle.&lt;/p&gt;

&lt;p&gt;A reference cycle occurs when object A has a strong reference to object B, and vice versa.&lt;/p&gt;

&lt;p&gt;This happens not only between class instances, but also &lt;strong&gt;between class instance and closure&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;are-we-superfluously-capturing-self-as-weakunowned&quot;&gt;Are we superfluously capturing self as weak/unowned?&lt;/h2&gt;

&lt;p&gt;We often see codes littered with &lt;code class=&quot;highlighter-rouge&quot;&gt;[weak self]&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;[unowned self]&lt;/code&gt; in the capture list of closures.&lt;/p&gt;

&lt;p&gt;But are they necessary? Do we ALWAYS have to use unowned/weak inside closure?&lt;/p&gt;

&lt;p&gt;These is one question that we will attempt to answer (at the end).&lt;/p&gt;

&lt;h2 id=&quot;the-exact-problem-to-avoid&quot;&gt;The exact problem to avoid&lt;/h2&gt;

&lt;p&gt;A reference cycle will occur if and only if:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Class instance has a strong reference to closure&lt;/li&gt;
  &lt;li&gt;Closure has a strong reference to class instance&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If either (1) or (2) has a weak reference instead, then you do NOT have the problem.&lt;/p&gt;

&lt;p&gt;Let’s look closer at 2 scenarios.&lt;/p&gt;

&lt;h2 id=&quot;class-instance-with-strong-reference-to-closure&quot;&gt;1. Class instance with strong reference to closure&lt;/h2&gt;

&lt;p&gt;This is the typical scenario where the class instance has a strong reference to the closure directly, or indirectly.&lt;/p&gt;

&lt;p&gt;What is mean by indirect? The instance could be holding the reference indirectly, via a third-party object.&lt;/p&gt;

&lt;p&gt;Let’s look at an example:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Now, myStrongClass has strong reference to the closure&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyStrongClass&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;deinit&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;deinit MyStrongClass&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;theClosure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)?&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;runClosure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;theClosure&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;dispatch_after&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dispatch_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;DISPATCH_TIME_NOW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;NSEC_PER_SEC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))),&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dispatch_get_main_queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Running the closure and this is self: &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;theClosure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;myStrongClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyStrongClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyStrongClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;myStrongClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;runClosure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;myStrongClass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In the code above, &lt;code class=&quot;highlighter-rouge&quot;&gt;myStrongClass&lt;/code&gt; will not deinit even when it is set to &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is because the closure is (by default), capturing &lt;code class=&quot;highlighter-rouge&quot;&gt;self&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;myStrongClass&lt;/code&gt; &lt;strong&gt;strongly&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The typical solution is to capture &lt;code class=&quot;highlighter-rouge&quot;&gt;self&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;unowned&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;weak&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;theClosure&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;weak&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This is the scenario where it is &lt;strong&gt;necessary&lt;/strong&gt; to use &lt;code class=&quot;highlighter-rouge&quot;&gt;weak&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;unowned&lt;/code&gt;, if not you will have memory leak problem.&lt;/p&gt;

&lt;h2 id=&quot;closure-has-a-strong-reference-to-class-instance&quot;&gt;2. Closure has a strong reference to class instance&lt;/h2&gt;

&lt;p&gt;In this scenario, you might think the closure can be declared with &lt;code class=&quot;highlighter-rouge&quot;&gt;weak&lt;/code&gt; (while still capture &lt;code class=&quot;highlighter-rouge&quot;&gt;self&lt;/code&gt; strongly):&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;weak&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;theClosure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)?&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;But that is not possible.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;weak&lt;/code&gt; can only be applied to class or class-bound protocol.&lt;/p&gt;

&lt;p&gt;To illustrate, we’ll use a closure in a local scope (therefore not strongly referenced by &lt;code class=&quot;highlighter-rouge&quot;&gt;self&lt;/code&gt;).&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyHolder&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;initial&quot;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;deinit&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;deinit MyHolder&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;runClosure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;strongClosure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;dispatch_after&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dispatch_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;DISPATCH_TIME_NOW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;NSEC_PER_SEC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))),&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dispatch_get_main_queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Value of MyHolder: &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;strongClosure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;holder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyHolder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyHolder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;holder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;changed&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;holder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;runClosure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;// Prints changed then deinit&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;holder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Result: holder will deinit once the closure has completed (and printed the value)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// closure deinit, therefore instance deinit too&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The closure is never referenced in the object instance. It is used only in the local scope of &lt;code class=&quot;highlighter-rouge&quot;&gt;runClosure&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;strongClosure&lt;/code&gt; captures self strongly. That’s why it will print the value first, then self will be released.&lt;/p&gt;

&lt;p&gt;The point to emphasize here is:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If &lt;code class=&quot;highlighter-rouge&quot;&gt;self&lt;/code&gt; does NOT have a strong reference to the closure, it is okay to have the closure capture &lt;code class=&quot;highlighter-rouge&quot;&gt;self&lt;/code&gt; strongly.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-case-of-singleton&quot;&gt;The Case of Singleton&lt;/h2&gt;

&lt;p&gt;It is more common that you have scenario (2) in the case of using a singleton:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Singleton&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;sharedInstance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Singleton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;    
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;runClosure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;closure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;dispatch_after&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dispatch_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;DISPATCH_TIME_NOW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;NSEC_PER_SEC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))),&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dispatch_get_main_queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;closure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyHolder&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;runClosure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;Singleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sharedInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;runClosure&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
            &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Value of MyHolderWithSingleton: &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The above code is similar to (2) – the closure has a strong reference to self, but self does NOT have strong reference tot he closure, nor to the singleton.&lt;/p&gt;

&lt;p&gt;I have seen many codes that &lt;strong&gt;superfluously&lt;/strong&gt; capture self as &lt;code class=&quot;highlighter-rouge&quot;&gt;weak&lt;/code&gt; like this:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;runClosure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;Singleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sharedInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;runClosure&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;weak&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Value of MyHolderWithSingleton: &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Usually &lt;code class=&quot;highlighter-rouge&quot;&gt;self&lt;/code&gt; is a view controller, and the superfluous code above have the closure reference the view controller weakly.&lt;/p&gt;

&lt;p&gt;BUT, &lt;code class=&quot;highlighter-rouge&quot;&gt;self&lt;/code&gt; is not referencing the closure strongly in the first place!&lt;/p&gt;

&lt;p&gt;There is no need to avoid a reference cycle, because there isn’t one in the first place.&lt;/p&gt;

&lt;p&gt;Once again:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If self does NOT have a strong reference to the closure, it is okay to have the closure capture self strongly.&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 05 Aug 2016 11:44:31 +0800</pubDate>
        <link>http://samwize.com/2016/08/05/reference-cycle-for-closures/</link>
        <guid isPermaLink="true">http://samwize.com/2016/08/05/reference-cycle-for-closures/</guid>
        
        
        <category>Swift</category>
        
      </item>
    
      <item>
        <title>MVVM for iOS &amp; Swift</title>
        <description>&lt;p&gt;Following a &lt;a href=&quot;/2016/07/20/good-architecture-for-ios-app/&quot;&gt;research into better architectures&lt;/a&gt;, this is some learnings from &lt;a href=&quot;http://artsy.github.io/blog/2015/09/24/mvvm-in-swift/&quot;&gt;MVVM in Swift&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;view-model-vm&quot;&gt;View Model (VM)&lt;/h2&gt;

&lt;p&gt;The VM is a 1-1 with view controller.&lt;/p&gt;

&lt;p&gt;It is actually simply a composition pattern, by separating responsibility from the View Controller (VC).&lt;/p&gt;

&lt;h2 id=&quot;what-is-view-model-responsible-for&quot;&gt;What is View Model responsible for?&lt;/h2&gt;

&lt;p&gt;View Model stands between the Model and the View Controller, and provide the data that a view controller needs to display in it’s views.&lt;/p&gt;

&lt;p&gt;View Controller NO longer access the model directly.&lt;/p&gt;

&lt;p&gt;If the model has a &lt;code class=&quot;highlighter-rouge&quot;&gt;NSDate&lt;/code&gt;, then the VM will have the &lt;code class=&quot;highlighter-rouge&quot;&gt;NSDateFormatter&lt;/code&gt; that knows how to display the date as a string for the view.&lt;/p&gt;

&lt;h2 id=&quot;what-is-view-model-not-responsible-for&quot;&gt;What is View Model NOT responsible for?&lt;/h2&gt;

&lt;p&gt;A VM does not know about the view.&lt;/p&gt;

&lt;p&gt;It does not know stuff about presentation, but it does provide the data for presenting.&lt;/p&gt;

&lt;p&gt;Note that is “data” for presenting is not the actual model, but a intermediatry object (aka boundary object).&lt;/p&gt;

&lt;h2 id=&quot;what-is-grey&quot;&gt;What is grey?&lt;/h2&gt;

&lt;p&gt;Networking call is a grey area. Neither VM nor VC defines where the network logic should go.&lt;/p&gt;

&lt;p&gt;But it is safer to be in VM. Or use another composition pattern with a network object.&lt;/p&gt;

&lt;h2 id=&quot;how-different-is-mvvm-and-mvc&quot;&gt;How different is MVVM and MVC&lt;/h2&gt;

&lt;p&gt;It is actually not much different.&lt;/p&gt;

&lt;p&gt;The introduction of a View Model simply extract the business/app logics out of a View Controller.&lt;/p&gt;

&lt;p&gt;It uses a composition pattern, so a VC now will have a VM. In doing so, you can now write tests for the VM (which has the important business logics).&lt;/p&gt;

&lt;h2 id=&quot;how-view-model-vm-communicates-with-view-controller-vc&quot;&gt;How View Model (VM) communicates with View Controller (VC)?&lt;/h2&gt;

&lt;p&gt;Remember, VM does not know anything about the VC.&lt;/p&gt;

&lt;p&gt;Just like VC does not know anything about the model.&lt;/p&gt;

&lt;p&gt;VM and VC can communicate via delegates or Functional Reactive Programming (FRP).&lt;/p&gt;

&lt;p&gt;You would have have know delegate pattern, which is widely used in Apple’s frameworks. It can work, except it is verbose.&lt;/p&gt;

&lt;p&gt;A better way is FRP, which you would have heard in the form of &lt;a href=&quot;https://github.com/ReactiveKit/ReactiveKit&quot;&gt;Reactive&lt;/a&gt;. A good introduction to FRP is the &lt;a href=&quot;https://www.raywenderlich.com/123108/bond-tutorial&quot;&gt;Swift Bond tutorial by raywenderlich&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(alas, Swift does not support binding out of the box, so a tool like ReactiveKit is much needed)&lt;/p&gt;

&lt;h2 id=&quot;reactivekit&quot;&gt;ReactiveKit&lt;/h2&gt;

&lt;p&gt;This very cool framework was first known as &lt;a href=&quot;https://github.com/SwiftBond/Bond&quot;&gt;Bond&lt;/a&gt;, &lt;em&gt;Swift Bond&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;It’s successor is ReactiveKit, which is now made up of a few components:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ReactiveKit/ReactiveKit&quot;&gt;ReactiveKit&lt;/a&gt; - The core&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ReactiveKit/ReactiveUIKit&quot;&gt;ReactiveUIKit&lt;/a&gt; - provides extension to UIKit to provide binding&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ReactiveKit/ReactiveAlamofire&quot;&gt;ReactiveAlamofire&lt;/a&gt; - provides extension to the popular networking library&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Compared to other libraries doing the same think (like Reactive Cocoa), ReactiveKit looks great.&lt;/p&gt;
</description>
        <pubDate>Tue, 26 Jul 2016 16:14:37 +0800</pubDate>
        <link>http://samwize.com/2016/07/26/mvvm-for-ios-and-swift/</link>
        <guid isPermaLink="true">http://samwize.com/2016/07/26/mvvm-for-ios-and-swift/</guid>
        
        
        <category>Architecture</category>
        
        <category>iOS</category>
        
      </item>
    
  </channel>
</rss>
