<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>@samwize</title>
    <description>¯\_(ツ)_/¯
</description>
    <link>https://samwize.com/</link>
    <atom:link href="https://samwize.com/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Tue, 17 Mar 2020 13:03:59 +0800</pubDate>
    <lastBuildDate>Tue, 17 Mar 2020 13:03:59 +0800</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>How to Use Preference</title>
        <description>&lt;p&gt;Preference is the way to pass data &lt;strong&gt;from children to parent&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;On the other hand, &lt;a href=&quot;/2020/03/16/guide-to-environment-and-environmentobject/&quot;&gt;environment&lt;/a&gt; passes data &lt;strong&gt;from parent to children&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;custom-preference&quot;&gt;Custom Preference&lt;/h2&gt;

&lt;p&gt;The steps to creating a preference include creating a preference key (with type and default), then the children set value with the key.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;/// 1. Declare a preference key&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SomePreference&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PreferenceKey&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// The type is CGSize here. It can be any type you want.&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;defaultValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGSize&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zero&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;/// Because multiple children can use the same key, a reduce function will pass it up to parent.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// This implementation will reduce to return the min size.&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;inout&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;nextValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;nextValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;nextValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;minWidth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nextValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;minHeight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nextValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minHeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SomeView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;VStack&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;/// 2. Children will set it&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;GeometryReader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
                &lt;span class=&quot;kt&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;I gonna pass my size to my parent&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;preference&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SomePreference&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;GeometryReader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
                &lt;span class=&quot;kt&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Me too!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;preference&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SomePreference&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;onPreferenceChange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;SomePreference&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// 3. Parent receives it&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Preference changed: &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;NOTE: The &lt;code class=&quot;highlighter-rouge&quot;&gt;reduce&lt;/code&gt; function is required because &lt;strong&gt;multiple children gonna pass it to a parent&lt;/strong&gt;. The function is to reduce to a single value.&lt;/p&gt;

&lt;p&gt;But if you don’t want to reduce, you could read the next section.&lt;/p&gt;

&lt;h2 id=&quot;collection-preference&quot;&gt;Collection Preference&lt;/h2&gt;

&lt;p&gt;If you don’t want to reduce, then a way to pass every children data is to make the type an array, then simply append values to it.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CollectionPreference&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PreferenceKey&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;defaultValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;CGSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;inout&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;CGSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;nextValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;CGSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;contentsOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;nextValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Tue, 17 Mar 2020 12:12:00 +0800</pubDate>
        <link>https://samwize.com/2020/03/17/how-to-use-preference/</link>
        <guid isPermaLink="true">https://samwize.com/2020/03/17/how-to-use-preference/</guid>
        
        
        <category>SwiftUI</category>
        
      </item>
    
      <item>
        <title>How to use Environment and EnvironmentObject</title>
        <description>&lt;p&gt;Environment is a very powerful way to &lt;strong&gt;pass data from parent down to children&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;It is like a &lt;a href=&quot;https://www.youtube.com/watch?v=CyQ59ZfT5E0&quot;&gt;global singleton&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Don’t cringe, because that’s the direction SwiftUI is taking. So embrace it.&lt;/p&gt;

&lt;h2 id=&quot;1-custom-environment&quot;&gt;1. Custom Environment&lt;/h2&gt;

&lt;p&gt;The steps involve creating a key, injecting into &lt;code class=&quot;highlighter-rouge&quot;&gt;EnvironmentValues&lt;/code&gt;, and then passing it (from parent to children).&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;c1&quot;&gt;/// 1. Declare a key with the type, and a default&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyEnvironmentKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;EnvironmentKey&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;defaultValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGFloat&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;/// 2. Provide extension to EnvironmentValues&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;EnvironmentValues&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGFloat&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;MyEnvironmentKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;MyEnvironmentKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newValue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;/// 3. Pass to children using `environment`&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;ParentView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(\&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.23&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;2-custom-environmentobject&quot;&gt;2. Custom EnvironmentObject&lt;/h2&gt;

&lt;p&gt;The difference is that &lt;code class=&quot;highlighter-rouge&quot;&gt;EnvironmentObject&lt;/code&gt; does NOT require a key.&lt;/p&gt;

&lt;p&gt;Because it simply uses the type as the “key”.&lt;/p&gt;

&lt;p&gt;You start by creating your custom type, which has to implement &lt;code class=&quot;highlighter-rouge&quot;&gt;ObservableObject&lt;/code&gt;. Yup, that’s the same view model you’ll have.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;/// 1. Declare the custom type&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ObservableObject&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;@Published&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;a&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ChildView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;/// 2. Use `@EnvironmentObject` with the custom type&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;@EnvironmentObject&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyModel&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;/// 3. Parent to pass down the model&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ParentView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;@ObservedObject&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;b&quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// eg. Parent could update it&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;VStack&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;ChildView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;ChildView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;environmentObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;NOTE: You must create your &lt;code class=&quot;highlighter-rouge&quot;&gt;EnvironmentObject&lt;/code&gt; and set it from somewhere. If it is never set and the child view uses it, the app will crash.&lt;/p&gt;
</description>
        <pubDate>Mon, 16 Mar 2020 16:22:38 +0800</pubDate>
        <link>https://samwize.com/2020/03/16/guide-to-environment-and-environmentobject/</link>
        <guid isPermaLink="true">https://samwize.com/2020/03/16/guide-to-environment-and-environmentobject/</guid>
        
        
        <category>SwiftUI</category>
        
      </item>
    
      <item>
        <title>How to Layout in SwiftUI?</title>
        <description>&lt;p&gt;SwiftUI changes everything, again.&lt;/p&gt;

&lt;p&gt;Auto Layout is the past. With SwiftUI, we have these tools at our disposal:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Alignment Guides&lt;/li&gt;
  &lt;li&gt;Geometry Reader&lt;/li&gt;
  &lt;li&gt;Anchor Preferences&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;how-layout-works&quot;&gt;How layout works?&lt;/h2&gt;

&lt;p&gt;Watch &lt;a href=&quot;https://developer.apple.com/videos/play/wwdc2019/237/&quot;&gt;WWDC 2019 advanced composition and layout&lt;/a&gt; for a good introduction of the new layout system.&lt;/p&gt;

&lt;p&gt;The process is basically:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Parent proposes a size for child&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Child chooses its own size&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Parent places child in parent’s coordinate space&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;SwiftUI is very different because it is the child who defines it’s own size! It is &lt;strong&gt;modern parenting&lt;/strong&gt; (compared to olden days, UIKit is more “traditional”).&lt;/p&gt;

&lt;p&gt;The children can even be rebellious – choosing a size bigger than proposed, and positioning itself out of the parent! There is nothing the parent can do about that..&lt;/p&gt;

&lt;h2 id=&quot;no-more-auto-layout-constraints&quot;&gt;No more auto layout constraints&lt;/h2&gt;

&lt;p&gt;In place of constraints, you have view modifiers like &lt;code class=&quot;highlighter-rouge&quot;&gt;aspectRatio&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;padding&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;frame&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;offset&lt;/code&gt; etc..&lt;/p&gt;

&lt;p&gt;This will feel unnatural. Constraints like equal width is now difficult to achieve. There are lots of trade off, but still cool.&lt;/p&gt;

&lt;p&gt;We now look at the 3 new concepts to handle layout.&lt;/p&gt;

&lt;h2 id=&quot;1-alignment-guides&quot;&gt;1. Alignment Guides&lt;/h2&gt;

&lt;p&gt;The layout system aligns multiple views by positioning all of them along an imaginary line (the guide).&lt;/p&gt;

&lt;p&gt;To do that, you need to specify a &lt;code class=&quot;highlighter-rouge&quot;&gt;CGFloat&lt;/code&gt; value for your view, for a particular alignment. The built-in alignments are &lt;code class=&quot;highlighter-rouge&quot;&gt;top&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;trailing&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;center&lt;/code&gt;, etc that we know.&lt;/p&gt;

&lt;p&gt;We can have custom alignments too. This is a boilerplate to creating one:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Create a custom vertical alignment&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;VerticalAlignment&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SomeVerticalAlignment&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AlignmentID&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;defaultValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ViewDimensions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGFloat&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;VerticalAlignment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;someVerticalAlignment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;VerticalAlignment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;SomeVerticalAlignment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then use it in your views.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;HStack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;alignment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;someVerticalAlignment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Center +10&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;alignmentGuide&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;someVerticalAlignment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Center -10&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;alignmentGuide&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;someVerticalAlignment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;HStack&lt;/code&gt; says it is using the custom alignment, and the 2 texts specify where that alignment is for their view.&lt;/p&gt;

&lt;p&gt;The best resource out there is from &lt;a href=&quot;https://swiftui-lab.com/alignment-guides/&quot;&gt;The SwiftUI Lab&lt;/a&gt;. Read it for more info.&lt;/p&gt;

&lt;h2 id=&quot;2-geometry-reader&quot;&gt;2. Geometry Reader&lt;/h2&gt;

&lt;p&gt;Might come as a surprise, but &lt;a href=&quot;https://developer.apple.com/documentation/swiftui/geometryreader&quot;&gt;Geometry Reader&lt;/a&gt; is also a view!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A container view that defines its content as a function of its own size and coordinate space.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Using &lt;code class=&quot;highlighter-rouge&quot;&gt;GeometryReader&lt;/code&gt;, children can know the size and position of their parent (the container).&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;GeometryReader&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;geometry&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;VStack&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// The children can now use the size, position etc&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;yellow&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;geometry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;3-anchor-preferences&quot;&gt;3. Anchor Preferences&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Preferences&lt;/strong&gt; is like a contract that you can pass between views.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Access view preferences and provide child views with configuration data.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Anchor Preferences&lt;/strong&gt; is a special kind of preferences, useful for setting &amp;amp; retrieving geometry from child views.&lt;/p&gt;

&lt;p&gt;While Geometry Reader is for child to know their parent, Preference is the other way round - for parent (and anyone) to know children.&lt;/p&gt;

&lt;p&gt;It require a 4 steps to use:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 1. Define a data for holding the preference&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyAnchorPreferenceData&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bounds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Anchor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;CGRect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// It can also be some kind of CGPoint data&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 2. Define a preference key&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyAnchorPreferenceKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PreferenceKey&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;defaultValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;MyAnchorPreferenceData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;inout&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;MyAnchorPreferenceData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;nextValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;MyAnchorPreferenceData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;contentsOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;nextValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 3. Child: Set anchor preference&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// `value` is the bounds (CGRect) for the view. It can also be top, center, etc (CGPoint)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// `transform` will create the preference, and $0 will be a CGRect/CGPoint as per `value` type&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;childView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;anchorPreference&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyAnchorPreferenceKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bounds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;MyAnchorPreferenceData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;bounds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 4. Parent: Retrieve anchor preference&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;parentView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;backgroundPreferenceValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;MyAnchorPreferenceKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;preferences&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;GeometryReader&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;geometry&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Return a view as a background&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Use geometry and preferences like this to get the child bounds:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;preference&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;preferences&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// preferences is [MyAnchorPreferenceData], and you should filter to your needs&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bounds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;geometry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;preference&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bounds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note that the &lt;code class=&quot;highlighter-rouge&quot;&gt;bounds&lt;/code&gt; will automatically be in the parent’s &lt;code class=&quot;highlighter-rouge&quot;&gt;CoordinateSpace&lt;/code&gt;. Usually, &lt;code class=&quot;highlighter-rouge&quot;&gt;GeometryReader&lt;/code&gt; has to work with a &lt;code class=&quot;highlighter-rouge&quot;&gt;CoordinateSpace&lt;/code&gt; (where you can name one with “string”, and that’s ugly). By using Anchor Preferences with Geometry Reader, we can avoid the &lt;code class=&quot;highlighter-rouge&quot;&gt;CoordinateSpace&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The parent can also use &lt;code class=&quot;highlighter-rouge&quot;&gt;.overlayPreferenceValue()&lt;/code&gt;, which will draw in front instead.&lt;/p&gt;

&lt;p&gt;Again, SwiftUI Lab has good write up on the topic:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://swiftui-lab.com/communicating-with-the-view-tree-part-1/&quot;&gt;Preferences&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://swiftui-lab.com/communicating-with-the-view-tree-part-2/&quot;&gt;Anchor Preferences&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://swiftui-lab.com/view-extensions-for-better-code-readability/&quot;&gt;Simplifying the Use of View Preferences&lt;/a&gt; to refactor code (using View extension).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;pitfall-verticalalignment-or-horizontalalignment&quot;&gt;PITFALL: VerticalAlignment or HorizontalAlignment&lt;/h2&gt;

&lt;p&gt;Most of the time, you can be lazy and just use &lt;code class=&quot;highlighter-rouge&quot;&gt;.center&lt;/code&gt;. But in some cases, it could have undesirable effect.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;HStack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;alignment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;someVerticalAlignment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;SomeView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;alignmentGuide&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;someVerticalAlignment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Sometimes, this might be inferred as HorizontalAlignment.center&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;VerticalAlignment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// This will be what we want&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Tue, 10 Mar 2020 17:34:07 +0800</pubDate>
        <link>https://samwize.com/2020/03/10/how-to-layout-in-swiftui/</link>
        <guid isPermaLink="true">https://samwize.com/2020/03/10/how-to-layout-in-swiftui/</guid>
        
        
        <category>SwiftUI</category>
        
      </item>
    
      <item>
        <title>Getting Started With SwiftUI</title>
        <description>&lt;p&gt;I am getting started with SwiftUI, and there’s so much to learn, all over again.&lt;/p&gt;

&lt;p&gt;Luckily, there are plenty of articles and videos.&lt;/p&gt;

&lt;p&gt;Here are some &lt;em&gt;random stuff&lt;/em&gt; that I learnt in the first few days as I try to build a new app. The last section will have more links to resources, and kind of cheat sheet.&lt;/p&gt;

&lt;p&gt;I might just add more to this post as I learn, or might write new blog post specifically on some tricks even around the most common of things..&lt;/p&gt;

&lt;h2 id=&quot;lets-watch-how-to-build-instagram-feed&quot;&gt;Let’s watch how to build Instagram feed&lt;/h2&gt;

&lt;p&gt;Watch on YouTube &lt;a href=&quot;https://www.youtube.com/watch?v=APxrtnxRzwI&quot;&gt;part 1&lt;/a&gt; &amp;amp; &lt;a href=&quot;https://www.youtube.com/watch?v=BiNYCvL1m94&quot;&gt;part 2&lt;/a&gt; where DeLong interactively teach SwiftUI while he replicates Instagram UI.&lt;/p&gt;

&lt;p&gt;There are some framework designs that sucks eg. he doesn’t like &lt;code class=&quot;highlighter-rouge&quot;&gt;NavigationView&lt;/code&gt; and how nav links work. A hideous design about nav link is that all the destination views will be initialized!&lt;/p&gt;

&lt;h2 id=&quot;navigationlink-not-working&quot;&gt;NavigationLink not working?&lt;/h2&gt;

&lt;p&gt;It is so common to not get nav link working. It seems like they are designed to be used only in &lt;code class=&quot;highlighter-rouge&quot;&gt;List&lt;/code&gt;, or nav bar. You might need to use the &lt;code class=&quot;highlighter-rouge&quot;&gt;isActive&lt;/code&gt; &lt;a href=&quot;https://stackoverflow.com/a/59933501/242682&quot;&gt;trick&lt;/a&gt; if the nav link is in a &lt;code class=&quot;highlighter-rouge&quot;&gt;VStack&lt;/code&gt; or etc.&lt;/p&gt;

&lt;h2 id=&quot;how-to-push-a-view-without-using-navigationlink&quot;&gt;How to push a view without using NavigationLink&lt;/h2&gt;

&lt;p&gt;A workaround is to use a &lt;a href=&quot;https://stackoverflow.com/a/57321795/242682&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;hidden&lt;/code&gt; nav link&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;present-a-modal-sheet&quot;&gt;&lt;a href=&quot;https://www.hackingwithswift.com/quick-start/swiftui/how-to-present-a-new-view-using-sheets&quot;&gt;Present a modal sheet&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;You need to 1. declare &lt;code class=&quot;highlighter-rouge&quot;&gt;@State isPresented = false&lt;/code&gt;, 2. passing it to &lt;a href=&quot;https://developer.apple.com/documentation/swiftui/view/3352791-sheet&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.sheet()&lt;/code&gt;&lt;/a&gt;, and 3. button action to set &lt;code class=&quot;highlighter-rouge&quot;&gt;isPresented = true&lt;/code&gt;. Sorry it is long and ugly.&lt;/p&gt;

&lt;h2 id=&quot;2-ways-to-dismiss-eg-sheet&quot;&gt;&lt;a href=&quot;https://www.hackingwithswift.com/quick-start/swiftui/how-to-make-a-view-dismiss-itself&quot;&gt;2 ways to dismiss (eg. sheet)&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Use environment, or pass a binding to the sheet’s &lt;code class=&quot;highlighter-rouge&quot;&gt;isPresented&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;how-to-observe-an-state-or-a-control&quot;&gt;How to observe an &lt;code class=&quot;highlighter-rouge&quot;&gt;@State&lt;/code&gt; or a control?&lt;/h2&gt;

&lt;p&gt;You will often have a &lt;code class=&quot;highlighter-rouge&quot;&gt;@State&lt;/code&gt; and pass it to a control such as &lt;code class=&quot;highlighter-rouge&quot;&gt;Toggle&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;TextField&lt;/code&gt;. But you can’t just observe the state with &lt;code class=&quot;highlighter-rouge&quot;&gt;didSet&lt;/code&gt;. Instead, you need to create a binding like &lt;a href=&quot;https://stackoverflow.com/a/59040171/242682&quot;&gt;this&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;modifiers&quot;&gt;Modifiers&lt;/h2&gt;

&lt;p&gt;The concept is used throughout, applying modifier after modifier repeatedly. It is using &lt;strong&gt;Builder design pattern&lt;/strong&gt;.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;SomeView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;multilineTextAlignment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// Modifier 1&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;                    &lt;span class=&quot;c1&quot;&gt;// Modifier 2&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;foregroundColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;green&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;// Modifier 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It tends to get messy and with many lines. A trick here is to create customer modifiers.&lt;/p&gt;

&lt;h2 id=&quot;custom-modifiers&quot;&gt;Custom Modifiers&lt;/h2&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CustomModifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ViewModifier&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;multilineTextAlignment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// Modifier 1&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;                    &lt;span class=&quot;c1&quot;&gt;// Modifier 2&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;foregroundColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;green&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;// Modifier 3&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With that, we can now use it on any View by applying 1 &lt;code class=&quot;highlighter-rouge&quot;&gt;modifier&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;SomeView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;modifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;CustomModifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;view-extension&quot;&gt;View Extension&lt;/h2&gt;

&lt;p&gt;Custom modifier is a good way to refactor your code. Another way is by extending &lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;customModifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Color&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;green&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;multilineTextAlignment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// Modifier 1&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;                    &lt;span class=&quot;c1&quot;&gt;// Modifier 2&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;foregroundColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;// Modifier 3, with `color` passed in&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can even do &lt;a href=&quot;https://swiftui-lab.com/view-extensions-for-better-code-readability/&quot;&gt;conditional modifier&lt;/a&gt; (advanced).&lt;/p&gt;

&lt;p&gt;When do you use &lt;code class=&quot;highlighter-rouge&quot;&gt;ViewModifier&lt;/code&gt; and when do you use &lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt; extension? &lt;code class=&quot;highlighter-rouge&quot;&gt;ViewModifier&lt;/code&gt; is more powerful because it can have instance variables and &lt;code class=&quot;highlighter-rouge&quot;&gt;@State&lt;/code&gt;, so use it if that’s needed.&lt;/p&gt;

&lt;h2 id=&quot;applying-modifiers-to-a-group-of-views&quot;&gt;Applying modifiers to a group of views&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Group&lt;/code&gt; is a logical grouping, without any layout specific layout like &lt;code class=&quot;highlighter-rouge&quot;&gt;HStack&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;Form&lt;/code&gt;. When you apply a modifier to a group, it will apply to every view in the group.&lt;/p&gt;

&lt;h2 id=&quot;view-erasure&quot;&gt;View Erasure&lt;/h2&gt;

&lt;p&gt;Because SwiftUI need to know the view type during compile time, there will be times you need to erase the type eg. to make 2 views they same type. &lt;code class=&quot;highlighter-rouge&quot;&gt;AnyView&lt;/code&gt; will do that.&lt;/p&gt;

&lt;h2 id=&quot;alert-with-multiple-custom-buttons&quot;&gt;Alert with multiple custom buttons&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Alert&lt;/code&gt; now supports only 2 buttons, and will possibly make it more flexible. Alternatively, &lt;a href=&quot;https://developer.apple.com/documentation/swiftui/actionsheet&quot;&gt;ActionSheet&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;animation--transition&quot;&gt;Animation &amp;amp; Transition&lt;/h2&gt;

&lt;p&gt;Add &lt;code class=&quot;highlighter-rouge&quot;&gt;animation()&lt;/code&gt; to a binding, or use &lt;code class=&quot;highlighter-rouge&quot;&gt;withAnimation()&lt;/code&gt; with state, to animate the view changes.&lt;/p&gt;

&lt;p&gt;The default transition is fade. To change, use the &lt;code class=&quot;highlighter-rouge&quot;&gt;transition()&lt;/code&gt; modifier.&lt;/p&gt;

&lt;h2 id=&quot;resume-the-live-preview&quot;&gt;Resume the live preview&lt;/h2&gt;

&lt;p&gt;Because Xcode will pause the live preview when there is significant update, it is useful to know the shortcut to resume &lt;code class=&quot;highlighter-rouge&quot;&gt;Option+Cmd+P&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;sample-previewprovider&quot;&gt;Sample PreviewProvider&lt;/h2&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;Group&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;MyView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;MyView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(\&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;colorScheme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(\&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sizeCategory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extraExtraExtraLarge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;previewDevice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;iPhone 8&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Or .fixed&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;Group&lt;/code&gt; displays 2 devices. You can have more, and configure as desired.&lt;/p&gt;

&lt;h2 id=&quot;refactor-the-views&quot;&gt;Refactor the views&lt;/h2&gt;

&lt;p&gt;Because of the way it is designed, a complex view would have deeply nested code, with lots of modifier. To refactor relentlessly, a shortcut is to &lt;code class=&quot;highlighter-rouge&quot;&gt;Cmd+Click&lt;/code&gt; on a view &amp;gt; &lt;strong&gt;Extract subview&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;semantic-colors&quot;&gt;Semantic Colors&lt;/h2&gt;

&lt;p&gt;Some examples:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;foregroundColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;accentColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;foregroundColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;foregroundColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Notice this uses an initializer&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;foregroundColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;secondaryLabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;systemBackground&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;more-resources&quot;&gt;More Resources&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://fuckingswiftui.com/&quot;&gt;https://fuckingswiftui.com/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/vlondon/awesome-swiftui&quot;&gt;https://github.com/vlondon/awesome-swiftui&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ivanvorobei/awesome-ios-ui&quot;&gt;https://github.com/ivanvorobei/awesome-ios-ui&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.hackingwithswift.com/quick-start/swiftui/swiftui-tips-and-tricks&quot;&gt;https://www.hackingwithswift.com/quick-start/swiftui/swiftui-tips-and-tricks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 14 Feb 2020 10:49:33 +0800</pubDate>
        <link>https://samwize.com/2020/02/14/getting-started-with-swiftui/</link>
        <guid isPermaLink="true">https://samwize.com/2020/02/14/getting-started-with-swiftui/</guid>
        
        
        <category>SwiftUI</category>
        
      </item>
    
      <item>
        <title>Pitfall: URL for Local Files</title>
        <description>&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;URL&lt;/code&gt; is a very common data structure, and can be used for http, file, and other schema.&lt;/p&gt;

&lt;p&gt;But I often fell into the pitfalls of using it.&lt;/p&gt;

&lt;p&gt;The biggest of all is using the wrong initializer.&lt;/p&gt;

&lt;h2 id=&quot;initializations-urlfileurlwithpath-vs-urlstring&quot;&gt;Initializations &lt;code class=&quot;highlighter-rouge&quot;&gt;URL(fileURLWithPath:)&lt;/code&gt; vs &lt;code class=&quot;highlighter-rouge&quot;&gt;URL(string:)&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;For &lt;strong&gt;local files&lt;/strong&gt;, always use &lt;code class=&quot;highlighter-rouge&quot;&gt;URL(fileURLWithPath:)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The initialization does 2 things:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Encode if needed&lt;/li&gt;
  &lt;li&gt;Append &lt;code class=&quot;highlighter-rouge&quot;&gt;file://&lt;/code&gt; if needed&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So for the string path &lt;code class=&quot;highlighter-rouge&quot;&gt;/Document/Space .txt&lt;/code&gt;, the initialization will create the URL &lt;code class=&quot;highlighter-rouge&quot;&gt;file:///Document/Space%20.txt&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;use-filemanager&quot;&gt;Use &lt;code class=&quot;highlighter-rouge&quot;&gt;FileManager&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Use this for forming URL for local files:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;documentDirectory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try!&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FileManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;documentDirectory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userDomainMask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;appropriateFor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;fileURL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;documentDirectory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;appendingPathComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;secret.txt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;pitfall-uiactivityviewcontroller&quot;&gt;Pitfall: &lt;code class=&quot;highlighter-rouge&quot;&gt;UIActivityViewController&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;activityItems&lt;/code&gt; can accept a &lt;code class=&quot;highlighter-rouge&quot;&gt;URL&lt;/code&gt; to a local file, but they need to be in the format of &lt;code class=&quot;highlighter-rouge&quot;&gt;file://...&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If it is not, it will not be sharable 🤔&lt;/p&gt;

&lt;p&gt;So do this, if needed:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let fileUrl = URL(fileURLWithPath: url.absoluteString)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Or just don’t ever use &lt;code class=&quot;highlighter-rouge&quot;&gt;URL(string:)&lt;/code&gt; for local files.&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 09 Feb 2020 21:02:00 +0800</pubDate>
        <link>https://samwize.com/2020/02/09/pitfall-url-for-local-files/</link>
        <guid isPermaLink="true">https://samwize.com/2020/02/09/pitfall-url-for-local-files/</guid>
        
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>Bet You Didn't Know: You Don't Need 5.5 Inch Screenshots for App Store</title>
        <description>&lt;p&gt;The &lt;a href=&quot;https://help.apple.com/app-store-connect/#/devd274dd925&quot;&gt;App Store screenshots specification&lt;/a&gt; (as of Feb 2020) states that you need &lt;strong&gt;at least these two sizes&lt;/strong&gt;:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;6.5 inch (iPhone 11 etc)&lt;/li&gt;
  &lt;li&gt;5.5 inch (iPhone 8 etc)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;After a series of app review rejections, I learnt that &lt;strong&gt;reviewers can approve your app without 5.5” screenshots&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;Take a look of my app in developer portal:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/dualgram-no-5-5.jpg&quot; alt=&quot;&quot; class=&quot;border&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;does-it-mean-the-app-does-not-support-55&quot;&gt;Does it mean the app does not support 5.5”?&lt;/h2&gt;

&lt;p&gt;Absolutely NOT.&lt;/p&gt;

&lt;p&gt;If you check out my app on a 5.5” device, it will still show up, but the screenshots is using 6.5” ones..&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/dualgram-on-5_5-device.jpg&quot; alt=&quot;Without 5.5&amp;quot; vs With 5.5&amp;quot;, on iPhone 8&quot; class=&quot;border&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So, it seems App Store will &lt;strong&gt;make 5.5” screenshots optional&lt;/strong&gt; in the future. For now, app reviewers are given the power to approve without 5.5”.&lt;/p&gt;

&lt;h2 id=&quot;why-my-app-can-do-without-55&quot;&gt;Why my app can do without 5.5”?&lt;/h2&gt;

&lt;p&gt;Let me now tell the whole story, which doesn’t end well.&lt;/p&gt;

&lt;p&gt;My app – &lt;a href=&quot;https://dualgram.com&quot;&gt;Dualgram&lt;/a&gt; – doesn’t support 5.5 inch devices (iPhone 8 and below). So the screenshot warns users NOT to download (above screenshot, on the right).&lt;/p&gt;

&lt;p&gt;The reviewer rejects on the grounds of &lt;strong&gt;Accurate Metadata&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;We noticed that your screenshots do not sufficiently reflect your app in use.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I appealed, but failed.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(Strangely, 2 months ago, I appealed for the same issue, and succeeded.)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Then this suggestion:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/dualgram-rejected-remove-5_5-2.jpg&quot; alt=&quot;&quot; class=&quot;border&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I tried, but couldn’t submit, so I ask for help:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/dualgram-rejected-remove-5_5-3.jpg&quot; alt=&quot;&quot; class=&quot;border&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Hail to their power, they override the error, and approved!&lt;/p&gt;

&lt;h2 id=&quot;not-what-i-expected&quot;&gt;Not what I expected&lt;/h2&gt;

&lt;p&gt;I thought that without 5.5” screenshot, the app will not support 5.5” devices.&lt;/p&gt;

&lt;p&gt;But no, it simply uses the 6.5” screenshots..&lt;/p&gt;

&lt;p&gt;No good at all, for Dualgram..&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Related:&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/2019/09/20/i-am-no-longer-surprise-over-app-store-review-rejections/&quot;&gt;I’m Not Surprise With App Store Review Rejections Anymore&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 08 Feb 2020 11:48:21 +0800</pubDate>
        <link>https://samwize.com/2020/02/08/bet-you-didnt-know-you-dont-need-5-5-screenshots-for-app-store/</link>
        <guid isPermaLink="true">https://samwize.com/2020/02/08/bet-you-didnt-know-you-dont-need-5-5-screenshots-for-app-store/</guid>
        
        
        <category>App Store</category>
        
        <category>Rejections</category>
        
      </item>
    
      <item>
        <title>iOS Conf SG 2020 Videos</title>
        <description>&lt;p&gt;Videos from &lt;a href=&quot;https://2020.iosconf.sg/&quot;&gt;iOS Conf SG 2020&lt;/a&gt; are now available on &lt;a href=&quot;https://www.youtube.com/channel/UCUwelGOCK00mp8j241tFbeg/videos&quot;&gt;YouTube&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here are 3 that I enjoyed.&lt;/p&gt;

&lt;h2 id=&quot;1-global-variable-oriented-programming&quot;&gt;1. &lt;a href=&quot;https://www.youtube.com/watch?v=CyQ59ZfT5E0&quot;&gt;Global Variable Oriented Programming&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Admit it. &lt;strong&gt;We all are using global variables&lt;/strong&gt;, in the form of singletons, and environment (a singleton wrapping multiple singletons)!&lt;/p&gt;

&lt;p&gt;SwiftUI changes everything.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;View are now &lt;code class=&quot;highlighter-rouge&quot;&gt;Struct&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Data are now &lt;code class=&quot;highlighter-rouge&quot;&gt;Class&lt;/code&gt; 🤔&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;@twostraws showed how we can implement global data and still observe them in &lt;strong&gt;UIKit&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;2-building-secure-ios-apps&quot;&gt;2. &lt;a href=&quot;https://www.youtube.com/watch?v=b6LI6j_aJ9k&quot;&gt;Building Secure iOS Apps&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://owasp.org&quot;&gt;OWASP&lt;/a&gt; for mobile appsec. &lt;a href=&quot;https://github.com/OWASP/owasp-masvs&quot;&gt;MASVS&lt;/a&gt; is a standard for mobile apps. All developers should at least implement a basic level.&lt;/p&gt;

&lt;p&gt;Did you know can use &lt;a href=&quot;https://github.com/OWASP/owasp-mstg/blob/master/Document/0x06d-Testing-Data-Storage.md&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;LAContext&lt;/code&gt; with keychain&lt;/a&gt;?&lt;/p&gt;

&lt;h2 id=&quot;3-full-stack-development-with-vapor&quot;&gt;3. &lt;a href=&quot;https://www.youtube.com/watch?v=fpWOD3JpSrI&quot;&gt;Full stack development with Vapor&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I think 2020 is prime time to use Vapor for server side development.&lt;/p&gt;

&lt;p&gt;It’s now &lt;a href=&quot;https://theswiftdev.com/2019/08/26/whats-new-in-vapor-4/&quot;&gt;Vapor 4&lt;/a&gt;, Swift 5.1, SwiftNIO 2. The ecosystem is more mature. And a &lt;a href=&quot;https://medium.com/better-programming/who-killed-kitura-e5aa1096a4c1&quot;&gt;competitor&lt;/a&gt; is killed.&lt;/p&gt;
</description>
        <pubDate>Fri, 31 Jan 2020 14:08:42 +0800</pubDate>
        <link>https://samwize.com/2020/01/31/ios-conf-sg-2020-videos/</link>
        <guid isPermaLink="true">https://samwize.com/2020/01/31/ios-conf-sg-2020-videos/</guid>
        
        
        <category>iOS</category>
        
        <category>Conference</category>
        
      </item>
    
      <item>
        <title>Comment: Omh's Day in the Life of an iOS Developer</title>
        <description>&lt;p&gt;I received the following push notification from &lt;a href=&quot;https://omh.sg&quot;&gt;ohmyhome&lt;/a&gt;, a Singapore PropTech startup.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/omh-push.jpg&quot; alt=&quot;I thought it's a joke&quot; /&gt;&lt;/p&gt;

&lt;p&gt;No joke, they really have a &lt;a href=&quot;https://omh.sg/blog/post/day-life-ios-developer&quot;&gt;blog post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Understandably, the blog post is for &lt;a href=&quot;https://omh.sg/careers&quot;&gt;hiring&lt;/a&gt;, and thus the &lt;em&gt;cringy dramatic writing&lt;/em&gt; to put the company in good light.&lt;/p&gt;

&lt;p&gt;Probably directed and written by a PR person. The iOS developer is innocent. But it’s so amusing that I have to comment on it 😂&lt;/p&gt;

&lt;h2 id=&quot;800-am-work-in-progress-wip-meeting&quot;&gt;8:00 am: Work-In-Progress (WIP) meeting&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;a one-hour meeting across all the departments from Engineering, Marketing, Customer Service, Operations, Design, Business Development, the Philippines (PH) team, to the Malaysia team.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To start work at &lt;strong&gt;8am&lt;/strong&gt; is very, very rare. I call this a bluff.&lt;/p&gt;

&lt;p&gt;Worse of all, it’s a &lt;strong&gt;World War III meeting&lt;/strong&gt; with so many departments, for 1 hour! That’s 1 fresh hour wasted in the morning.&lt;/p&gt;

&lt;h2 id=&quot;900-am-stand-up-meeting&quot;&gt;9:00 am: Stand-up meeting&lt;/h2&gt;

&lt;p&gt;I hope he didn’t &lt;strong&gt;stand for 30 minutes&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;930-am-work-starts&quot;&gt;9:30 am: Work starts&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;dive into his JIRA list, Slack notifications and Trello board.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Oh no. JIRA + Trello. Is it the more tools the better?&lt;/p&gt;

&lt;h2 id=&quot;200-pm-to-400-pm-deep-work&quot;&gt;2:00 pm to 4:00 pm: Deep work&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;If he’s not furiously coding, he is regularly consulting our Backend Engineer for productive, technology-based discussions that spur creative solutions.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Communication with backend engineer is essential. But the discussions are usually just clarification over a lack of documentation, or to ask for changes to feed the app with data, or to find a bug together.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Creative solutions?&lt;/strong&gt; Hmm that usually result in bugs. Boring code is good.&lt;/p&gt;

&lt;h2 id=&quot;415-pm-to-445-pm-meeting-with-marketing-team&quot;&gt;4:15 pm to 4:45 pm: Meeting with Marketing Team&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;notify the marketing team to ideate campaigns that will communicate his hard work through beautifully designed artworks, ad copies, blog articles, videos and more.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;OMG. Don’t they have a &lt;a href=&quot;https://omh.sg/blog/post/day-life-product-manager?utm_source=blog&quot;&gt;Product Manager&lt;/a&gt;?&lt;/p&gt;

&lt;h2 id=&quot;445-pm-to-600-pm-more-coding&quot;&gt;4:45 pm to 6:00 pm: More coding&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;to clear the remaining pending items on his Trello board, which usually consists of code cleanups, committing his code, doing code reviews and submitting pull requests.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is narrative fallacy.&lt;/p&gt;

&lt;p&gt;Engineers don’t do the above only at the end of the day.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The blog post also left out the real coding work done in silent nights, when there’s no one to disturb.&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 30 Jan 2020 17:47:53 +0800</pubDate>
        <link>https://samwize.com/2020/01/30/comment-omh-day-in-the-life-of-an-ios-developer/</link>
        <guid isPermaLink="true">https://samwize.com/2020/01/30/comment-omh-day-in-the-life-of-an-ios-developer/</guid>
        
        
        <category>Singapore</category>
        
        <category>Life</category>
        
      </item>
    
      <item>
        <title>Singapore Is Now Collecting GST From App Store</title>
        <description>&lt;p&gt;As a Singapore developer, I recently receive an email from Apple on the new GST law on digital goods &amp;amp; services.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://just2me.com/img/apple-email-on-gst-change.jpg&quot; alt=&quot;&quot; class=&quot;border&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;originally-posted-in-my-other-blog-here-is-an-excerpt&quot;&gt;Originally posted in &lt;a href=&quot;https://just2me.com/2019/12/11/how-gst-on-digital-goods-affect-a-self-employed-app-developer/&quot;&gt;my other blog&lt;/a&gt;, here is an excerpt&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Due to tax regulation changes that go into effect on January 1, 2020 in Singapore, developers based in Singapore must provide their Singapore Goods and Services Tax (GST) registration status in App Store Connect by January 13, 2020.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you provide your GST Registration Number, your proceeds will not be affected.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you do not, you will be considered taxable per Singapore GST laws and regulations, therefore you will be charged 7% GST on WORLDWIDE commissions payable to Apple.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Please note that Apple does not administer GST on sales to customers in Singapore for developers based in Singapore. You are responsible for determining if GST applies to your sales and for remitting GST to the Inland Revenue Authority of Singapore (IRAS).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Apple gave Singapore developers 2 choices:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Don’t register for GST -&amp;gt; Apple charge 7% on WORLDWIDE commissions payable to Apple&lt;/li&gt;
  &lt;li&gt;Register for GST -&amp;gt; Proceeds unchanged (but you have to file GST return)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;http://just2me.com/img/not-gst-registered.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://just2me.com/img/gst-registered.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Read more &lt;a href=&quot;https://just2me.com/2019/12/11/how-gst-on-digital-goods-affect-a-self-employed-app-developer/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Overseas (non-Singapore) developers are also affected, though not strongly enforced, yet.&lt;/p&gt;
</description>
        <pubDate>Thu, 12 Dec 2019 15:49:07 +0800</pubDate>
        <link>https://samwize.com/2019/12/12/singapore-is-now-collecting-gst-from-app-store/</link>
        <guid isPermaLink="true">https://samwize.com/2019/12/12/singapore-is-now-collecting-gst-from-app-store/</guid>
        
        
        <category>Singapore</category>
        
      </item>
    
      <item>
        <title>Guide to Property Wrapper</title>
        <description>&lt;p&gt;With &lt;a href=&quot;https://github.com/apple/swift-evolution/blob/master/proposals/0258-property-wrappers.md&quot;&gt;SE-0258&lt;/a&gt;, Swift 5.1 adds a new &lt;a href=&quot;https://en.wikipedia.org/wiki/Syntactic_sugar&quot;&gt;syntactic sugar&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Properties can now add &lt;code class=&quot;highlighter-rouge&quot;&gt;@SomeAwesomeAttribute&lt;/code&gt;, which will wrap the property with &lt;em&gt;some more code&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;should-you-use-it&quot;&gt;Should you use it?&lt;/h2&gt;

&lt;p&gt;Some developers swear never to use &lt;code class=&quot;highlighter-rouge&quot;&gt;didSet&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;willSet&lt;/code&gt; on properties, because that’s just adding another place where logics will happen. Another place to look for bug. Another place that can easily break tests..&lt;/p&gt;

&lt;p&gt;Similarly, you can avoid using property wrapper. Or at least you can &lt;strong&gt;avoid creating your custom ones&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;If you use Combine or SwiftUI, then there is no escape from knowing them.&lt;/p&gt;

&lt;p&gt;They have good reasons to use it. Some codes can be very repetitive; doing the same thing on a certain property. That’s where a wrapper will make the code much readable.&lt;/p&gt;

&lt;h2 id=&quot;example-of-a-custom-property-wrapper&quot;&gt;Example of a custom property wrapper&lt;/h2&gt;

&lt;p&gt;So if you’re certain a property wrapper will make your code better, here’s how to create one.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;@propertyWrapper&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Loud&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;original&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 1. This is how the wrapper get &amp;amp; set the property&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;wrappedValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;original&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;uppercased&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;original&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newValue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 2. An init&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;wrappedValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;original&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrappedValue&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 3. Optional - provide another wrapper value of ANY TYPE, when access via the prefix `$`&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;projectedValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;original&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;original&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newValue&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The code creates a &lt;code class=&quot;highlighter-rouge&quot;&gt;@Loud&lt;/code&gt; that can wrap &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt; properties, making them always UPPERCASED. You can also wrap generics, which I will not go into.&lt;/p&gt;

&lt;p&gt;The essence:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@propertyWrapper&lt;/code&gt; declaration&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;wrappedValue&lt;/code&gt; with the type it can wrap&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;init(wrappedValue:)&lt;/code&gt; with a custom initialization&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;projectedValue&lt;/code&gt; (optional) is another special wrapper&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;usage&quot;&gt;Usage&lt;/h2&gt;

&lt;p&gt;Let’s wrap the &lt;code class=&quot;highlighter-rouge&quot;&gt;greetings&lt;/code&gt; property with our custom wrapper &lt;code class=&quot;highlighter-rouge&quot;&gt;@Loud&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;@Loud&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;greetings&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With that, using the property &lt;code class=&quot;highlighter-rouge&quot;&gt;greetings&lt;/code&gt; will provide the wrapped value.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;greetings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &quot;HELLO&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can also use the &lt;strong&gt;projected value&lt;/strong&gt; via &lt;code class=&quot;highlighter-rouge&quot;&gt;$greetings&lt;/code&gt; (prefix with a &lt;code class=&quot;highlighter-rouge&quot;&gt;$&lt;/code&gt;). In our custom property wrapper, it returns the string length, as an &lt;code class=&quot;highlighter-rouge&quot;&gt;Int&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;greetings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A projected value is just &lt;em&gt;another convenient wrapper&lt;/em&gt;, for &lt;em&gt;any type&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;In Combine, &lt;code class=&quot;highlighter-rouge&quot;&gt;@Published&lt;/code&gt; uses the projected value to access the &lt;code class=&quot;highlighter-rouge&quot;&gt;Publisher&lt;/code&gt; for the property. &lt;em&gt;So $ gives Publisher.&lt;/em&gt; It is up to the custom property wrapper on &lt;em&gt;what $ gives&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Since the &lt;code class=&quot;highlighter-rouge&quot;&gt;$&lt;/code&gt; prefix don’t give any meaning on what it actually projects, you have to dig into the code, or &lt;em&gt;RTFD&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;So once again, use them sparingly.&lt;/p&gt;

&lt;h2 id=&quot;bonus-dynamicmemberlookup&quot;&gt;BONUS: @dynamicMemberLookup&lt;/h2&gt;

&lt;p&gt;In &lt;a href=&quot;https://developer.apple.com/videos/play/wwdc2019/415/&quot;&gt;WWDC 2019, session 415&lt;/a&gt;, along with property wrapper, they also talked about a &lt;strong&gt;convenient key path member lookup&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;It is nice to understand how the framework provided &lt;code class=&quot;highlighter-rouge&quot;&gt;@State&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;@Binding&lt;/code&gt; works.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/property-wrapper-dynamic-lookup.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$slide.title&lt;/code&gt; is slick, because the compiler actually rewrites to &lt;code class=&quot;highlighter-rouge&quot;&gt;$slide[dynamicMember: \Slide.title]&lt;/code&gt;, which is then a &lt;code class=&quot;highlighter-rouge&quot;&gt;Binding&amp;lt;String&amp;gt;&lt;/code&gt;!&lt;/p&gt;
</description>
        <pubDate>Wed, 04 Dec 2019 16:38:11 +0800</pubDate>
        <link>https://samwize.com/2019/12/04/guide-to-property-wrapper/</link>
        <guid isPermaLink="true">https://samwize.com/2019/12/04/guide-to-property-wrapper/</guid>
        
        
      </item>
    
  </channel>
</rss>
