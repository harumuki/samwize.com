<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>@samwize</title>
    <description>¯\_(ツ)_/¯
</description>
    <link>https://samwize.com/</link>
    <atom:link href="https://samwize.com/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sat, 22 Aug 2020 15:12:32 +0800</pubDate>
    <lastBuildDate>Sat, 22 Aug 2020 15:12:32 +0800</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>Navigating Xcode 12 and Tabs</title>
        <description>&lt;p&gt;Xcode 12 introduced a new tab system call &lt;strong&gt;Document Tabs&lt;/strong&gt;. The old system is &lt;em&gt;Window Tabs&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The new system screwed up many of the keyboard shortcuts I am used to.&lt;/p&gt;

&lt;p&gt;One of the most troubling is that I can’t create a tab with &lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ T&lt;/code&gt; anymore.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;NOTE: This is written as of Xcode 12 beta 5, so things might change. It also depends on Xcode Preferences &amp;gt; Navigation. I use the Open in Place and Uses Tab.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;opening-a-file-in-document-tabs&quot;&gt;Opening a file in document tabs&lt;/h2&gt;

&lt;p&gt;When you open a file, there is a new concept between 1) opening temporarily and 2) keeping in place.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Click&lt;/code&gt; a file to show in current editor. But this is only &lt;em&gt;temporarily&lt;/em&gt;. If you click another file, it will replace the temporary file.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Double click&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ ⌥ O&lt;/code&gt; a file to keep in the editor.&lt;/p&gt;

&lt;p&gt;Hence, my most common workflow now consists of 2 steps.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ ⇧ O&lt;/code&gt; to quick search for a file&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ ⌥ O&lt;/code&gt; to keep it in place&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Other usual shortcuts:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ ⇧ [&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;]&lt;/code&gt; to navigate left and right of the tabs.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ W&lt;/code&gt; to close a document tab.&lt;/p&gt;

&lt;h2 id=&quot;window-tabs&quot;&gt;Window tabs&lt;/h2&gt;

&lt;p&gt;This seems like &lt;em&gt;deprecated&lt;/em&gt;. Or we should try to minimize the use.&lt;/p&gt;

&lt;p&gt;You cannot create a window tab using &lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ T&lt;/code&gt; anymore. If you want to, make sure &lt;code class=&quot;highlighter-rouge&quot;&gt;View &amp;gt; Show Window Tab Bar&lt;/code&gt;, then click on the &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; on the right of the bar.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ ⇧ W&lt;/code&gt; to close window tab.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ ⌥ ⇧ T&lt;/code&gt; to rename a window tab.&lt;/p&gt;

&lt;h2 id=&quot;make-use-of-editors&quot;&gt;Make use of Editors&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⌥ Click&lt;/code&gt; to open a file in the &lt;strong&gt;split editor&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ CTRL T&lt;/code&gt; to open new editor.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ ⇧ CTRL W&lt;/code&gt; to close split editor&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Drag&lt;/code&gt; the tab to split editor, or to another window tab.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⌥ Click&lt;/code&gt; on a file to open in next editor.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⇧ ⌥ Click&lt;/code&gt; on a file, and move with mouse to an editor&lt;/p&gt;

&lt;h2 id=&quot;other-shortcuts&quot;&gt;Other shortcuts&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ ⇧ J&lt;/code&gt; to locate the file in the project navigator&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CTRL 6&lt;/code&gt; to dropdown the classes, methods and properties of a file. Following that, type to search further.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;⌘ ⇧ A&lt;/code&gt; on a code under caret to show ⌥ions such as Callers, Rename, etc&lt;/p&gt;

&lt;p&gt;Also &lt;a href=&quot;/2012/09/26/xcode-4-dot-5-tips-and-tricks/&quot;&gt;Xcode tips in 2012&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Fri, 21 Aug 2020 22:47:10 +0800</pubDate>
        <link>https://samwize.com/2020/08/21/navigating-xcode-12-and-tabs/</link>
        <guid isPermaLink="true">https://samwize.com/2020/08/21/navigating-xcode-12-and-tabs/</guid>
        
        
        <category>Xcode</category>
        
      </item>
    
      <item>
        <title>Regex Replace Using Atom</title>
        <description>&lt;p&gt;Xcode renaming is good, but in some cases it can’t help.&lt;/p&gt;

&lt;p&gt;Often, I go back to using &lt;a href=&quot;https://flight-manual.atom.io/using-atom/sections/find-and-replace/&quot;&gt;Atom&lt;/a&gt; to find and replace, using regex.&lt;/p&gt;

&lt;h2 id=&quot;1-find&quot;&gt;1. Find&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Open a file (or a directory if multiple files) in Atom&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CMD+C&lt;/code&gt; to copy the string to find&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CMD+SHIFT+F&lt;/code&gt; to bring up Find panel&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When you bring up Atom’s Find panel, the copied string will be automatically populated in the find field, and best of all – &lt;strong&gt;automatically escape regex characters&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/atom-find-replace.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;See the &lt;code class=&quot;highlighter-rouge&quot;&gt;\&lt;/code&gt; added in the Find textfield:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;disease\.cure\(with: &quot;vaccine&quot;\)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;NOTE: Make sure the regex mode (the &lt;code class=&quot;highlighter-rouge&quot;&gt;.*&lt;/code&gt; option) is enabled.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-captured-group&quot;&gt;2. Captured Group&lt;/h2&gt;

&lt;p&gt;Using the following example, we want to find &lt;em&gt;some functions with string&lt;/em&gt;, and refactor them to a simple form:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Original&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;disease&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;vaccine&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;disease&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;mask&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// To replace and become&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;vaccine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;asCure&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mask&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;asCure&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To do that, we need to add captured group for any strings (vaccine, mask, etc). We do that with &lt;code class=&quot;highlighter-rouge&quot;&gt;(.*?)&lt;/code&gt;, capturing the shortest possible string.&lt;/p&gt;

&lt;p&gt;We edit Find to:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;disease\.cure\(with: &quot;(.*?)&quot;\)&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;3-replace&quot;&gt;3. Replace&lt;/h2&gt;

&lt;p&gt;Finally, we replace with:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$1.asCure&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The first captured group is &lt;code class=&quot;highlighter-rouge&quot;&gt;$1&lt;/code&gt;. If you have more captured groups, you can use &lt;code class=&quot;highlighter-rouge&quot;&gt;$2&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;$3&lt;/code&gt; etc.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/atom-find-replace-final.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 17 Aug 2020 10:39:34 +0800</pubDate>
        <link>https://samwize.com/2020/08/17/regex-replace-using-atom/</link>
        <guid isPermaLink="true">https://samwize.com/2020/08/17/regex-replace-using-atom/</guid>
        
        
        <category>Xcode</category>
        
      </item>
    
      <item>
        <title>Apple Is Killing Radio Apps</title>
        <description>&lt;p&gt;Amid the public outcry of Apple being a draconian monopoly, Apple is also clamping down on Internet radio apps.&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Epic Games is trolling Apple with a &amp;quot;1984&amp;quot; Fortnite video. It&amp;#39;s pretty... epic &lt;a href=&quot;https://t.co/4a8DJfJa5b&quot;&gt;pic.twitter.com/4a8DJfJa5b&lt;/a&gt;&lt;/p&gt;&amp;mdash; Tom Warren (@tomwarren) &lt;a href=&quot;https://twitter.com/tomwarren/status/1294004071616086024?ref_src=twsrc%5Etfw&quot;&gt;August 13, 2020&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;my-radio-app-rejected&quot;&gt;MY Radio app rejected&lt;/h2&gt;

&lt;p&gt;A recent update of &lt;a href=&quot;https://just2us.com/myradio/&quot;&gt;my 7-year-old radio streaming app&lt;/a&gt; is being rejected, &lt;em&gt;violating&lt;/em&gt; &lt;a href=&quot;https://developer.apple.com/app-store/review/guidelines/&quot;&gt;Guideline 5.2&lt;/a&gt; on Intellectual Property:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;5.2.3 Audio/Video Downloading: Apps should not facilitate illegal file sharing or include the ability to save, convert, or download media from third-party sources (e.g. Apple Music, YouTube, SoundCloud, Vimeo, etc.) without explicit authorization from those sources. Streaming of audio/video content may also violate Terms of Use, so be sure to check before your app accesses those services. Documentation must be provided upon request.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I have appealed, but failed.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/my-radio-appeal.jpg&quot; alt=&quot;&quot; class=&quot;border&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Interestingly, the app reviewer added that their guidelines are a &lt;strong&gt;living document&lt;/strong&gt;, which constantly evolve.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The App Store Review Guidelines are a living document; new apps presenting new questions may result in new rules at any time. While your app may have been compliant at the time it was first submitted, it is not in compliance at this time.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;other-radio-apps-too&quot;&gt;Other radio apps too&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://gabekangas.com/blog/2020/08/apple-has-shut-down-the-bat-player/&quot;&gt;Bat Player&lt;/a&gt; is being rejected for the same reason. The developer got on a phone call, and the app reviewer said:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I’m sure most of these channels are being run by the same company, so you can get many taken care of by contacting their parent organizations.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;😂 There are probably thousands of such organizations, and they won’t want to deal with thousands of app developer requests.&lt;/p&gt;

&lt;h2 id=&quot;apple-is-the-police&quot;&gt;Apple is the police&lt;/h2&gt;

&lt;p&gt;I don’t know our radio apps infringe on any IP, or not.&lt;/p&gt;

&lt;p&gt;But the fact is: &lt;strong&gt;Apple takes matters into their own hands.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;They remove apps, or limit their features, as and when they desire with their &lt;em&gt;living guidelines&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;They always said they review apps for the good of iPhone users, but &lt;em&gt;who knows&lt;/em&gt; the real motives. I am wary of Apple. 🤥&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/broken-apple.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 14 Aug 2020 10:31:27 +0800</pubDate>
        <link>https://samwize.com/2020/08/14/apple-is-killing-radio-apps/</link>
        <guid isPermaLink="true">https://samwize.com/2020/08/14/apple-is-killing-radio-apps/</guid>
        
        
        <category>Apple</category>
        
      </item>
    
      <item>
        <title>Apple Is Guilty</title>
        <description>&lt;p&gt;I am an iPhone developer since 2008, and I am grateful for the mobile revolution that they started.&lt;/p&gt;

&lt;p&gt;But now, I find Apple &lt;em&gt;guilty&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Apple stifles innovation.&lt;/strong&gt; Even if they’re not a monopoly, they are definitely a bully. (Do watch the &lt;a href=&quot;https://youtu.be/H6eYLCxxQdA&quot;&gt;congress hearing&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;Tim Cook said:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;We apply all rules to all developers equally.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;Equality my ass.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/netflix-app-store-email.jpg&quot; alt=&quot;&quot; class=&quot;border&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.bloomberg.com/news/articles/2020-07-29/apple-considered-taking-40-cut-from-subscriptions-emails-show&quot;&gt;Netflix&lt;/a&gt; has a &lt;strong&gt;special deal&lt;/strong&gt; where they pay only 15%, while other developers pay 30%. Other &lt;em&gt;“reader apps”&lt;/em&gt; also had special treatment.&lt;/p&gt;

&lt;p&gt;Or if you can &lt;a href=&quot;https://techcrunch.com/2020/06/18/interview-apples-schiller-says-position-on-hey-app-is-unchanged-and-no-rules-changes-are-imminent/&quot;&gt;kick up a fuss&lt;/a&gt;, some SVP will do something for you.&lt;/p&gt;

&lt;p&gt;The treatments are &lt;a href=&quot;https://youdownloadtheappanditdoesntwork.com&quot;&gt;never consistent&lt;/a&gt;, partly because the &lt;strong&gt;rules are always changing&lt;/strong&gt;, and app reviewers varied in their line of work.&lt;/p&gt;

&lt;p&gt;I have &lt;a href=&quot;/2020/04/19/taking-down-concert-camera/&quot;&gt;no&lt;/a&gt; &lt;a href=&quot;/2019/09/20/i-am-no-longer-surprise-over-app-store-review-rejections/&quot;&gt;shortage&lt;/a&gt; of app review rejections, and the latest came 2 days ago, and it again show how inconsistent the rules are.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/radio_streams_need_authorization.jpg&quot; alt=&quot;&quot; class=&quot;border&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://just2us.com/sgradio/&quot;&gt;SG Radio&lt;/a&gt; is an Internet radio app that I have launched 10 years ago. Surprisingly, they (or this app reviewer) now deem streaming radio stations as IP infringement and asked for authorization documents.&lt;/p&gt;

&lt;p&gt;I am worried about my livelihood, which is &lt;em&gt;solely&lt;/em&gt; on Apple platform.&lt;/p&gt;

&lt;p&gt;Today, I am seriously considering other open platforms.&lt;/p&gt;

&lt;p&gt;As &lt;a href=&quot;https://daringfireball.net/2020/07/parsing_cooks_opening_statement&quot;&gt;Daring Fireball&lt;/a&gt; puts it:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;To omit the fact that there was — dating back to the mid-’90s, well over a decade before the iPhone App Store — a thriving market for software sold (and downloaded) directly over a thing called “The Internet” is sophistry.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/images/broken-apple.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 30 Jul 2020 16:51:43 +0800</pubDate>
        <link>https://samwize.com/2020/07/30/apple-is-guilty/</link>
        <guid isPermaLink="true">https://samwize.com/2020/07/30/apple-is-guilty/</guid>
        
        
        <category>Apple</category>
        
      </item>
    
      <item>
        <title>What Is Wrong With Xcode 12 Tabs</title>
        <description>&lt;p&gt;In new Xcode 12, there is a “new” tab system. There is a tabs within tabs. Something along &lt;em&gt;window tab&lt;/em&gt; or &lt;em&gt;document tab&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I cannot figure out what’s the point, except it frustrates me with how I navigate to previous/next tab using CMD+SHIFT+[ or ].&lt;/p&gt;

&lt;p&gt;And they haven’t fix in Beta 3.. so I switch back to the original tabs I know.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/xcode-12-tab-settings.jpg&quot; alt=&quot;Xcode Preference - Change to Open in place&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 28 Jul 2020 10:02:02 +0800</pubDate>
        <link>https://samwize.com/2020/07/28/what-is-wrong-with-xcode-12-tabs/</link>
        <guid isPermaLink="true">https://samwize.com/2020/07/28/what-is-wrong-with-xcode-12-tabs/</guid>
        
        
        <category>Xcode</category>
        
      </item>
    
      <item>
        <title>Platform Conditional Codes</title>
        <description>&lt;p&gt;Swift has provided us quite a few ways to write codes that work for specific platform, version, and language. Examples:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;Run code only for only iOS 13&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Run code only for Swift 5&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Run code only if can import SwiftUI&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;available&quot;&gt;#available&lt;/h2&gt;

&lt;p&gt;This is a &lt;strong&gt;runtime check&lt;/strong&gt;, so you can use in regular conditional statements.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;#available(iOS 13.6, macOSApplicationExtension 10.15, *)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;someOtherBoolean&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Fallback code&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://docs.swift.org/swift-book/ReferenceManual/Statements.html#grammar_availability-condition&quot;&gt;grammar&lt;/a&gt; for details.&lt;/p&gt;

&lt;p&gt;The trailing &lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt; denotes that it is available for all other platforms, so that future ones such as &lt;code class=&quot;highlighter-rouge&quot;&gt;glassOS&lt;/code&gt; will be supported, when release.&lt;/p&gt;

&lt;h2 id=&quot;available-1&quot;&gt;@available&lt;/h2&gt;

&lt;p&gt;This is an &lt;a href=&quot;https://docs.swift.org/swift-book/ReferenceManual/Attributes.html&quot;&gt;attribute&lt;/a&gt; that applies to types and properties. The grammar is same as &lt;code class=&quot;highlighter-rouge&quot;&gt;#available&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;@available&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iOS&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;My12Monkeys&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can also specify for language version:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;@available&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;swift&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// NOTE: Must be a lower case 's'&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;swift5Only&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can also annotate more info like this:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;@available&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iOS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;deprecated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;No reason&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;renamed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Singapore&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Singapura&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can also stack multiple attributes.&lt;/p&gt;

&lt;h2 id=&quot;canimport&quot;&gt;canImport()&lt;/h2&gt;

&lt;p&gt;This &lt;a href=&quot;https://github.com/apple/swift-evolution/blob/master/proposals/0075-import-test.md&quot;&gt;tests for modules&lt;/a&gt; availability.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#if canImport(SwiftUI)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// SwiftUI code&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#else&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Fallback to UIKit&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#endif&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;related&quot;&gt;Related&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/2019/02/26/preprocessor-codes-for-swift/&quot;&gt;Preprocessor Codes for Swift&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 22 Jul 2020 21:45:49 +0800</pubDate>
        <link>https://samwize.com/2020/07/22/platform-conditional-codes/</link>
        <guid isPermaLink="true">https://samwize.com/2020/07/22/platform-conditional-codes/</guid>
        
        
      </item>
    
      <item>
        <title>NavigationView for iOS and macOS</title>
        <description>&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NavigationView&lt;/code&gt; is the SwiftUI component to creating the UIKit’s &lt;em&gt;equivalent&lt;/em&gt; of &lt;code class=&quot;highlighter-rouge&quot;&gt;UINavigationController&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;UI/NSSplitViewController&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;While it is possible to share code between iOS and macOS, this post will show how to do for each platform individually, for clarity.&lt;/p&gt;

&lt;p&gt;There are also 2 types to know:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Standard Navigation: push and pop like &lt;code class=&quot;highlighter-rouge&quot;&gt;UINavigationController&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Split view/columns&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;ios-standard-navigation&quot;&gt;iOS: Standard Navigation&lt;/h2&gt;

&lt;p&gt;This is simple, using the &lt;code class=&quot;highlighter-rouge&quot;&gt;StackNavigationViewStyle()&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;NavigationView&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// This is the root view&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;NavigationLink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;destination&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Pushed view&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Push&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;navigationViewStyle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;StackNavigationViewStyle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;ios-split-view&quot;&gt;iOS: Split view&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/documentation/swiftui/navigationview&quot;&gt;NavigationView&lt;/a&gt; inits with a &lt;code class=&quot;highlighter-rouge&quot;&gt;ViewBuilder&lt;/code&gt; where the first view is the first panel, usually the sidebar. The subsequent views are the placeholders for the other panels.&lt;/p&gt;

&lt;p&gt;The navigation view uses &lt;code class=&quot;highlighter-rouge&quot;&gt;DoubleColumnNavigationViewStyle()&lt;/code&gt;, which is a split view with 2 columns. But you can do similarly for 3 columns.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SplitView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;NavigationView&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;panel1&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// View 1&lt;/span&gt;

            &lt;span class=&quot;kt&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Placeholder for Panel 2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// View 2&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;navigationViewStyle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;DoubleColumnNavigationViewStyle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;panel1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;VStack&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Panel 1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;NavigationLink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;destination&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;panel2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Change panel 2&lt;/span&gt;
                &lt;span class=&quot;kt&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Go to Panel 2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;panel2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Actual Panel 2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;macos&quot;&gt;macOS&lt;/h2&gt;

&lt;p&gt;The biggest difference with macOS is that:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;You need to provide the sizes for the panels, using &lt;code class=&quot;highlighter-rouge&quot;&gt;frame&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;There’s no &lt;code class=&quot;highlighter-rouge&quot;&gt;StackNavigationViewStyle()&lt;/code&gt;, so only column style is available&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SplitView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;NavigationView&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;panel1&lt;/span&gt;

            &lt;span class=&quot;kt&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Placeholder for Panel 2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;maxWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;infinity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;maxHeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;infinity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Fill content view&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// MUST provide the &quot;window size&quot;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;minWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;800&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;maxWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;infinity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;minHeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;maxHeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;infinity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;panel1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;VStack&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Panel 1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;NavigationLink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;destination&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;panel2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;kt&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Go to Panel 2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;minWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;idealWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;150&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;maxWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;maxHeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;infinity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Sidebar width&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;panel2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Panel 2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;maxWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;infinity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;maxHeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;infinity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Fill content view&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A typical layout is to have a smaller sidebar on the left, and a content view that fills the rest of the window.&lt;/p&gt;

&lt;p&gt;Again, &lt;code class=&quot;highlighter-rouge&quot;&gt;NavigationView&lt;/code&gt; can manage multiple columns.&lt;/p&gt;
</description>
        <pubDate>Tue, 21 Jul 2020 18:02:18 +0800</pubDate>
        <link>https://samwize.com/2020/07/21/guide-to-navigationview-for-ios-and-macos/</link>
        <guid isPermaLink="true">https://samwize.com/2020/07/21/guide-to-navigationview-for-ios-and-macos/</guid>
        
        
        <category>SwiftUI</category>
        
      </item>
    
      <item>
        <title>How to Present Full Screen Modal in SwiftUI</title>
        <description>&lt;p&gt;There is a new modifier in SwiftUI 2.0, announced in WWDC 2020, for iOS 14 (beta). &lt;em&gt;But the &lt;a href=&quot;https://developer.apple.com/documentation/swiftui/view/fullscreencover(ispresented:ondismiss:content:)&quot;&gt;API&lt;/a&gt; is actually back dated to iOS 13.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;fullscreencover&quot;&gt;fullScreenCover&lt;/h2&gt;

&lt;p&gt;It works similarly to &lt;a href=&quot;https://developer.apple.com/documentation/swiftui/view/sheet(ispresented:ondismiss:content:)&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sheet&lt;/code&gt;&lt;/a&gt;, but full screen.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PresentFullScreen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;@State&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;isPresentedFullScreen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Present Full Screen&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;isPresentedFullScreen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;toggle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fullScreenCover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;isPresented&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isPresentedFullScreen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;New Screen Presented&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Dismiss&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;isPresentedFullScreen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;toggle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;passing-an-item&quot;&gt;Passing an Item&lt;/h2&gt;

&lt;p&gt;You could also pass an optional Item binding. Then when it is non-nil, the view will be displayed.&lt;/p&gt;

&lt;p&gt;So if you have an item such as &lt;code class=&quot;highlighter-rouge&quot;&gt;@State var book = Book()&lt;/code&gt;, you can pass that into &lt;code class=&quot;highlighter-rouge&quot;&gt;fullScreenCover(item:)&lt;/code&gt;, then you can use it in the presented view.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fullScreenCover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;BookView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Tue, 21 Jul 2020 11:50:27 +0800</pubDate>
        <link>https://samwize.com/2020/07/21/how-to-present-full-screen-modal-in-swiftui/</link>
        <guid isPermaLink="true">https://samwize.com/2020/07/21/how-to-present-full-screen-modal-in-swiftui/</guid>
        
        
        <category>SwiftUI</category>
        
      </item>
    
      <item>
        <title>How to Localize Resources in Swift Packages</title>
        <description>&lt;p&gt;At last, in Swift 5.3, the updated Swift Package Manager (SPM) now supports resources! Yipee~&lt;/p&gt;

&lt;p&gt;This post is a guide to adding resources to your package.&lt;/p&gt;

&lt;h2 id=&quot;1-add-to-target&quot;&gt;1. Add to Target&lt;/h2&gt;

&lt;p&gt;The convention is to add them in a “Resources” subfolder for the &lt;strong&gt;target&lt;/strong&gt;. So if you have a target called &lt;code class=&quot;highlighter-rouge&quot;&gt;MyTarget&lt;/code&gt;, you will add resources to&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/Sources/MyTarget/Resources/&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;But you could actually add to &lt;em&gt;anywhere&lt;/em&gt; in “MyTarget”.&lt;/p&gt;

&lt;h2 id=&quot;2-edit-packageswift&quot;&gt;2. Edit Package.swift&lt;/h2&gt;

&lt;p&gt;Add &lt;code class=&quot;highlighter-rouge&quot;&gt;defaultLocalization&lt;/code&gt; to the &lt;strong&gt;package&lt;/strong&gt; descriptor.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;MyPackage&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;defaultLocalization&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;3-implicit--explicit-resources&quot;&gt;3. Implicit &amp;amp; Explicit Resources&lt;/h2&gt;

&lt;p&gt;Xcode automatically recognize for these &lt;strong&gt;known resources&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;XIB, storyboards&lt;/li&gt;
  &lt;li&gt;Core Data xcdatamodeld&lt;/li&gt;
  &lt;li&gt;Asset Catalogs&lt;/li&gt;
  &lt;li&gt;strings files&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.lproj&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So for the above known resources, there is nothing else to do.&lt;/p&gt;

&lt;p&gt;For for other resources, you need to declare them explicitly.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;targets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;MyLibrary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;resources&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;flu.jpg&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;pandemic.json&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Do NOT process&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;process&lt;/code&gt; will have Xcode optimize the resource for the platform, while &lt;code class=&quot;highlighter-rouge&quot;&gt;copy&lt;/code&gt; will not.&lt;/p&gt;

&lt;h2 id=&quot;4-expose-in-the-package&quot;&gt;4. Expose in the package&lt;/h2&gt;

&lt;p&gt;You should &lt;strong&gt;expose resources from within the package&lt;/strong&gt;, instead of having the app accessing them directly. So let’s say you have this localized string “Okay”, you will publicly expose with&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;localizedOkay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSLocalizedString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Okay&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bundle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;comment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There is something new here: &lt;code class=&quot;highlighter-rouge&quot;&gt;Bundle.module&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This is a generated code for the package (specifically the target)! Prior to this, we make use of &lt;code class=&quot;highlighter-rouge&quot;&gt;Bundle(name:inFramework:)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You cannot (and it does not make sense) to use &lt;code class=&quot;highlighter-rouge&quot;&gt;Bundle.module&lt;/code&gt; in an app. Though it doesn’t stop you from exposing it with&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bundleForMyTarget&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bundle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;module&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then in the app, you can use &lt;code class=&quot;highlighter-rouge&quot;&gt;NSLocalizedString(&quot;Okay&quot;, bundle: bundleForMyTarget, comment: &quot;&quot;)&lt;/code&gt;. &lt;em&gt;Just suggesting.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;pitfall-app-must-add-localization&quot;&gt;PITFALL: App must add localization&lt;/h2&gt;

&lt;p&gt;Even if a package supports a certain localization, the app has to add it first under the app’s Project &amp;gt; Localizations.&lt;/p&gt;

&lt;p&gt;It seems like Xcode will optimize and strip out localizations, if they are not supported in the app.&lt;/p&gt;
</description>
        <pubDate>Thu, 16 Jul 2020 15:52:09 +0800</pubDate>
        <link>https://samwize.com/2020/07/16/how-to-localize-resources-in-swift-packages/</link>
        <guid isPermaLink="true">https://samwize.com/2020/07/16/how-to-localize-resources-in-swift-packages/</guid>
        
        
        <category>SPM</category>
        
      </item>
    
      <item>
        <title>Ideal Xcode Project Structure</title>
        <description>&lt;p&gt;The &lt;a href=&quot;https://developer.apple.com/documentation/swiftui/fruta_building_a_feature-rich_app_with_swiftui&quot;&gt;Fruta sample code&lt;/a&gt; provides a good example of a project structure that supports multi-platforms.&lt;/p&gt;

&lt;h2 id=&quot;use-group-as-folder&quot;&gt;Use Group as Folder&lt;/h2&gt;

&lt;p&gt;Every group in Xcode is an actual folder.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Stop using logical groups without folder.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-main-groups&quot;&gt;The Main Groups&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Shared&lt;/li&gt;
  &lt;li&gt;iOS&lt;/li&gt;
  &lt;li&gt;iOS Clip&lt;/li&gt;
  &lt;li&gt;iOS Widgets&lt;/li&gt;
  &lt;li&gt;macOS&lt;/li&gt;
  &lt;li&gt;macOS Widgets&lt;/li&gt;
  &lt;li&gt;Packages&lt;/li&gt;
  &lt;li&gt;Playgrounds&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Platforms &amp;amp; extensions have their own group. Within them, structure as per your selected architecture eg. MVVM, VIPER. Or any logical grouping that makes the most sense.&lt;/p&gt;

&lt;h2 id=&quot;shared-code&quot;&gt;Shared Code&lt;/h2&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;Shared&lt;/code&gt; group is for code used in &lt;strong&gt;all&lt;/strong&gt; platforms. In Fruta, almost all the code is under &lt;code class=&quot;highlighter-rouge&quot;&gt;Shared&lt;/code&gt;. Only few Swift files are in the platform specific group.&lt;/p&gt;

&lt;p&gt;Even the &lt;code class=&quot;highlighter-rouge&quot;&gt;@main App&lt;/code&gt; is in Shared, and it runs for all: iOS, macOS, widgets, clips. It works because it uses preprocessor code. Alternatively, we could create specific Swift file for each platform.&lt;/p&gt;

&lt;p&gt;You can even breakdown further eg. &lt;code class=&quot;highlighter-rouge&quot;&gt;Shared-iOS&lt;/code&gt;. It is up to you as needed.&lt;/p&gt;

&lt;h2 id=&quot;packages&quot;&gt;Packages&lt;/h2&gt;

&lt;p&gt;Local packages within the projects. Eg. &lt;code class=&quot;highlighter-rouge&quot;&gt;Fruta-Networking&lt;/code&gt;. This is also shared code, but in a formal self contained package. Later on, they can also be moved out of the project to become an external dependency.&lt;/p&gt;

&lt;p&gt;These packages are selectively added to the targets; they can be excluded in a certain target.&lt;/p&gt;

&lt;h2 id=&quot;use-of-preprocessor-code&quot;&gt;Use of Preprocessor Code&lt;/h2&gt;

&lt;p&gt;Aka &lt;em&gt;Active Compilation Conditions&lt;/em&gt; (NEW!) under build settings. Yet not exactly new, since before this, we already have been adding to &lt;a href=&quot;/2019/02/26/preprocessor-codes-for-swift/&quot;&gt;Other Swift Flags&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;With that, we can write preprocessors such as &lt;code class=&quot;highlighter-rouge&quot;&gt;#if APPCLIP&lt;/code&gt;, or &lt;code class=&quot;highlighter-rouge&quot;&gt;#if ENABLE_DANCE_MONKEY_FEATURE&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We can also use &lt;code class=&quot;highlighter-rouge&quot;&gt;#if os(iOS)&lt;/code&gt; etc.&lt;/p&gt;

&lt;h2 id=&quot;playgrounds&quot;&gt;Playgrounds&lt;/h2&gt;

&lt;p&gt;Playground is a scratchpad. Nice to try out some codes, or even to explain certain concepts.&lt;/p&gt;

&lt;h2 id=&quot;tests&quot;&gt;Tests&lt;/h2&gt;

&lt;p&gt;The Fruta project did not tests. Generally, you have 2 types of tests:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Unit Testing&lt;/li&gt;
  &lt;li&gt;UI Testing&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Therefore each platform will have to create 2 test targets eg. &lt;code class=&quot;highlighter-rouge&quot;&gt;FrutaiOSUnitTests&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;FrutaiOSUITests&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;That’s a lot of tests, if you’re testing 😄&lt;/p&gt;
</description>
        <pubDate>Tue, 30 Jun 2020 15:22:35 +0800</pubDate>
        <link>https://samwize.com/2020/06/30/ideal-xcode-project-structure/</link>
        <guid isPermaLink="true">https://samwize.com/2020/06/30/ideal-xcode-project-structure/</guid>
        
        
        <category>Xcode</category>
        
      </item>
    
  </channel>
</rss>
