<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>@samwize</title>
    <description>¯\_(ツ)_/¯
</description>
    <link>http://samwize.com/</link>
    <atom:link href="http://samwize.com/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Tue, 13 Feb 2018 10:36:45 +0800</pubDate>
    <lastBuildDate>Tue, 13 Feb 2018 10:36:45 +0800</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>Guide to Creating UIViewController Without Storyboard</title>
        <description>&lt;p&gt;This is a guide on creating your custom &lt;code class=&quot;highlighter-rouge&quot;&gt;UIViewController&lt;/code&gt; with code, without any storyboard/nibs/xibs. You may also be interested in reading &lt;a href=&quot;/2017/11/01/guide-to-creating-custom-uiview/&quot;&gt;guide to creating custom &lt;code class=&quot;highlighter-rouge&quot;&gt;UIView&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;initializer&quot;&gt;Initializer&lt;/h2&gt;

&lt;p&gt;The view controller’s initializer can be bare minimal, but it must use the &lt;a href=&quot;https://developer.apple.com/documentation/uikit/uiviewcontroller/1621359-init&quot;&gt;designated initializer &lt;code class=&quot;highlighter-rouge&quot;&gt;init(nibName:bundle:)&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;nibName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As silly as it sound, you will find the documentation stating:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you subclass UIViewController, you must call the super implementation of this method, even if you aren’t using a NIB… and specify nil for both …&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Yup, that’s proof that Apple prefers storyboard, but we know what’s good for ourselves.&lt;/p&gt;

&lt;p&gt;If you use MVVM, or you require any dependency injection to the view controller, then it will look like this:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;viewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyViewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;someDependency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SomeDependency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;nibName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;viewModel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;viewModel&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;someDependency&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;someDependency&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You may setup lightweight initialization in &lt;code class=&quot;highlighter-rouge&quot;&gt;init&lt;/code&gt;, but you should never setup your views (read on where to do that later).&lt;/p&gt;

&lt;h2 id=&quot;no-need-for-initcoder&quot;&gt;No Need for &lt;code class=&quot;highlighter-rouge&quot;&gt;init(coder:)&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;init(coder:)&lt;/code&gt; is called only when you create your views from storyboard. It will never be invoked since we are going with no-storyboard so we can safely fatal out.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;required&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;coder&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;aDecoder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSCoder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;fatalError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Never will happen&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;create-your-view-in-viewdidload&quot;&gt;Create your view in &lt;code class=&quot;highlighter-rouge&quot;&gt;viewDidLoad&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Take a look at the &lt;a href=&quot;https://rdkw.wordpress.com/2013/02/24/ios-uiviewcontroller-lifecycle/&quot;&gt;life cycle diagram&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Importantly, the diagram is saying that &lt;em&gt;view will be unloaded/deallocated when memory is low&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;If your view is then asked to appear again, it needs to re-loaded.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;viewDidLoad&lt;/code&gt; is where you should create your view, or more specifically, create all your subviews in &lt;code class=&quot;highlighter-rouge&quot;&gt;self.view&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I break the creation of views into 2 stages, in 2 &lt;code class=&quot;highlighter-rouge&quot;&gt;private func&lt;/code&gt;s.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;setupViews&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;bindViews&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;setupviews&quot;&gt;1. &lt;code class=&quot;highlighter-rouge&quot;&gt;setupViews()&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Add each subview with &lt;code class=&quot;highlighter-rouge&quot;&gt;view.addSubview(someSubview)&lt;/code&gt;, then setup the layout constraints (we use &lt;a href=&quot;https://github.com/robb/Cartography&quot;&gt;Cartography&lt;/a&gt;, a autolayout helper).&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setupViews&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addSubview&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subview1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;constrain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subview1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subview1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;subview1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;edges&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;edges&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;// Similarly for subview2, subview3, ...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;subview1&lt;/code&gt; is being initialized via lazy loading.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;lazy&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;subview1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;backgroundColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;red&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This is equivalent to how you configure a view in Storyboard, but in code, and within the lazy load code block. It is the initial configuration. Afterwhich, you may of course programmatically change any of the properties.&lt;/p&gt;

&lt;h3 id=&quot;bindviews&quot;&gt;2. &lt;code class=&quot;highlighter-rouge&quot;&gt;bindViews()&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;This 2nd stage is to bind the views with the model. It sets the actual content of the views.&lt;/p&gt;

&lt;p&gt;In a very simple example, we set the transparency level &lt;code class=&quot;highlighter-rouge&quot;&gt;subview1.alpha&lt;/code&gt; with a view model.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bindViews&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;subview1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;viewModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Note that we are “binding” without using any frameworks (such as RxSwift), so this binding is one-time only. If subsequently &lt;code class=&quot;highlighter-rouge&quot;&gt;viewModel.alpha&lt;/code&gt; is changed, the function &lt;code class=&quot;highlighter-rouge&quot;&gt;bindViews()&lt;/code&gt; must be called again to update the view.&lt;/p&gt;

&lt;h2 id=&quot;the-reactive-way&quot;&gt;The Reactive Way&lt;/h2&gt;

&lt;p&gt;Contrast this with using &lt;a href=&quot;https://github.com/ReactiveX/RxSwift&quot;&gt;RxSwift&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bindViews&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;viewModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subview1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;disposed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;disposeBag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Using RxSwift, &lt;code class=&quot;highlighter-rouge&quot;&gt;viewModel.alpha&lt;/code&gt; is an observable, and whenever it observes a new value of alpha, the binding &lt;code class=&quot;highlighter-rouge&quot;&gt;subview1&lt;/code&gt; will be updated automatically.&lt;/p&gt;
</description>
        <pubDate>Wed, 31 Jan 2018 16:43:53 +0800</pubDate>
        <link>http://samwize.com/2018/01/31/guide-to-creating-uiviewcontroller-without-storyboard/</link>
        <guid isPermaLink="true">http://samwize.com/2018/01/31/guide-to-creating-uiviewcontroller-without-storyboard/</guid>
        
        
      </item>
    
      <item>
        <title>Localization - Fallback to Base Language</title>
        <description>&lt;p&gt;This post explains how iOS determines the language to use in an app, and how Apple fallback to the next-best default language when necessary.&lt;/p&gt;

&lt;p&gt;Throughout this post, we use the example where &lt;code class=&quot;highlighter-rouge&quot;&gt;en&lt;/code&gt; (English) is the developmen and base language, while &lt;code class=&quot;highlighter-rouge&quot;&gt;zh-Hans&lt;/code&gt; (Chinese) is an additional supported language.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# en Localizable.strings
&quot;awesome-title&quot; = &quot;Hello World&quot;;
&quot;another-title&quot; = &quot;Localization Rocks&quot;;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# zh-Hans Localizable.strings
&quot;awesome-title&quot; = &quot;你好&quot;;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Deliberately, the &lt;code class=&quot;highlighter-rouge&quot;&gt;zh-Hans&lt;/code&gt; strings file is 50% localized (&lt;code class=&quot;highlighter-rouge&quot;&gt;another-title&lt;/code&gt; is not translated).&lt;/p&gt;

&lt;h2 id=&quot;how-apple-determines-the-langauge&quot;&gt;How Apple determines the langauge&lt;/h2&gt;

&lt;p&gt;Apple &lt;a href=&quot;https://developer.apple.com/library/content/qa/qa1828/_index.html&quot;&gt;explains the process&lt;/a&gt;. Here is the “alogrithm” in pseudocode:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func determineTheLanguageToUse():
  for each user&#39;s preferredLanguages
    if app supports the language
      return the language
    if app supports a more generic dialect
      return the generic language

  # Exhausted preferredLanguages and still cannot determine..
  return CFBundleDevelopmentRegion
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;User’s &lt;code class=&quot;highlighter-rouge&quot;&gt;preferredLanguages&lt;/code&gt; is those listed in &lt;strong&gt;Settings App &amp;gt; General &amp;gt; Language &amp;amp; Region&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The algo starts with the most preferred language, checks if the app supports it (or a more generic dialect), before finally using &lt;code class=&quot;highlighter-rouge&quot;&gt;CFBundleDevelopmentRegion&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;There are different cases of fallback. Let’s look at them in detail.&lt;/p&gt;

&lt;h2 id=&quot;fallback-1-generic-dialect&quot;&gt;Fallback 1: Generic Dialect&lt;/h2&gt;

&lt;p&gt;In the algo, iOS will check if there is a more generic dialect for the preferred language, and if so return that.&lt;/p&gt;

&lt;p&gt;What is a &lt;strong&gt;more generic dialect&lt;/strong&gt;? &lt;code class=&quot;highlighter-rouge&quot;&gt;en&lt;/code&gt; is more generic than &lt;code class=&quot;highlighter-rouge&quot;&gt;en-GB&lt;/code&gt; (British English). In our example, if user prefers &lt;code class=&quot;highlighter-rouge&quot;&gt;en-GB&lt;/code&gt;, then &lt;code class=&quot;highlighter-rouge&quot;&gt;en&lt;/code&gt; will be used.&lt;/p&gt;

&lt;p&gt;This is because the app does NOT have &lt;code class=&quot;highlighter-rouge&quot;&gt;en-GB&lt;/code&gt;, but &lt;code class=&quot;highlighter-rouge&quot;&gt;en&lt;/code&gt; is good enough.&lt;/p&gt;

&lt;p&gt;The other way round is not true. If the app supports &lt;code class=&quot;highlighter-rouge&quot;&gt;en-GB&lt;/code&gt; (and not &lt;code class=&quot;highlighter-rouge&quot;&gt;en&lt;/code&gt;), then if user prefers &lt;code class=&quot;highlighter-rouge&quot;&gt;en&lt;/code&gt;, then &lt;code class=&quot;highlighter-rouge&quot;&gt;en-GB&lt;/code&gt; will not be the fallback – because &lt;code class=&quot;highlighter-rouge&quot;&gt;en-GB&lt;/code&gt; is &lt;em&gt;not&lt;/em&gt; more generic.&lt;/p&gt;

&lt;h2 id=&quot;fallback-2-unsupported-language&quot;&gt;Fallback 2: Unsupported Language&lt;/h2&gt;

&lt;p&gt;An unsupported language is when all &lt;code class=&quot;highlighter-rouge&quot;&gt;preferredLanguages&lt;/code&gt; is exhausted, and the app does not have a suitable language to use.&lt;/p&gt;

&lt;p&gt;For example if a user prefers &lt;code class=&quot;highlighter-rouge&quot;&gt;ms&lt;/code&gt; (Malay), but which the app does not support at all, then the language specified in &lt;code class=&quot;highlighter-rouge&quot;&gt;CFBundleDevelopmentRegion&lt;/code&gt; of the Info.plist will be used. This is aka the &lt;strong&gt;localization native development region&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This is a very common case. When we lanuch an app, we probably support only a few languages, or just one!&lt;/p&gt;

&lt;h2 id=&quot;fallback-3-unsupported-phrase&quot;&gt;Fallback 3: Unsupported Phrase&lt;/h2&gt;

&lt;p&gt;This is an obscure case, and is not mention in Apple’s documentation, nor in the alogrithm.&lt;/p&gt;

&lt;p&gt;Let’s take the example where a user prefers &lt;code class=&quot;highlighter-rouge&quot;&gt;zh-Hans&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;What happens when iOS try to get the &lt;code class=&quot;highlighter-rouge&quot;&gt;NSLocalizedString&lt;/code&gt; of “another-title”?&lt;/p&gt;

&lt;p&gt;Remember, &lt;code class=&quot;highlighter-rouge&quot;&gt;zh-Hans&lt;/code&gt; is not fully translated. It does not have “another-title”. What do you think will happen?&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Fallback to development language &lt;code class=&quot;highlighter-rouge&quot;&gt;en&lt;/code&gt; or&lt;/li&gt;
  &lt;li&gt;Return “another-title”&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Many developers think it is (1). Unfortunately, it is (2), with that ugly key name!&lt;/p&gt;

&lt;p&gt;If you refer to the &lt;code class=&quot;highlighter-rouge&quot;&gt;determineTheLanguageToUse&lt;/code&gt; algo, the language to use is still &lt;code class=&quot;highlighter-rouge&quot;&gt;zh-Hans&lt;/code&gt;, regardless that it is incomplete. It can’t find “another-title”, so it just return the key as value..&lt;/p&gt;

&lt;p&gt;iOS should really improve on this fallback behaviour.. for now, we need some custom code.&lt;/p&gt;

&lt;h2 id=&quot;the-fallback-code&quot;&gt;The Fallback Code&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;LS&lt;/code&gt; is a global function to replace &lt;code class=&quot;highlighter-rouge&quot;&gt;NSLocalizedString&lt;/code&gt;. It is a shorthand, with added fallback capability:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;LS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSLocalizedString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;comment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSLocale&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;preferredLanguages&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;en&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Fall back to en&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bundle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;forResource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ofType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;lproj&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bundle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSLocalizedString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;comment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;When a phrase is not yet translated, it will be &lt;code class=&quot;highlighter-rouge&quot;&gt;value == key&lt;/code&gt;, which is dumb, so we fall back to using &lt;code class=&quot;highlighter-rouge&quot;&gt;en&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The rest of the code is simply geting &lt;code class=&quot;highlighter-rouge&quot;&gt;NSLocalizedString&lt;/code&gt; from the en bundle.&lt;/p&gt;

&lt;h2 id=&quot;more-resourses&quot;&gt;More Resourses&lt;/h2&gt;

&lt;p&gt;Apple’s &lt;a href=&quot;https://developer.apple.com/library/content/technotes/tn2418/_index.html&quot;&gt;Technical Note on language identifiers&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 23 Jan 2018 15:49:41 +0800</pubDate>
        <link>http://samwize.com/2018/01/23/localization-fall-back-to-base-language/</link>
        <guid isPermaLink="true">http://samwize.com/2018/01/23/localization-fall-back-to-base-language/</guid>
        
        
        <category>Localization</category>
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>UI Testing With BrowserStack Cloud Devices</title>
        <description>&lt;p&gt;This guide is on using BrowserStack to run UI Tests on cloud devices.&lt;/p&gt;

&lt;p&gt;I don’t recommend using BrowserStack, unless you need:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;UI Testing with cloud devices&lt;/li&gt;
  &lt;li&gt;Want the same stack for testing across all platforms (Android, iOS, Web)&lt;/li&gt;
  &lt;li&gt;Probably a dedicated QA engineer&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;if-you-are-an-indie&quot;&gt;If you are an indie..&lt;/h2&gt;

&lt;p&gt;If you don’t need all of the above, and is just an indie, focusing on iOS, then keep it simple.&lt;/p&gt;

&lt;p&gt;For UI Testing, use &lt;code class=&quot;highlighter-rouge&quot;&gt;XCUITest&lt;/code&gt; framework and add test cases to the project in Xcode. Make use of the UI recorder.&lt;/p&gt;

&lt;p&gt;Run on as many simulators.&lt;/p&gt;

&lt;p&gt;Integrate to your CI tool eg. travis.&lt;/p&gt;

&lt;h2 id=&quot;ok-so-you-want-browserstack&quot;&gt;Ok, so you want BrowserStack..&lt;/h2&gt;

&lt;p&gt;But if you are still here, ok, I have &lt;em&gt;some guide&lt;/em&gt; for you, because the ecosystem is just too complicated. Many things are never explained.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.browserstack.com/app-automate/appium-webdriverio#integration-with-browserstack&quot;&gt;BrowserStack documentation&lt;/a&gt; is terrible. They will guide you on how to set up with Appium, that’s all.&lt;/p&gt;

&lt;p&gt;BrowserStack main contribution is their cloud devices, aka the &lt;a href=&quot;https://www.browserstack.com/app-automate/capabilities&quot;&gt;capabilities&lt;/a&gt; you can use.&lt;/p&gt;

&lt;h2 id=&quot;its-all-about-appium&quot;&gt;It’s all about Appium&lt;/h2&gt;

&lt;p&gt;You need to &lt;a href=&quot;http://appium.io/docs/en/about-appium/intro/?lang=en&quot;&gt;understand Appium&lt;/a&gt;, know the goals, and how they achieve it.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You test on the same compiled app you ship to App Store&lt;/li&gt;
  &lt;li&gt;Appium use vendor supplied framework eg XCUITest under the hood&lt;/li&gt;
  &lt;li&gt;WebDriver API wraps the hood, providing a REST + JSON API to drive the tests&lt;/li&gt;
  &lt;li&gt;WebDriver is the same protocol as Selenium&lt;/li&gt;
  &lt;li&gt;Extend WebDriver for mobile automation&lt;/li&gt;
  &lt;li&gt;Appium is open source&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Appium has a &lt;strong&gt;server-client architecture&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;BrowserStack simply runs the server part.&lt;/p&gt;

&lt;h2 id=&quot;webdriverio-as-client&quot;&gt;WebDriver.io as client&lt;/h2&gt;

&lt;p&gt;You need to use a client and write the tests, and WebDriver.io is one such client. There are &lt;a href=&quot;https://github.com/webdriverio/webdriverio/issues/138&quot;&gt;others&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let’s look at the JS code that uses webdriver.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;should show do something&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;browser&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;waitForVisible&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;//XCUIElementTypeOther[@name=&quot;container-foo&quot;]/XCUIElementTypeCollectionView/XCUIElementTypeCell[1]/&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;visible&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;visible&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;be&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;~some-accessibility-id&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Each of the API called from &lt;code class=&quot;highlighter-rouge&quot;&gt;browser&lt;/code&gt; is &lt;a href=&quot;http://webdriver.io/api.html&quot;&gt;WebDriver’s API&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;selector&quot;&gt;Selector&lt;/h2&gt;

&lt;p&gt;In the code, we illustrated 2 ways you can refer to UI elements.&lt;/p&gt;

&lt;p&gt;Using &lt;strong&gt;accessibility identifer&lt;/strong&gt; such as &lt;code class=&quot;highlighter-rouge&quot;&gt;~some-accessibility-id&lt;/code&gt; is the preferred way.&lt;/p&gt;

&lt;p&gt;Because &lt;strong&gt;Xpath&lt;/strong&gt; is not stable on Appium!&lt;/p&gt;

&lt;p&gt;Note: Don’t use the &lt;a href=&quot;https://github.com/appium/appium/blob/master/docs/en/advanced-concepts/migrating-to-xcuitest.md&quot;&gt;old UIAutomation framework selector&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;appium-inspector&quot;&gt;Appium Inspector&lt;/h2&gt;

&lt;p&gt;You can easily find the Xpath by using the &lt;a href=&quot;https://github.com/appium/appium-desktop&quot;&gt;Appium Desktop Inspector app&lt;/a&gt;.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Start Server&lt;/li&gt;
  &lt;li&gt;Start Inspector Session&lt;/li&gt;
  &lt;li&gt;Create and save a capability&lt;/li&gt;
  &lt;li&gt;One of the capability you must add is &lt;code class=&quot;highlighter-rouge&quot;&gt;app&lt;/code&gt; which points to your IPA file eg &lt;code class=&quot;highlighter-rouge&quot;&gt;/Users/junda/Library/Developer/Xcode/DerivedData/MyApp-avrefqcpyqccstgkxgaottezlrvt/Build/Products/Debug-iphonesimulator/MyAPp.app&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Start Session&lt;/li&gt;
  &lt;li&gt;Xcode simulator will run and you can inspect!&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Tue, 09 Jan 2018 16:53:56 +0800</pubDate>
        <link>http://samwize.com/2018/01/09/ui-testing-with-browserstack-cloud-devices/</link>
        <guid isPermaLink="true">http://samwize.com/2018/01/09/ui-testing-with-browserstack-cloud-devices/</guid>
        
        
        <category>Testing</category>
        
      </item>
    
      <item>
        <title>Developer Guide to Support iPhone X</title>
        <description>&lt;p&gt;iPhone X introduced The Notch, The Home Indicator, Safe Area, and a different resolution form factor..&lt;/p&gt;

&lt;p&gt;UI design is much affected.&lt;/p&gt;

&lt;p&gt;This post is a guide walking through various aspect and how it affects development.&lt;/p&gt;

&lt;p&gt;Let’s start with the biggest change in the phone.&lt;/p&gt;

&lt;h2 id=&quot;the-notch&quot;&gt;The Notch&lt;/h2&gt;

&lt;p&gt;I like &lt;a href=&quot;http://blog.maxrudberg.com/post/166045445103/ui-design-for-iphone-x-top-elements-and-the-notch&quot;&gt;maxrudberg’s mentality&lt;/a&gt; towards The Notch:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Eventually, they will get rid of the notch. It could be 2, 5, or even 10 years, but it’s a stop gap, not a permanent design solution. In the meantime, treat it like the elephant in the room. We all know it’s there, but for the most part, you should design as if it’s not.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Apple’s Music app and etc uses Card style, and that is against their guideline towards the top notch space.&lt;/p&gt;

&lt;p&gt;So, don’t always follow guidelines.&lt;/p&gt;

&lt;h2 id=&quot;the-home-indicator&quot;&gt;The Home Indicator&lt;/h2&gt;

&lt;p&gt;Unlike The Notch, the home indicator is a software element. It is a UI on the screen, at the bottom.&lt;/p&gt;

&lt;p&gt;To allow auto hide (after user not touching screen) for a view controller:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;prefersHomeIndicatorAutoHidden&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;But &lt;a href=&quot;https://medium.com/the-traveled-ios-developers-guide/iphone-x-dealing-with-home-indicator-2e8e47f5647f&quot;&gt;note&lt;/a&gt; the comment in the doc:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The system takes your preference into account, but returning YES is not a guarantee that an indicator will be hidden.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;nav-bar&quot;&gt;Nav bar&lt;/h2&gt;

&lt;p&gt;iOS automatically fills a nav bar background for the extra space at the top.&lt;/p&gt;

&lt;p&gt;Use &lt;strong&gt;black&lt;/strong&gt; and it blends with the Notch.&lt;/p&gt;

&lt;p&gt;Use &lt;strong&gt;transparent&lt;/strong&gt; and extend your content view beyond.&lt;/p&gt;

&lt;h2 id=&quot;status-bar-when-you-have-nav-bar&quot;&gt;Status Bar when you have Nav Bar&lt;/h2&gt;

&lt;p&gt;There is an &lt;a href=&quot;https://forums.developer.apple.com/thread/88962&quot;&gt;undocumented behaviour&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you want to hide the status bar on iPhone X, you should also hide the navigation bar, otherwise you should leave both visible. This is the behavior that UINavigationController implements.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you implemented &lt;a href=&quot;https://developer.apple.com/documentation/uikit/uiviewcontroller/1621440-prefersstatusbarhidden&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;prefersStatusBarHidden&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://developer.apple.com/documentation/uikit/uiviewcontroller/1621451-childviewcontrollerforstatusbarh&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;childViewControllerForStatusBarHidden&lt;/code&gt;&lt;/a&gt;, they will NOT work as intended, if you have the navigation bar shown.&lt;/p&gt;

&lt;p&gt;Status bar will always be shown, if navigation bar is shown.&lt;/p&gt;

&lt;p&gt;You may only &lt;strong&gt;control the color&lt;/strong&gt; of the status bar.&lt;/p&gt;

&lt;p&gt;&lt;del&gt;This &lt;a href=&quot;http://stackoverflow.com/a/19513714/242682&quot;&gt;method is weird&lt;/a&gt;, but yes it works.&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;This &lt;a href=&quot;https://stackoverflow.com/a/42301499/242682&quot;&gt;extension&lt;/a&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;UINavigationController&lt;/code&gt; is the cleanest solution (another alternative is subclass it).&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UINavigationController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;childViewControllerForStatusBarStyle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;topViewController&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;table-view&quot;&gt;Table View&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UITableView&lt;/code&gt; should still layout edge to edge (NOT to safe area).&lt;/p&gt;

&lt;p&gt;Instead, the &lt;strong&gt;content inset&lt;/strong&gt; should be mark safe via &lt;a href=&quot;https://developer.apple.com/documentation/uikit/uitableview/2921665-insetscontentviewstosafearea&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;insetsContentViewsToSafeArea&lt;/code&gt;&lt;/a&gt; (new in iOS 11).&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;#available(iOS 11.0, *)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insetsContentViewsToSafeArea&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;scroll-view&quot;&gt;Scroll View&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/documentation/uikit/uiscrollview/2902261-contentinsetadjustmentbehavior&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;contentInsetAdjustmentBehavior&lt;/code&gt;&lt;/a&gt; provides more control on how safe area modifies the content inset.&lt;/p&gt;

&lt;h2 id=&quot;search-controller&quot;&gt;Search Controller&lt;/h2&gt;

&lt;p&gt;iOS seems to be not adjusting correctly for search controller. Fixed with:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contentInsetAdjustmentBehavior&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;never&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;/2016/11/27/uisearchcontroller-development-guide/&quot;&gt;Search controller&lt;/a&gt; is a difficult topic, and with iPhone X the recommended way is to set the search bar in the nav bar.&lt;/p&gt;

&lt;h2 id=&quot;storyboard&quot;&gt;Storyboard&lt;/h2&gt;

&lt;p&gt;If you use storyboard, in File Inspector, check &lt;strong&gt;Use Safe Area Layout Guides&lt;/strong&gt;, and interface builder will replace the old top bottom layout guides with the new safe area.&lt;/p&gt;

&lt;p&gt;After which, it is up to you to make changes depending on your UI.&lt;/p&gt;

&lt;p&gt;Some pointers:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;For table view, don’t &lt;strong&gt;Clip to Bounds&lt;/strong&gt; (under Attributes Inspector)&lt;/li&gt;
  &lt;li&gt;For cutom bottom tool bar, you can provide a background for the void occupied by Home Indicator&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are more guides. &lt;a href=&quot;https://developer.apple.com/ios/update-apps-for-iphone-x/&quot;&gt;Apple official guide&lt;/a&gt;, and &lt;a href=&quot;https://useyourloaf.com/blog/supporting-iphone-x/&quot;&gt;many&lt;/a&gt; &lt;a href=&quot;https://medium.com/rosberryapps/ios-safe-area-ca10e919526f&quot;&gt;more&lt;/a&gt;. &lt;a href=&quot;https://designcode.io/ios11-iphone-x&quot;&gt;Designcode.io&lt;/a&gt; summed up well, with many valuable resources for design. &lt;a href=&quot;https://iosdesignkit.io/ios-11-gui/&quot;&gt;Sketch file&lt;/a&gt; &amp;amp; &lt;a href=&quot;http://v1.designcode.io/angle&quot;&gt;device mockups&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Thu, 21 Dec 2017 11:49:22 +0800</pubDate>
        <link>http://samwize.com/2017/12/21/developer-guide-to-support-iphone-x/</link>
        <guid isPermaLink="true">http://samwize.com/2017/12/21/developer-guide-to-support-iphone-x/</guid>
        
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>Guide to Universal Links</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/library/content/documentation/General/Conceptual/AppSearch/UniversalLinks.html&quot;&gt;Universal links&lt;/a&gt; are HTTP links that open your app, instead of the website in Safari.&lt;/p&gt;

&lt;p&gt;The old way is called deeplink – where every app register it’s own schema eg. &lt;code class=&quot;highlighter-rouge&quot;&gt;myapp://&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Universal links bring closer synergy between web and app with the familiar &lt;code class=&quot;highlighter-rouge&quot;&gt;https://&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;step-1-apple-app-site-association-json-file&quot;&gt;Step 1. apple-app-site-association JSON file&lt;/h2&gt;

&lt;p&gt;This &lt;strong&gt;association file&lt;/strong&gt; (AASA) is to establish the trust between your domain/server/website with your app.&lt;/p&gt;

&lt;p&gt;Among the 3 steps, this step is the most complicated.&lt;/p&gt;

&lt;p&gt;Let’s use an example of a &lt;code class=&quot;highlighter-rouge&quot;&gt;apple-app-site-association&lt;/code&gt; file (note, there is no file extension):&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;applinks&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;apps&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;details&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;appID&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;9JA89QQLNQ.com.apple.wwdc&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;paths&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/wwdc/news/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;NOT /videos/wwdc/2010/*&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/videos/wwdc/201?/*&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;appID&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ABCD1234.com.apple.messaging&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;paths&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;*&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;details&lt;/code&gt; array is a list, with implicit priority in matching the paths.&lt;/p&gt;

&lt;p&gt;You can support multiple apps as each detail has it’s own &lt;code class=&quot;highlighter-rouge&quot;&gt;appID&lt;/code&gt;. The &lt;code class=&quot;highlighter-rouge&quot;&gt;appID&lt;/code&gt; is made up of the team ID and the bundle ID.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;paths&lt;/code&gt; is a list of paths and:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You can exclude paths by using &lt;code class=&quot;highlighter-rouge&quot;&gt;NOT&lt;/code&gt; prefix&lt;/li&gt;
  &lt;li&gt;The system evaluate each path in order&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;step-15-optional-sign-it-or-not&quot;&gt;Step 1.5 (Optional) Sign it or not&lt;/h2&gt;

&lt;p&gt;If you only need universal link, this is optional.&lt;/p&gt;

&lt;p&gt;But if you want to support &lt;a href=&quot;https://developer.apple.com/documentation/security/shared_web_credentials&quot;&gt;Shared Web Credentials&lt;/a&gt; and Handsoff, then you must sign the AASA file.&lt;/p&gt;

&lt;h2 id=&quot;step-2-upload-to-server&quot;&gt;Step 2. Upload to server&lt;/h2&gt;

&lt;p&gt;You must make the AASA file crawlable by Apple bot, and can either place in:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;https://mydomain.com/apple-app-site-association&lt;/li&gt;
  &lt;li&gt;https://mydomain.com/.well-known/apple-app-site-association&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The following is important, yet it is not stated in the Apple’s guide (but you can find in the &lt;a href=&quot;https://developer.apple.com/library/content/qa/qa1916/_index.html&quot;&gt;troubleshooting FAQ&lt;/a&gt;):&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The AASA file must NOT be served through a 3xx redirect. Make sure this file is served without any redirects.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And via HTTPS/SSL. And HTTP Content-type must be &lt;code class=&quot;highlighter-rouge&quot;&gt;application/json&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;del&gt;&lt;a href=&quot;https://search.developer.apple.com/appsearch-validation-tool&quot;&gt;Validate with Apple Bot&lt;/a&gt;, and &lt;strong&gt;Link to Application&lt;/strong&gt; should pass.&lt;/del&gt; Apple’s tool is unreliable, so instead use &lt;a href=&quot;http://branch.io/resources/aasa-validator/&quot;&gt;Branch.io’s tool&lt;/a&gt;,or &lt;a href=&quot;https://limitless-sierra-4673.herokuapp.com&quot;&gt;this heroku app&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;step-3-add-entitlement-in-app&quot;&gt;Step 3. Add entitlement in app&lt;/h2&gt;

&lt;p&gt;Go to your target &amp;gt; Capabilities &amp;gt; Associated Domains, and include the domains that your app wants to handle.&lt;/p&gt;

&lt;p&gt;You MUST prefix with &lt;code class=&quot;highlighter-rouge&quot;&gt;applinks:&lt;/code&gt; eg. &lt;code class=&quot;highlighter-rouge&quot;&gt;applinks:mydomain.com&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The system uses the longest substring matching.&lt;/p&gt;

&lt;p&gt;When matched, it will trigger an NSUserActivity in your app delegate.&lt;/p&gt;

&lt;h2 id=&quot;step-4-handle-nsuseractivity&quot;&gt;Step 4. Handle NSUserActivity&lt;/h2&gt;

&lt;p&gt;Implement &lt;a href=&quot;https://developer.apple.com/documentation/uikit/uiapplicationdelegate/1623072-application&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;application:continueUserActivity:restorationHandler:&lt;/code&gt;&lt;/a&gt; in your app delegate.&lt;/p&gt;

&lt;p&gt;The same handler is used for Handsoff or Spotlight search. So how do you differentiate it is handling for tapping universal links? Look at &lt;code class=&quot;highlighter-rouge&quot;&gt;activityType&lt;/code&gt; of &lt;a href=&quot;https://developer.apple.com/documentation/foundation/nsuseractivity&quot;&gt;NSUserActivity&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;userActivity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSUserActivity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;restorationHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;@escaping&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]?)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userActivity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;activityType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;  &lt;span class=&quot;kt&quot;&gt;NSUserActivityTypeBrowsingWeb&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// Handle universal link&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userActivity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;webpageURL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// Handle it..&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userActivity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;activityType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CSSearchableItemActionType&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// Handle spotlight search&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;step-5-test-it&quot;&gt;Step 5. Test it&lt;/h2&gt;

&lt;p&gt;Your integration test flow:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Uninstall your app&lt;/li&gt;
  &lt;li&gt;Install from Xcode (or TestFlight)&lt;/li&gt;
  &lt;li&gt;Test a universal link in eg Email, Notes&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It seems like when you install your app during development, or beta from TestFlight, Apple bot will crawl the AASA file. That’s the trigger. That’s how you test universal links during development.&lt;/p&gt;

&lt;h2 id=&quot;when-will-it-open-app&quot;&gt;When will it open app?&lt;/h2&gt;

&lt;p&gt;If you reach here, then your app should be working with universal links.&lt;/p&gt;

&lt;p&gt;But there are many pitfalls with universal links.&lt;/p&gt;

&lt;p&gt;Sometimes, it doesn’t open as expected. Here is why it does NOT open your app:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;In Safari, if user enter the domain in URL search bar&lt;/li&gt;
  &lt;li&gt;In Safari, clicking on the same domain&lt;/li&gt;
  &lt;li&gt;When your app is opened, but user tap on the top left breadcrumb that “Opens Safari”&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;more-on-the-breadcrumb&quot;&gt;More on the breadcrumb&lt;/h2&gt;

&lt;p&gt;iOS remembers the choice the user made when opening the universal link the first time.&lt;/p&gt;

&lt;p&gt;Users could tap on the top left breadcrumb in status bar that says “Back to Safari”, and iOS will remember that the user does NOT want to open that in app!&lt;/p&gt;

&lt;p&gt;Afterwhich, iOS continues to open your website in Safari until the user chooses to open your app &lt;strong&gt;by tapping OPEN in the Smart App Banner&lt;/strong&gt; on the webpage. See these &lt;a href=&quot;https://stackoverflow.com/a/39694208/242682&quot;&gt;screenshots&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;a-big-tip&quot;&gt;A BIG Tip&lt;/h2&gt;

&lt;p&gt;Another way is &lt;strong&gt;long pressing a link&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This will provide 2 options in a alert:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Open in Safari&lt;/li&gt;
  &lt;li&gt;Open in “Your App”&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you see (2), you know your universal link integration worked.&lt;/p&gt;

&lt;p&gt;And now, whichever option the user chooses, iOS will remember it as The Choice.&lt;/p&gt;

&lt;h2 id=&quot;wkwebviewuiwebview&quot;&gt;WKWebView/UIWebView&lt;/h2&gt;

&lt;p&gt;We know universal links when tapped in Safari or Messages or etc will open the app (if possible).&lt;/p&gt;

&lt;p&gt;What about in web views in other apps?&lt;/p&gt;

&lt;p&gt;Quoting my previous &lt;a href=&quot;http://samwize.com/2016/06/08/complete-guide-to-implementing-wkwebview/&quot;&gt;guide in WKWebView&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;As noted in Apple Doc, iOS 9 users can tap on universal links in WKWebView, and it will open the app. It is the same for UIWebView and SFSafariViewController.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;However, recently there seems to be a &lt;a href=&quot;https://stackoverflow.com/a/44942814/242682&quot;&gt;hack&lt;/a&gt; to NOT open the app. Use it to your advantage.&lt;/p&gt;

&lt;h2 id=&quot;troubleshooting&quot;&gt;Troubleshooting&lt;/h2&gt;

&lt;p&gt;It could be frustrating to troubleshoot, so here is a list &lt;a href=&quot;http://building.usebutton.com/debugging/ios/deep-linking/links/universal-links/2016/03/31/debugging-universal-links/&quot;&gt;things to debug&lt;/a&gt;, more on the &lt;a href=&quot;https://sailthru.zendesk.com/hc/en-us/articles/217102466-Universal-Links-Troubleshooting-and-FAQ&quot;&gt;paths in AASA&lt;/a&gt;, the previously mentioned non-Apple &lt;a href=&quot;https://limitless-sierra-4673.herokuapp.com&quot;&gt;AASA validation tool&lt;/a&gt;, and good to know that it seems like the AASA file is fetched on the device everytime the app is &lt;a href=&quot;https://stackoverflow.com/a/35616335/242682&quot;&gt;installed/updated&lt;/a&gt;, and then cached.&lt;/p&gt;

&lt;p&gt;If still didn’t work, at least know there are others who &lt;a href=&quot;https://medium.com/mobile-growth/the-things-i-hate-and-you-should-know-about-apple-universal-links-5beb15f88a29&quot;&gt;hate&lt;/a&gt; it too.&lt;/p&gt;

&lt;p&gt;Try restarting your device too. It did happen to me once during development where it just won’t fetch from any of the applinks domain, until I restart my phone.&lt;/p&gt;
</description>
        <pubDate>Fri, 10 Nov 2017 11:32:18 +0800</pubDate>
        <link>http://samwize.com/2017/11/10/guide-to-universal-links/</link>
        <guid isPermaLink="true">http://samwize.com/2017/11/10/guide-to-universal-links/</guid>
        
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>Guide to Creating Custom UIView</title>
        <description>&lt;p&gt;This is a guide to creating custom &lt;code class=&quot;highlighter-rouge&quot;&gt;UIView&lt;/code&gt; using Auto Layout, without Nib/Storyboard, and in Swift 4.&lt;/p&gt;

&lt;h2 id=&quot;why-custom-uiview&quot;&gt;Why custom UIView?&lt;/h2&gt;

&lt;p&gt;We create custom view when the controls from UIKit is not sufficient to do your job.&lt;/p&gt;

&lt;p&gt;Custom view will be composed of other views, with certain custom behaviours.&lt;/p&gt;

&lt;p&gt;There are often times when you construct your storyboard or init your view controller with multiple views, but they could – alternatively – be accomplished with a custom view.&lt;/p&gt;

&lt;h2 id=&quot;about-initializers&quot;&gt;About Initializers&lt;/h2&gt;

&lt;p&gt;It is important to learn the fundamental about &lt;a href=&quot;https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Initialization.html&quot;&gt;Swift initialization&lt;/a&gt;. It is a complex and lengthy topic, but will be useful in understanding because our custom view subclass &lt;code class=&quot;highlighter-rouge&quot;&gt;UIView&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;designated-initializer&quot;&gt;Designated initializer&lt;/h3&gt;

&lt;p&gt;You specify a designated initializer by &lt;em&gt;not&lt;/em&gt; specifying &lt;code class=&quot;highlighter-rouge&quot;&gt;convenience&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Subclass MUST call it’s superclass designated initializer – not difficult to reason because without so, the superclass would not be completely initialized.&lt;/p&gt;

&lt;h3 id=&quot;convenience-initializer&quot;&gt;Convenience initializer&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;convenience&lt;/code&gt; is secondary/optional, and is simply shortcut to calling designated initializer.&lt;/p&gt;

&lt;h3 id=&quot;required-init&quot;&gt;Required init&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;required&lt;/code&gt; specify that subclasses must implement the initialization. &lt;code class=&quot;highlighter-rouge&quot;&gt;UIView&lt;/code&gt; has such an init because it conforms to &lt;a href=&quot;https://developer.apple.com/documentation/foundation/nscoding&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NSCoding&lt;/code&gt;&lt;/a&gt;, a protocol for the view to be encoded and decoded for archiving.&lt;/p&gt;

&lt;p&gt;Our custom view has to implement (it is an override, but without the override modifier), and decode to init the view.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;required&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;coder&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;aDecoder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSCoder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;coder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aDecoder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Custom decoding..&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;But, you probably will not have any custom decoding, because archiving a view is a bad idea (instead you should archive the model).&lt;/p&gt;

&lt;p&gt;The corresponding func is &lt;a href=&quot;https://developer.apple.com/documentation/foundation/nscoding/1413933-encode&quot;&gt;encoding&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;our-custom-view-initializers&quot;&gt;Our custom view initializers&lt;/h2&gt;

&lt;p&gt;With the basics of initializers explained, a custom view will usually need a few inits like this:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AppIconView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIView&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;// #1&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;required&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;coder&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;aDecoder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSCoder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;coder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aDecoder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;setupView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// #2&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGRect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;setupView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;    
    
    &lt;span class=&quot;c1&quot;&gt;// #3&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;convenience&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zero&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;setupView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setupView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;translatesAutoresizingMaskIntoConstraints&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
        
        &lt;span class=&quot;c1&quot;&gt;// Create, add and layout the children views ..&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;There are 3 inits and here is why:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Because &lt;code class=&quot;highlighter-rouge&quot;&gt;UIView&lt;/code&gt; &lt;strong&gt;required&lt;/strong&gt; it&lt;/li&gt;
  &lt;li&gt;Because #3 will need to call a designated initializer (we choose #2 over #1)&lt;/li&gt;
  &lt;li&gt;Our own initializer with the data for the view&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In each of the init, we will call &lt;code class=&quot;highlighter-rouge&quot;&gt;setupView()&lt;/code&gt; – which is the one place where we will layout the custom view.&lt;/p&gt;

&lt;h3 id=&quot;translatesautoresizingmaskintoconstraints&quot;&gt;translatesAutoresizingMaskIntoConstraints&lt;/h3&gt;

&lt;p&gt;Every view that uses auto layout should set &lt;code class=&quot;highlighter-rouge&quot;&gt;translatesAutoresizingMaskIntoConstraints&lt;/code&gt; to false. That is the very first thing to do in &lt;code class=&quot;highlighter-rouge&quot;&gt;setupView()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This is because in days before we have Auto Layout, there is the concept of auto resizing. Via &lt;code class=&quot;highlighter-rouge&quot;&gt;autoresizingMask&lt;/code&gt;, a view will auto resize, similar to auto layout.&lt;/p&gt;

&lt;p&gt;But we don’t use auto resize anymore, now that we have auto layout.&lt;/p&gt;

&lt;h3 id=&quot;intrinsic-content-size&quot;&gt;Intrinsic Content Size&lt;/h3&gt;

&lt;p&gt;The &lt;strong&gt;natural size&lt;/strong&gt; for it’s content eg. &lt;code class=&quot;highlighter-rouge&quot;&gt;UILabel&lt;/code&gt; intrinsic size is the length of the text.&lt;/p&gt;

&lt;p&gt;Apple’s &lt;a href=&quot;https://developer.apple.com/library/content/documentation/UserExperience/Conceptual/AutolayoutPG/AnatomyofaConstraint.html#//apple_ref/doc/uid/TP40010853-CH9-SW21&quot;&gt;auto layout guide&lt;/a&gt; has a section on it, and a &lt;a href=&quot;https://developer.apple.com/library/content/documentation/UserExperience/Conceptual/AutolayoutPG/ViewswithIntrinsicContentSize.html&quot;&gt;cook book&lt;/a&gt; of common scenarios.&lt;/p&gt;

&lt;p&gt;How does it work?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;It generates a pair of constraints for each dimension (width &amp;amp; height). The pair constrain the compression resistance (priority 750) and content hugging (priority 250).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Intrinsic content size simplifies auto layout, reducing number of constraints needed, because those constraints are added for you. You only need to manage the priority.&lt;/p&gt;

&lt;p&gt;It is a helper, and you ought to understand that it adds constraints for you.&lt;/p&gt;

&lt;p&gt;Let’s say we want our custom view to have a fixed height, but varying width, we can override the &lt;code class=&quot;highlighter-rouge&quot;&gt;intrinsicContentSize&lt;/code&gt; like this.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;intrinsicContentSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGSize&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Your calculated or fixed height&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIViewNoIntrinsicMetric&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As a rule of thumb: &lt;strong&gt;custom view should never create constraint for it’s own width and height&lt;/strong&gt; (obviously also not for it’s postion x &amp;amp; y).&lt;/p&gt;

&lt;p&gt;But sometimes you want to &lt;em&gt;conveniently constraint your size&lt;/em&gt;. This is where intrinsic content size comes in.&lt;/p&gt;

&lt;h3 id=&quot;fitting-size&quot;&gt;Fitting Size&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Intrinsic size is an input&lt;/strong&gt; to Auto Layout engine (which in turn generates/output constraints about it’s size).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fitting size is an output&lt;/strong&gt; from Auto Layout engine.&lt;/p&gt;

&lt;p&gt;Fitting size is the size calculated to fit the content.&lt;/p&gt;

&lt;p&gt;Use &lt;a href=&quot;https://developer.apple.com/documentation/uikit/uiview/1622624-systemlayoutsizefitting&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;systemLayoutSizeFitting(_:)&lt;/code&gt;&lt;/a&gt;. The parameter &lt;code class=&quot;highlighter-rouge&quot;&gt;targetSize&lt;/code&gt; is the smallest or largest size that meets the constraint.&lt;/p&gt;

&lt;p&gt;Eg. To know the smallest possible size of our content view, call &lt;code class=&quot;highlighter-rouge&quot;&gt;appView.systemLayoutSizeFitting(UILayoutFittingCompressedSize)&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;the-thing-with-uistackview&quot;&gt;The thing with UIStackView&lt;/h3&gt;

&lt;p&gt;It is easily misled to think stack view has intrinsic size. Using a stack view, it seems the width and height constraints are not required.&lt;/p&gt;

&lt;p&gt;But NO, stack view intrinsic size is always &lt;code class=&quot;highlighter-rouge&quot;&gt;UIViewNoIntrinsicMetric&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;What really happened is that Auto Layout engine calculate the fitting size (an output) for the stack.&lt;/p&gt;

&lt;p&gt;So how do you get the fitting size?&lt;/p&gt;

&lt;p&gt;Simply &lt;code class=&quot;highlighter-rouge&quot;&gt;stack.systemLayoutSizeFitting(UILayoutFittingCompressedSize)&lt;/code&gt;.&lt;/p&gt;
</description>
        <pubDate>Wed, 01 Nov 2017 10:42:21 +0800</pubDate>
        <link>http://samwize.com/2017/11/01/guide-to-creating-custom-uiview/</link>
        <guid isPermaLink="true">http://samwize.com/2017/11/01/guide-to-creating-custom-uiview/</guid>
        
        
        <category>UI</category>
        
      </item>
    
      <item>
        <title>Adding Playground to an Existing Project</title>
        <description>&lt;p&gt;Playground is a very useful tool, especially for building UI, as you can preview them almost right away, saving many hours building and running on simulator.&lt;/p&gt;

&lt;p&gt;New in Xcode 9, we can now &lt;a href=&quot;http://help.apple.com/xcode/mac/9.0/#/devc9b33111c&quot;&gt;add custom framework to Playground&lt;/a&gt;, therefore providing a quick way to integrate with existing project.&lt;/p&gt;

&lt;p&gt;This post will show how to add Playground to an existing project, using Cocoapods along in it, and interacting with UI controls for instant feedback.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/xcode-playground-ui-live.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;open-your-project-workspace&quot;&gt;1. Open your project workspace&lt;/h2&gt;

&lt;p&gt;I am assuming you are already using workspace.&lt;/p&gt;

&lt;p&gt;But if you are not, open the .xcodeproj and File &amp;gt; Save As Workspace.&lt;/p&gt;

&lt;h2 id=&quot;add-new-target&quot;&gt;2. Add new target&lt;/h2&gt;

&lt;p&gt;Select &lt;strong&gt;File &amp;gt; New &amp;gt; Target &amp;gt; Cocoa Touch Framework&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/xcode-template-ios-cocoa-touch-framework.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s name the target “MyUIFramework”.&lt;/p&gt;

&lt;p&gt;This target builds the framework, which provides code available to use in Playground.&lt;/p&gt;

&lt;h2 id=&quot;add-files-to-target&quot;&gt;3. Add files to target&lt;/h2&gt;

&lt;p&gt;Add a new Swift file, making sure it is available to the target.&lt;/p&gt;

&lt;p&gt;In File Inspector, make sure the target “MyUIFramework” is checked.&lt;/p&gt;

&lt;p&gt;You can also add existing files to the framework, exposing them to Playground later.&lt;/p&gt;

&lt;h2 id=&quot;build-the-framework&quot;&gt;4. Build the framework&lt;/h2&gt;

&lt;p&gt;Select the Scheme and Build.&lt;/p&gt;

&lt;p&gt;You must manually build each time you made changes to the framework.&lt;/p&gt;

&lt;h2 id=&quot;add-playground&quot;&gt;5. Add Playground&lt;/h2&gt;

&lt;p&gt;In the workspace, &lt;strong&gt;File &amp;gt; New &amp;gt; Playground &amp;gt; Single View&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In the Playground page, we can import the framwork, and set up a live view.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PlaygroundSupport&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIKit&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyUIFramework&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyViewController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIViewController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;loadView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;backgroundColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;red&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Add subviews ...&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;PlaygroundPage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;liveView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You create your views in &lt;code class=&quot;highlighter-rouge&quot;&gt;loadView&lt;/code&gt;, and see them in Live View (select Show Assistant Editor).&lt;/p&gt;

&lt;p&gt;Just like Playground, code changes will be reflected &lt;em&gt;almost&lt;/em&gt; right away.&lt;/p&gt;

&lt;h2 id=&quot;using-cocoapods&quot;&gt;6. Using Cocoapods&lt;/h2&gt;

&lt;p&gt;You cannot import a Cocoapods module in playground, yet.&lt;/p&gt;

&lt;p&gt;If the Swift file requires the use of Cocoapods, you have to make it available to the target as specified in Podfile.&lt;/p&gt;

&lt;p&gt;We make &lt;a href=&quot;https://github.com/robb/Cartography&quot;&gt;Cartography&lt;/a&gt;, an awesome library for constructing autolayout, for the framework:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;MyUIFramework&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pod&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Cartography&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;~&amp;gt; 1.1.0&#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pod install&lt;/code&gt;, build framework again, and you will now be able to &lt;code class=&quot;highlighter-rouge&quot;&gt;import Cartography&lt;/code&gt; in Playground too.&lt;/p&gt;

&lt;p&gt;Because now 2 targets are using the same Cargography lib, it is cleaner to &lt;a href=&quot;https://www.natashatherobot.com/cocoapods-installing-same-pod-multiple-targets/&quot;&gt;define shared pods&lt;/a&gt; in Podfile. We leave that as an exercise for you.&lt;/p&gt;

&lt;h2 id=&quot;bonus-custom-device-size&quot;&gt;Bonus: Custom Device Size&lt;/h2&gt;

&lt;p&gt;You can live view the UI with custom device size eg. iPhone 8 Plus, iPhone X, iPad, etc&lt;/p&gt;

&lt;p&gt;Objc.io has provided a helpful &lt;a href=&quot;https://github.com/objcio/S01E51-playground-driven-development-at-kickstarter/blob/master/MyPlayground.playground/Sources/playground-wrapper.swift&quot;&gt;Playground wrapper for devices&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Sample usage:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;parent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;playgroundWrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
  &lt;span class=&quot;nv&quot;&gt;device&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;phone4_7inch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
  &lt;span class=&quot;nv&quot;&gt;orientation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;landscape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
  &lt;span class=&quot;nv&quot;&gt;contentSizeCategory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;large&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;PlaygroundPage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;liveView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Thu, 05 Oct 2017 16:26:25 +0800</pubDate>
        <link>http://samwize.com/2017/10/05/adding-playground-to-an-existing-project/</link>
        <guid isPermaLink="true">http://samwize.com/2017/10/05/adding-playground-to-an-existing-project/</guid>
        
        
        <category>Playground</category>
        
      </item>
    
      <item>
        <title>Steps to Create Swift Framework + Cocoapods</title>
        <description>&lt;h2 id=&quot;create-framework-project&quot;&gt;1. Create framework project&lt;/h2&gt;

&lt;p&gt;Select Xcode &amp;gt; File &amp;gt; New &amp;gt; Project &amp;gt; iOS &amp;gt; &lt;strong&gt;Cocoa Touch Framework&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/xcode-template-ios-cocoa-touch-framework.jpg&quot; alt=&quot;Cocoa Touch Framework&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A Cocoa Touch Framework is for iOS, and can use UIKit framework. If you are developing a framework that does not require UIKit, you may select iMac &amp;gt; &lt;strong&gt;Cocoa Framework&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;add-your-source&quot;&gt;2. Add your source&lt;/h2&gt;

&lt;p&gt;As a simple example, add &lt;code class=&quot;highlighter-rouge&quot;&gt;MyFramework.swift&lt;/code&gt;. I tend to keep my source file under &lt;code class=&quot;highlighter-rouge&quot;&gt;/Source&lt;/code&gt;, but it’s to your own preference.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyFramework&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;shared&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyFramework&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This provide the client/app &lt;code class=&quot;highlighter-rouge&quot;&gt;MyFramework.shared.foo()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Notice that the class is &lt;strong&gt;public&lt;/strong&gt;, and the members are implicitly public too.&lt;/p&gt;

&lt;p&gt;Read about &lt;a href=&quot;/2017/04/20/access-levels-in-swift/&quot;&gt;access level&lt;/a&gt;, if needed. In short, to expose your classes and methods, it need to be public or open.&lt;/p&gt;

&lt;h2 id=&quot;create-cocoapods-spec&quot;&gt;3. Create Cocoapods Spec&lt;/h2&gt;

&lt;p&gt;In your framework root directory, run&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pod spec create MyFramework
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This will create a default &lt;code class=&quot;highlighter-rouge&quot;&gt;MyFramework.podspec&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You will need to edit the podspec file to your needs. My bare minimum:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;Pod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;         &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;MyFramework&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;version&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;0.0.1&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;summary&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;A short description of MyFramework.&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;description&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;DESC&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
  A much much longer description of MyFramework.
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;                   DESC&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;homepage&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;http://EXAMPLE/MyFramework&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;license&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Copyleft&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;author&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Junda&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;junda@just2us.com&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;source&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;.&#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# s.source       = { :git =&amp;gt; &quot;https://github/samwize/MyFramework&quot;, :tag =&amp;gt; &quot;#{s.version}&quot; }&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;source_files&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Source/**/*.swift&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;s.name&lt;/code&gt; is the pod name, that will subsequently be used in Podfile&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;s.source&lt;/code&gt; is using path to its current directory. This is temporary and you should uncomment and edit the source that points to the repository URL, when you have pushed to git.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;s.source_files&lt;/code&gt; is edited to include those  in &lt;code class=&quot;highlighter-rouge&quot;&gt;/Source&lt;/code&gt; directory and only for Swift files.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Run &lt;code class=&quot;highlighter-rouge&quot;&gt;pod spec lint&lt;/code&gt; to check if the podspec is ok. There will be 1 error on “Unsupported download strategy”, but we can ignore that for now.&lt;/p&gt;

&lt;h2 id=&quot;add-pod-to-project&quot;&gt;4. Add pod to project&lt;/h2&gt;

&lt;p&gt;Open the project that will be using the pod.&lt;/p&gt;

&lt;p&gt;Add to &lt;code class=&quot;highlighter-rouge&quot;&gt;Podfile&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;pod&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;MyFramework&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;../MyFramework&#39;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# pod &#39;MyFramework&#39;, :git =&amp;gt; &#39;https://github.com/samwize/MyFramework&#39;, :branch =&amp;gt; &#39;master&#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We use the local path, assuming MyFramework and the project are in the same folder.&lt;/p&gt;

&lt;p&gt;Once again, uncomment the 2nd line that points to the git repository when you have pushed it.&lt;/p&gt;

&lt;p&gt;With that, &lt;code class=&quot;highlighter-rouge&quot;&gt;pod install&lt;/code&gt; and start developing with the pod!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: The benefit of a local path is that you can make edit a Swift file in MyFramework, and it will be reflected right away in the project – very convenient.&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 01 Oct 2017 15:32:49 +0800</pubDate>
        <link>http://samwize.com/2017/10/01/creating-a-swift-framework-cocoapods/</link>
        <guid isPermaLink="true">http://samwize.com/2017/10/01/creating-a-swift-framework-cocoapods/</guid>
        
        
        <category>Swift</category>
        
      </item>
    
      <item>
        <title>Guide to Using Codable Struct for JSON</title>
        <description>&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Codable&lt;/code&gt; is a new feature introduced along with Swfit 4 for encoding and decoding models easily, making third party libraries such as SwiftyJSON and Unbox obsolete. It is part of Foundation framework, and is a must know if you use JSON format.&lt;/p&gt;

&lt;h2 id=&quot;the-basic&quot;&gt;The Basic&lt;/h2&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Animal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Codable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;numberOfLegs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Add &lt;code class=&quot;highlighter-rouge&quot;&gt;Codable&lt;/code&gt; as a trait to your type, and that’s it.&lt;/p&gt;

&lt;p&gt;You enjoy &lt;strong&gt;automatic encoding and decoding&lt;/strong&gt;, thanks to default extension for the &lt;code class=&quot;highlighter-rouge&quot;&gt;Codable&lt;/code&gt; protocol.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;numberOfLegs&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;It works automatically as long as the members are &lt;code class=&quot;highlighter-rouge&quot;&gt;Codable&lt;/code&gt; type. Later section will explain what to do if your type cannot conform to &lt;code class=&quot;highlighter-rouge&quot;&gt;Codable&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Codable&lt;/code&gt; is actually made up of 2 protocols – &lt;code class=&quot;highlighter-rouge&quot;&gt;Encodable&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Decodable&lt;/code&gt; – and you can use one if you don’t need the other. In this post, we will highlight for both encoding and decoding, but feel free to decouple them.&lt;/p&gt;

&lt;h2 id=&quot;encoding-to-json-string&quot;&gt;Encoding to JSON string&lt;/h2&gt;

&lt;p&gt;With a &lt;code class=&quot;highlighter-rouge&quot;&gt;Codable&lt;/code&gt; type you can encode to JSON string easily.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;animal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Animal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;numberOfLegs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;encoder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;JSONEncoder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;encoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outputFormatting&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prettyPrinted&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try!&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;animal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;encoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;utf8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You probably will omit the pretty print in production code.&lt;/p&gt;

&lt;h2 id=&quot;decoding-from-json-string&quot;&gt;Decoding from JSON string&lt;/h2&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;decoder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;JSONDecoder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;jsonData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jsonString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;using&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;utf8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;animal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try!&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;decoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Animal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jsonData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;what-about-plist&quot;&gt;What about plist?&lt;/h2&gt;

&lt;p&gt;This post is about JSON, but it is trivial to encode/decode other formats.&lt;/p&gt;

&lt;p&gt;Simply change &lt;code class=&quot;highlighter-rouge&quot;&gt;JSONEncoder&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;JSONDecoder&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;PropertyListEncoder&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;PropertyListDecoder&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;when-you-need-a-different-key-name&quot;&gt;When you need a different key name&lt;/h2&gt;

&lt;p&gt;Let’s say for the JSON, you want the key name to be “number_of_legs” (snake cased), instead of “numberOfLegs”.&lt;/p&gt;

&lt;p&gt;To customize the JSON key names, add &lt;code class=&quot;highlighter-rouge&quot;&gt;CodingKeys&lt;/code&gt; enum to the struct.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Animal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Codable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;numberOfLegs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CodingKeys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CodingKey&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numberOfLegs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;number_of_legs&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now, there is some magic performed by the compiler with the &lt;code class=&quot;highlighter-rouge&quot;&gt;CodingKeys&lt;/code&gt; enum. The compiler only recognize the enum name “CodingKeys”, reserved as the keys for the struct.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: &lt;code class=&quot;highlighter-rouge&quot;&gt;CodingKeys&lt;/code&gt; is a compiler recognized enum, while &lt;code class=&quot;highlighter-rouge&quot;&gt;CodingKey&lt;/code&gt; is the protocol.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You may in fact have your own type that implements the &lt;code class=&quot;highlighter-rouge&quot;&gt;CodingKey&lt;/code&gt; protocol. Read on.&lt;/p&gt;

&lt;h2 id=&quot;when-you-need-a-nested-structure&quot;&gt;When you need a nested structure&lt;/h2&gt;

&lt;p&gt;When your struct is flat, but maps to a nested structure in the JSON, you have more work to do.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;anatomy&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;numberOfLegs&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Firstly, you have to add your keys for the nested. We add &lt;code class=&quot;highlighter-rouge&quot;&gt;AnatomyCodingKeys&lt;/code&gt; which implements &lt;code class=&quot;highlighter-rouge&quot;&gt;CodingKey&lt;/code&gt; protocol.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Animal&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;numberOfLegs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CodingKeys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CodingKey&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;anatomy&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AnatomyCodingKeys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CodingKey&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numberOfLegs&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then you implement &lt;code class=&quot;highlighter-rouge&quot;&gt;Encodable&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Decodable&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Animal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Encodable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;encoder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Encoder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// #1&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;container&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;keyedBy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CodingKeys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// #2 and #3&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;anatomyContainer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;container&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;nestedContainer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;keyedBy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AnatomyCodingKeys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;forKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;anatomy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// #4&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;anatomyContainer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numberOfLegs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;forKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numberOfLegs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The encoding process is as such:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Get the main container with keys as per &lt;code class=&quot;highlighter-rouge&quot;&gt;CodingKeys&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Get the nested container, which is in the main container at the key “anatomy” (of &lt;code class=&quot;highlighter-rouge&quot;&gt;CodingKeys&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Main container has keys as per &lt;code class=&quot;highlighter-rouge&quot;&gt;AnatomyCodingKeys&lt;/code&gt; (aka “keyed by”)&lt;/li&gt;
  &lt;li&gt;Encode each type with key&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The decoding is similar.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Animal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Decodable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;decoder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Decoder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;container&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;decoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;keyedBy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CodingKeys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;anatomyContainer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;container&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;nestedContainer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;keyedBy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AnatomyCodingKeys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;forKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;anatomy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;numberOfLegs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;anatomyContainer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;forKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numberOfLegs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;error-with-a-dictionary-member&quot;&gt;Error with a Dictionary member&lt;/h2&gt;

&lt;p&gt;Let’s look at an unexpected scenario, a struct having a Dictionary as it’s member.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Sword&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Codable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Dictionary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Codable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Sword&lt;/code&gt; has a flexible member &lt;code class=&quot;highlighter-rouge&quot;&gt;properties&lt;/code&gt;, which basically can store any key-value pair. But there will be a compile error.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Type &#39;Sword&#39; does not conform to protocol &#39;Encodable&#39;
Type &#39;Sword&#39; does not conform to protocol &#39;Decodable&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The problem is because a &lt;code class=&quot;highlighter-rouge&quot;&gt;Dictionary&lt;/code&gt; is not a Codable, even thought the values in it is.&lt;/p&gt;

&lt;p&gt;It such case, you will need dynamic coding keys, an advanced topic.&lt;/p&gt;

&lt;h2 id=&quot;dynamic-coding-keys&quot;&gt;Dynamic Coding Keys&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/documentation/foundation/archives_and_serialization/using_json_with_custom_types&quot;&gt;Apple codable playground&lt;/a&gt; provides a sample code on how you can have a dynamic key eg. the keys are not defined exhausively in the &lt;code class=&quot;highlighter-rouge&quot;&gt;CodingKeys&lt;/code&gt; enum.&lt;/p&gt;

&lt;p&gt;In our scenario, that’s what we want for the Dictionary, where the keys in it can be any string.&lt;/p&gt;

&lt;p&gt;Create &lt;code class=&quot;highlighter-rouge&quot;&gt;DynamicKey&lt;/code&gt;, which implements &lt;code class=&quot;highlighter-rouge&quot;&gt;CodingKey&lt;/code&gt;, but it only can be init with a string.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;DynamicKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CodingKey&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;stringValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;stringValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stringValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stringValue&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;intValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;intValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then we extend &lt;code class=&quot;highlighter-rouge&quot;&gt;KeyedEncodingContainer&lt;/code&gt; to provide the method to encode the dictionary.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;KeyedEncodingContainer&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;DynamicKey&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    
    &lt;span class=&quot;k&quot;&gt;mutating&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;encodeDynamicKeyValues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withDictionary&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dictionary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dictionary&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dynamicKey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;DynamicKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;stringValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;forKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dynamicKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;forKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dynamicKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Type &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; not supported&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The above &lt;code class=&quot;highlighter-rouge&quot;&gt;encodeDynamicKeyValues&lt;/code&gt; has a shortfall: you need to add to the types supported. The above code illustrated only for String and Int. &lt;em&gt;If you know of a better approach, let me know!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;To use, in &lt;code class=&quot;highlighter-rouge&quot;&gt;encode(to:)&lt;/code&gt;,&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;propertiesContainer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;container&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;nestedContainer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;keyedBy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;DynamicKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;forKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;properties&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;properties&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;propertiesContainer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;encodeDynamicKeyValues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;withDictionary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I will leave the implementation of &lt;code class=&quot;highlighter-rouge&quot;&gt;KeyedDecodingContainer&lt;/code&gt; as an exercise :)&lt;/p&gt;

&lt;p&gt;Or check &lt;a href=&quot;https://gist.github.com/samwize/a82f29a1fb34091cd61fc06934568f82&quot;&gt;my gist&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;what-is-a-container&quot;&gt;What is a container?&lt;/h2&gt;

&lt;p&gt;If you need to customize the encoding and decoding, you will need to grasp the concept of containers.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/2017/08/03/wwdc-2017-whats-new-in-foundation/&quot;&gt;&lt;img src=&quot;/images/wwdc-foundation-codable.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A container is one of 3 types:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Keyed Container – provides values by keys, like a dictionary&lt;/li&gt;
  &lt;li&gt;Unkeyed Container – provides ordered values without keys, like an array&lt;/li&gt;
  &lt;li&gt;Single Value Container – a single raw value&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In encoding/decoding, you need to use the correct type of container as per the JSON/whatever structure you have.&lt;/p&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;

&lt;p&gt;Codable is &lt;a href=&quot;https://github.com/apple/swift/blob/master/stdlib/public/core/Codable.swift&quot;&gt;open source&lt;/a&gt;, so we can dig it and understand how it works internally.&lt;/p&gt;

&lt;p&gt;A more useful resource provided by Apple is the &lt;a href=&quot;https://developer.apple.com/documentation/foundation/archives_and_serialization/using_json_with_custom_types&quot;&gt;playground for custom type&lt;/a&gt;, showing how we could achieve dynamic coding keys.&lt;/p&gt;

&lt;p&gt;Apple has a &lt;a href=&quot;https://developer.apple.com/documentation/foundation/archives_and_serialization/encoding_and_decoding_custom_types&quot;&gt;basic guide&lt;/a&gt;. Other good guides include &lt;a href=&quot;http://swiftjson.guide&quot;&gt;swiftjson.guide&lt;/a&gt; and &lt;a href=&quot;https://www.raywenderlich.com/172145/encoding-decoding-and-serialization-in-swift-4&quot;&gt;raywenderlich’s&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 26 Sep 2017 12:30:24 +0800</pubDate>
        <link>http://samwize.com/2017/09/26/guide-to-using-codable-struct-for-json-the-new-thing-in-swift-4/</link>
        <guid isPermaLink="true">http://samwize.com/2017/09/26/guide-to-using-codable-struct-for-json-the-new-thing-in-swift-4/</guid>
        
        
        <category>Swift</category>
        
      </item>
    
      <item>
        <title>Migrating to Swift 4 and @objc</title>
        <description>&lt;p&gt;Swift’s official &lt;a href=&quot;https://swift.org/migration-guide-swift4/&quot;&gt;migration guide&lt;/a&gt; gives a good overview.&lt;/p&gt;

&lt;p&gt;Using the migration assistant in the new Xcode 9 would have helped to rename most of the SDK changes, such as moving string contants to enum cases.&lt;/p&gt;

&lt;p&gt;This post will highlight the other trickly cases.&lt;/p&gt;

&lt;h2 id=&quot;distinguish-single-tuple-from-multiple-argument-function-types-se-0110&quot;&gt;Distinguish single-tuple from multiple-argument function types [SE-0110]&lt;/h2&gt;

&lt;p&gt;There is an issue with Swift 3 in distinguishing between the type of the argument in a closure.&lt;/p&gt;

&lt;p&gt;Is it a tuple with 2 arguments?&lt;/p&gt;

&lt;p&gt;Or is it 2 arguments?&lt;/p&gt;

&lt;p&gt;Proposal &lt;a href=&quot;https://github.com/apple/swift-evolution/blob/master/proposals/0110-distingish-single-tuple-arg.md&quot;&gt;SE-0110&lt;/a&gt; seeks to correct that.&lt;/p&gt;

&lt;p&gt;In short, to declare a function type with 1 tuple, you will need to double enclose with brackets:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Xcode will also suggest rewriting &lt;code class=&quot;highlighter-rouge&quot;&gt;f: (Void) -&amp;gt; ()&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;f: () -&amp;gt; ()&lt;/code&gt;, because your probably just mean that.&lt;/p&gt;

&lt;h2 id=&quot;objc-has-to-be-explicit-se-0160&quot;&gt;@objc has to be explicit [SE-0160]&lt;/h2&gt;

&lt;p&gt;The biggest change is to do with Objective-C inference.&lt;/p&gt;

&lt;p&gt;The details is in the proposal &lt;a href=&quot;https://github.com/apple/swift-evolution/blob/master/proposals/0160-objc-inference.md&quot;&gt;SE-0160&lt;/a&gt; (it’s long).&lt;/p&gt;

&lt;p&gt;The change is not only source breaking, but worse, could introduce bugs unknowingly. This is because you could still build and run, but if some of your type/method is no longer available to Objective-C runtime (because @objc is no longer inferred anymore), the method will just fail to respond.&lt;/p&gt;

&lt;p&gt;That’s why this change is big, and you should test all parts of your user flow.&lt;/p&gt;

&lt;h4 id=&quot;the-switch-in-project-settings&quot;&gt;The switch in project settings&lt;/h4&gt;

&lt;p&gt;After migrating to Swift 4, &lt;strong&gt;Swift 3 @objc Inference&lt;/strong&gt; remains &lt;strong&gt;On&lt;/strong&gt;, for good reason because as we said, this change is breaking.&lt;/p&gt;

&lt;p&gt;There is benefits to switching it to off – that is not to infer @objc for all types. Things will be faster, binary smaller.&lt;/p&gt;

&lt;p&gt;When you switch to &lt;strong&gt;Off&lt;/strong&gt; (default), make sure your app still works well. You could unknowingly introduce bugs (likely not crash) because some functions are no longer inferred to be available to Objective-C runtime.&lt;/p&gt;

&lt;h4 id=&quot;when-it-doesnt-work&quot;&gt;When it doesn’t work..&lt;/h4&gt;

&lt;p&gt;To fix, you can add 2 annotations to tell the compiler it is to be available for Objective-C runtime.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@objc&lt;/code&gt; can be added to a function.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@objcMembers&lt;/code&gt; can  be added to a type, and all members and functions will be infered, unless, of course, if the function uses pure Swift features eg. tuple.&lt;/p&gt;

&lt;h4 id=&quot;extensions-cannot-override-yet&quot;&gt;Extensions cannot override yet&lt;/h4&gt;

&lt;p&gt;Another common error as a result is to do with extension methods that are overriden.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Super&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Remember, without @objc, this is not available to objc &lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Sub&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Super&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The above code will have error “declarations in extensions cannot override yet”.&lt;/p&gt;

&lt;p&gt;The fix is to add @objc to the function in the extension.&lt;/p&gt;

&lt;h4 id=&quot;summary-of-code-impact&quot;&gt;Summary of code impact&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Subclass of &lt;code class=&quot;highlighter-rouge&quot;&gt;NSObject&lt;/code&gt; no NOT infer as @objc&lt;/li&gt;
  &lt;li&gt;Run your tests&lt;/li&gt;
  &lt;li&gt;Check all app flow to make sure they are working, if not add &lt;code class=&quot;highlighter-rouge&quot;&gt;@objc&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;@objcMembers&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Add @objc to extension functions that needs to be overriden&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;dynamic&lt;/code&gt; must have @objc – this is easy to fix because compiler will have error&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 20 Sep 2017 16:37:53 +0800</pubDate>
        <link>http://samwize.com/2017/09/20/migrating-to-swift-4-and-xcode-9/</link>
        <guid isPermaLink="true">http://samwize.com/2017/09/20/migrating-to-swift-4-and-xcode-9/</guid>
        
        
        <category>Swift</category>
        
        <category>Xcode</category>
        
      </item>
    
  </channel>
</rss>
