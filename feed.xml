<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>@samwize</title>
    <description>¯\_(ツ)_/¯
</description>
    <link>http://samwize.com/</link>
    <atom:link href="http://samwize.com/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Fri, 12 May 2017 22:53:06 +0800</pubDate>
    <lastBuildDate>Fri, 12 May 2017 22:53:06 +0800</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>Xcode 8 File Templates</title>
        <description>&lt;h2 id=&quot;the-secret-feature-of-xcode&quot;&gt;The secret feature of Xcode&lt;/h2&gt;

&lt;p&gt;Ok, not exactly a secret, but it is definitely one of the less known features of Xcode, that was &lt;a href=&quot;https://developer.apple.com/search/?q=xcode%20template&quot;&gt;never documented&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Whenever you add a new file, you are using one of the provided &lt;strong&gt;File Templates&lt;/strong&gt;. Eg. When you choose a “Cocoa Touch Class” and subsequently selected a UIViewController subclass, it is simply generating the new file with a template.&lt;/p&gt;

&lt;p&gt;Knowing how to make full use of it will speed up your development, similar to the &lt;a href=&quot;/2014/03/26/tip-use-xcode-snippets/&quot;&gt;tip on Xcode’s code snippets&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you are using a certain architecture that needs to create many files for a module, file template can help to create and generate boilerplate codes quickly.&lt;/p&gt;

&lt;h2 id=&quot;creating-your-file-template&quot;&gt;Creating Your File Template&lt;/h2&gt;

&lt;p&gt;You have to store Xcode file templates in&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~/Library/Developer/Xcode/Templates/File Templates/
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This is stored under your user account. In the later section, we will share a tip using Dropbox to sync all your templates.&lt;/p&gt;

&lt;p&gt;For now, let’s create your template under that directory. The &lt;code class=&quot;highlighter-rouge&quot;&gt;/Templates/File Templates/&lt;/code&gt; folders have to be created along with your template eg. &lt;code class=&quot;highlighter-rouge&quot;&gt;MyTemplate.xctemplate&lt;/code&gt; (a directory with the extension .xctemplate)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mkdir -p ~/Library/Developer/Xcode/Templates/File\ Templates/MyTemplate.xctemplate/
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;There is another kind of template known as &lt;strong&gt;Project Templates&lt;/strong&gt;. We will not be discussing it, but you should have guessed where it should be – &lt;code class=&quot;highlighter-rouge&quot;&gt;~/Library/Developer/Xcode/Templates/Project Templates/&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now, let’s refer to the provided standard Xcode file templates, which are all in&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/Applications/Xcode.app/Contents/Developer/Library/Xcode/Templates/File Templates/
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We will copy the simple swift template, and modify for our use later.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cp -R \
/Applications/Xcode.app/Contents/Developer/Library/Xcode/Templates/File\ Templates/Source/Swift\ File.xctemplate/ \
~/Library/Developer/Xcode/Templates/File\ Templates/MyTemplate.xctemplate/
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You will see a few files in &lt;code class=&quot;highlighter-rouge&quot;&gt;~/Library/Developer/Xcode/Templates/File\ Templates/MyTemplate.xctemplate/&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;how-to-use-your-template&quot;&gt;How to use your template&lt;/h2&gt;

&lt;p&gt;At this point, your custom template can already be used.&lt;/p&gt;

&lt;p&gt;In Xcode, add a new file, and search for “MyTemplate” (or scroll to File Templates at the bottom), and it will generate an empty Swift file.&lt;/p&gt;

&lt;p&gt;You can also see your template under File Template Library. Or press &lt;code class=&quot;highlighter-rouge&quot;&gt;CMD + ALT + CTRL + 1&lt;/code&gt;. You might need to restart Xcode for it to find the newly created template. You can drag a template to your project navigation.&lt;/p&gt;

&lt;h2 id=&quot;customize-the-template&quot;&gt;Customize the template&lt;/h2&gt;

&lt;p&gt;Good, now let’s learn how to customize the template.&lt;/p&gt;

&lt;p&gt;There are a few files in a template.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;TemplateIcon.png&lt;/code&gt; (and the @2x) is obvious – a visual icon to represent your template in Xcode&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;TemplateInfo.plist&lt;/code&gt; – like project Info.plist, this property file describes the template&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The rest of the files (eg &lt;code class=&quot;highlighter-rouge&quot;&gt;___FILEBASENAME___.swift&lt;/code&gt;) are the actual files that will be created. If you add more files eg. &lt;code class=&quot;highlighter-rouge&quot;&gt;___FILEBASENAME___+Extension.swift&lt;/code&gt;, then that file will be created too.&lt;/p&gt;

&lt;p&gt;Let’s dive deeper into &lt;code class=&quot;highlighter-rouge&quot;&gt;TemplateInfo.plist&lt;/code&gt;, which provides many options.&lt;/p&gt;

&lt;p&gt;There are a few &lt;code class=&quot;highlighter-rouge&quot;&gt;Kind&lt;/code&gt; of templates. We usually use &lt;code class=&quot;highlighter-rouge&quot;&gt;Xcode.IDEFoundation.TextSubstitutionFileTemplateKind&lt;/code&gt;. Others are &lt;code class=&quot;highlighter-rouge&quot;&gt;Xcode.IDEKit.PlaygroundWithPlatformChoice&lt;/code&gt; etc.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;Summary&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Description&lt;/code&gt; are obvious.&lt;/p&gt;

&lt;h3 id=&quot;options&quot;&gt;Options&lt;/h3&gt;

&lt;p&gt;You can provide many &lt;code class=&quot;highlighter-rouge&quot;&gt;Option&lt;/code&gt;s, an array of dictionary.&lt;/p&gt;

&lt;p&gt;Let’s look at this example, with 1 item in the &lt;code class=&quot;highlighter-rouge&quot;&gt;Option&lt;/code&gt; array.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/xcode-template-options.png&quot; alt=&quot;Example&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;Identifier&lt;/code&gt; is very important. It is the variable name that can be used in the file template.&lt;/p&gt;

&lt;p&gt;Eg In &lt;code class=&quot;highlighter-rouge&quot;&gt;___FILEBASENAME___.swift&lt;/code&gt;, you can have this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let ___VARIABLE_FOO___: String
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;When you create the file, you will be prompted to enter for “Foo:”, with a default text “ohMyFoo”. The actual generated then becomes&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let ohMyFoo: String
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You could have other &lt;code class=&quot;highlighter-rouge&quot;&gt;Type&lt;/code&gt;, such as &lt;code class=&quot;highlighter-rouge&quot;&gt;popup&lt;/code&gt; with it’s &lt;code class=&quot;highlighter-rouge&quot;&gt;Values&lt;/code&gt; array.&lt;/p&gt;

&lt;p&gt;As you can imagine, you can have multiple variables to be used in the file template.&lt;/p&gt;

&lt;h2 id=&quot;sync-to-dropbox&quot;&gt;Sync to Dropbox&lt;/h2&gt;

&lt;p&gt;If you are using multiple machine, you will like this tip.&lt;/p&gt;

&lt;p&gt;We can store our templates in Dropbox, and using symlink to the Xcode folders. This is similar to the tip for &lt;a href=&quot;/2014/03/26/tip-use-xcode-snippets/&quot;&gt;syncing code snippets&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://db.tt/GRqFn03&quot;&gt;Signup for Dropbox&lt;/a&gt; if you don’t have an account.&lt;/p&gt;

&lt;p&gt;I store them under &lt;code class=&quot;highlighter-rouge&quot;&gt;~/Dropbox/Workspace/Xcode/Templates&lt;/code&gt;. It’s up to you where to store. Move your custom templates to the folder.&lt;/p&gt;

&lt;p&gt;For our example, it will be in &lt;code class=&quot;highlighter-rouge&quot;&gt;~/Dropbox/Workspace/Xcode/Templates/File Templates/MyTemplate.xctemplate/&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Then create the symbolic link:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ln -s ~/Dropbox/Workspace/Xcode/Templates ~/Library/Developer/Xcode/Templates/
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;That’s it! Remember to create the symbolic link for every machine.&lt;/p&gt;
</description>
        <pubDate>Fri, 12 May 2017 14:40:33 +0800</pubDate>
        <link>http://samwize.com/2017/05/12/xcode-8-file-templates/</link>
        <guid isPermaLink="true">http://samwize.com/2017/05/12/xcode-8-file-templates/</guid>
        
        
        <category>Xcode</category>
        
      </item>
    
      <item>
        <title>Guide to watchOS Development</title>
        <description>&lt;p&gt;&lt;em&gt;A guide for watchOS 3, because the &lt;a href=&quot;https://developer.apple.com/library/content/documentation/General/Conceptual/WatchKitProgrammingGuide/&quot;&gt;watch app programming guide&lt;/a&gt; is not obvious.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;companion-app&quot;&gt;Companion App&lt;/h2&gt;

&lt;p&gt;The companion app is the iOS app, aka the parent or host app.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You CANNOT open companion app programmatically&lt;/li&gt;
  &lt;li&gt;You can communicate with the companion app, and at best put the app in background state&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;setup-bi-directional-session&quot;&gt;Setup bi-directional session&lt;/h2&gt;

&lt;p&gt;First, setup sessions between watch app and companion app using &lt;a href=&quot;https://developer.apple.com/reference/watchconnectivity/wcsession&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;WCSession&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You need to setup for both directions.&lt;/p&gt;

&lt;p&gt;On iOS’s app delegate, or watchOS’ extension delegate, setup the session like this:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setupWatchSession&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;WCSession&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;isSupported&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;session&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;WCSession&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delegate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;activate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The &lt;a href=&quot;https://developer.apple.com/reference/watchconnectivity/wcsessiondelegate&quot;&gt;delegate&lt;/a&gt; manages state change, and also receiving of messages:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AppDelegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;WCSessionDelegate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;WCSession&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activationDidCompleteWith&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;activationState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;WCSessionActivationState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sessionDidBecomeInactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;WCSession&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;      
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sessionDidDeactivate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;WCSession&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;WCSession&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;didReceiveMessage&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;replyHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;@escaping&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The first 3 delegate methods are mandatory, even if empty.&lt;/p&gt;

&lt;p&gt;The 4th method &lt;code class=&quot;highlighter-rouge&quot;&gt;session:didReceiveMessage:&lt;/code&gt; is for receiving messages from the other side. It is optional method, but we use it in next section.&lt;/p&gt;

&lt;h2 id=&quot;ways-to-communicate&quot;&gt;Ways to Communicate&lt;/h2&gt;

&lt;p&gt;There are a number of ways, and you &lt;a href=&quot;https://developer.apple.com/library/content/documentation/General/Conceptual/WatchKitProgrammingGuide/SharingData.html#//apple_ref/doc/uid/TP40014969-CH29-SW1&quot;&gt;choose what is right&lt;/a&gt; for your app.&lt;/p&gt;

&lt;p&gt;I will mention what is easiest – &lt;a href=&quot;https://developer.apple.com/reference/watchconnectivity/wcsession/1615687-sendmessage&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sendMessage&lt;/code&gt;&lt;/a&gt;. Let’s look at the signature:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func sendMessage(_ message: [String : Any], replyHandler: (([String : Any]) -&amp;gt; Void)?, errorHandler: ((Error) -&amp;gt; Void)? = nil)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;You send a message payload in the form of a dictionary with &lt;code class=&quot;highlighter-rouge&quot;&gt;sendMessage&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;The other side recieve via &lt;a href=&quot;https://developer.apple.com/reference/watchconnectivity/wcsessiondelegate/1615677-session&quot;&gt;didReceiveMessage&lt;/a&gt; (one of &lt;code class=&quot;highlighter-rouge&quot;&gt;WKSessionDelegate&lt;/code&gt; method)&lt;/li&gt;
  &lt;li&gt;The other side can reply via the &lt;code class=&quot;highlighter-rouge&quot;&gt;replyHandler&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;You get back the reply in your reply handler&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This is a simple send and reply mechanism, triggered by one side.&lt;/p&gt;

&lt;h2 id=&quot;open-companion-app-in-active-state&quot;&gt;Open Companion App in Active State&lt;/h2&gt;

&lt;p&gt;This is a very common scenario – watch app wants to open companion (iOS) app.&lt;/p&gt;

&lt;p&gt;That is NOT possible.&lt;/p&gt;

&lt;p&gt;The best we developers can manage is this:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Watch app communicates via &lt;code class=&quot;highlighter-rouge&quot;&gt;sendMessage&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;iOS app receives message&lt;/li&gt;
  &lt;li&gt;iOS app reply it’s current state – active or not – using &lt;code class=&quot;highlighter-rouge&quot;&gt;UIApplication.shared.applicationState&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Watch app receives reply, and if state is not active, inform the user that he must open the iOS app&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The above can be slightly improved. When iOS app is opened, &lt;strong&gt;proactively&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;sendMessage&lt;/code&gt; to watch app on it’s status.&lt;/p&gt;

&lt;h2 id=&quot;debug-both-watch-and-ios-targets&quot;&gt;Debug BOTH watch and iOS targets&lt;/h2&gt;

&lt;p&gt;It seems like Xcode cannot run and debug watchOS and iOS targets at the same time.&lt;/p&gt;

&lt;p&gt;But it is actually possible, but &lt;a href=&quot;https://forums.developer.apple.com/thread/16003&quot;&gt;not obvious&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The steps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Run watch app&lt;/li&gt;
  &lt;li&gt;Xcode &amp;gt; Debug &amp;gt; Attach to process &amp;gt; select your iOS app&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you want to debug your iOS app before it is being launched, you can “Attach to Process by PID or Name…”&lt;/p&gt;

&lt;h2 id=&quot;pitfall-xcode-build-errors&quot;&gt;Pitfall: Xcode Build Errors&lt;/h2&gt;

&lt;p&gt;I encountered Xcode bug where the watch app build settings does not include the correct build architecture.&lt;/p&gt;

&lt;p&gt;Not sure why, but Xcode &lt;em&gt;always&lt;/em&gt; screw up with the build architecture.&lt;/p&gt;

&lt;p&gt;Plus, Xcode throws confusing errors such as &lt;code class=&quot;highlighter-rouge&quot;&gt;WatchKit App doesn&#39;t contain any WatchKit Extensions. Verify that the value of NSExtensionPointIdentifier in your WatchKit Extension&#39;s Info.plist is set to com.apple.watchkit&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Embedded Binary Validation utility Error&lt;/code&gt;, but really, the root cause is that it didn’t build the watch extension.&lt;/p&gt;

&lt;p&gt;Make sure under Watch Extension target &amp;gt; Build Settings &amp;gt; Valid Architectures, it includes &lt;code class=&quot;highlighter-rouge&quot;&gt;armv7k&lt;/code&gt; (for device) and &lt;code class=&quot;highlighter-rouge&quot;&gt;i386&lt;/code&gt; (for simulator).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/library/content/technotes/tn2424/_index.html&quot;&gt;Technical notes&lt;/a&gt; could be helpful.&lt;/p&gt;
</description>
        <pubDate>Sat, 22 Apr 2017 14:31:36 +0800</pubDate>
        <link>http://samwize.com/2017/04/22/all-you-need-to-know-about-watchos-development/</link>
        <guid isPermaLink="true">http://samwize.com/2017/04/22/all-you-need-to-know-about-watchos-development/</guid>
        
        
        <category>watchOS</category>
        
      </item>
    
      <item>
        <title>Access Levels in Swift</title>
        <description>&lt;p&gt;&lt;img src=&quot;/images/swift-access-levels.jpg&quot; alt=&quot;The 5 Access Levels in Swift&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-default&quot;&gt;The Default&lt;/h2&gt;

&lt;p&gt;The default is &lt;code class=&quot;highlighter-rouge&quot;&gt;internal&lt;/code&gt;, which means access is restricted to within a module.&lt;/p&gt;

&lt;p&gt;What is a module? An app is 1 module.&lt;/p&gt;

&lt;p&gt;Hence, the default for an app is everything is accessible within the app.&lt;/p&gt;

&lt;h2 id=&quot;which-to-use&quot;&gt;Which to use?&lt;/h2&gt;

&lt;p&gt;The good practise is to start being extremely restrictive.&lt;/p&gt;

&lt;p&gt;Start with &lt;code class=&quot;highlighter-rouge&quot;&gt;private&lt;/code&gt;, and expose more, only if necessary.&lt;/p&gt;

&lt;h2 id=&quot;application-vs-framework-development&quot;&gt;Application vs Framework Development&lt;/h2&gt;

&lt;p&gt;For regular application development, you will use only (1) to (3).&lt;/p&gt;

&lt;p&gt;For developers working on framework/library/SDK, they will use (4) and (5), because their “module” is exposed to other developers. The difference between the last 2 levels is that &lt;code class=&quot;highlighter-rouge&quot;&gt;public&lt;/code&gt; does not allow the type/func to be subclassed/overriden, while &lt;code class=&quot;highlighter-rouge&quot;&gt;open&lt;/code&gt; let you do whatever you want.&lt;/p&gt;

&lt;h2 id=&quot;implicit&quot;&gt;Implicit&lt;/h2&gt;

&lt;p&gt;If a type has a certain access level, the properties within will have the same level, implicitly.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// implicitly private&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;specify-explicitly-for-top-level-definitions&quot;&gt;Specify explicitly for top-level definitions&lt;/h2&gt;

&lt;p&gt;A &lt;a href=&quot;https://github.com/github/swift-style-guide&quot;&gt;good practise&lt;/a&gt; is to specify the access level explicitly for the top-level types and functions.&lt;/p&gt;

&lt;p&gt;Don’t leave it to the default (&lt;code class=&quot;highlighter-rouge&quot;&gt;internal&lt;/code&gt;). Think hard if you need other part of your app to access it.&lt;/p&gt;

&lt;h2 id=&quot;testing&quot;&gt;Testing&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@testable import MyApp
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In your unit tests, you can import with &lt;code class=&quot;highlighter-rouge&quot;&gt;@testable&lt;/code&gt; attribute, which is a superpower to &lt;a href=&quot;https://developer.apple.com/library/content/documentation/DeveloperTools/Conceptual/testing_with_xcode/chapters/04-writing_tests.html&quot;&gt;change access levels&lt;/a&gt; in the module/app, so that in your tests you can access them.&lt;/p&gt;

&lt;p&gt;For example, an &lt;code class=&quot;highlighter-rouge&quot;&gt;internal&lt;/code&gt; class is not accessible to test target, because a test target is an external module. With &lt;code class=&quot;highlighter-rouge&quot;&gt;@testable&lt;/code&gt;, the access level is increased to &lt;code class=&quot;highlighter-rouge&quot;&gt;open&lt;/code&gt;, and you can now access it (and may even subclass it)!&lt;/p&gt;

&lt;h2 id=&quot;final&quot;&gt;Final&lt;/h2&gt;

&lt;p&gt;Finally, another good practise is to lock down your definitions with &lt;code class=&quot;highlighter-rouge&quot;&gt;final&lt;/code&gt; (:&lt;/p&gt;

&lt;p&gt;This attribute provides an additional restriction – prevent others from subclassing and overriding it.&lt;/p&gt;

&lt;h2 id=&quot;wait-lastly-its-hell-of-a-mess-from-swift&quot;&gt;Wait. Lastly, it’s hell of a mess from Swift.&lt;/h2&gt;

&lt;p&gt;This is a complain on how access levels have evolved, yet is still not great in Swift 3.&lt;/p&gt;

&lt;p&gt;In Swift 1, there are 2 levels.&lt;br /&gt;
In Swift 2, there are 3 levels.&lt;br /&gt;
In Swift 3, there are 5 levels.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;I believe it is a mistake in Swift 3 to adopt &lt;a href=&quot;https://github.com/apple/swift-evolution/blob/master/proposals/0025-scoped-access-level.md&quot;&gt;SE-0025&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;My biggest gripe is this: I have extension X to a type T, keeping them in seperate files. If I want X to use a private member in T, it is impossible to do so with &lt;code class=&quot;highlighter-rouge&quot;&gt;private&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;fileprivate&lt;/code&gt;. I am forced to increase the access to &lt;code class=&quot;highlighter-rouge&quot;&gt;internal&lt;/code&gt;, which is not what I want.&lt;/p&gt;

&lt;p&gt;There is no way to have type level private. The current &lt;code class=&quot;highlighter-rouge&quot;&gt;private&lt;/code&gt; is local scope private, and &lt;code class=&quot;highlighter-rouge&quot;&gt;fileprivate&lt;/code&gt; is a &lt;a href=&quot;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20170403/034903.html&quot;&gt;weird brother&lt;/a&gt; that extends to within that file.&lt;/p&gt;

&lt;p&gt;After Swift 3 was introduced, there is proposal &lt;a href=&quot;https://github.com/apple/swift-evolution/blob/master/proposals/0159-fix-private-access-levels.md&quot;&gt;SE-0159&lt;/a&gt; to fix the mistake, but was &lt;a href=&quot;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20170403/034902.html&quot;&gt;rejected&lt;/a&gt;. Clearly the core team acknowledged the shortcoming, but instead of changing the keywords again, they will likely introduce a “Type-based” &lt;code class=&quot;highlighter-rouge&quot;&gt;private&lt;/code&gt; access in Swift 4.&lt;/p&gt;
</description>
        <pubDate>Thu, 20 Apr 2017 11:31:44 +0800</pubDate>
        <link>http://samwize.com/2017/04/20/access-levels-in-swift/</link>
        <guid isPermaLink="true">http://samwize.com/2017/04/20/access-levels-in-swift/</guid>
        
        
      </item>
    
      <item>
        <title>Guide to Booting Up macOS in Other Modes, and Troubleshooting</title>
        <description>&lt;p&gt;This guide is for troubleshooting macOS in the scenario that it can’t boot up.&lt;/p&gt;

&lt;p&gt;I have personally encountered a couple of times, frightening scenarios, where my mac somehow could not boot up, or get stuck during login etc. macOS provides many “secret” modes to help to troubleshoot.&lt;/p&gt;

&lt;p&gt;Knowing them will be handy in time of crisis.&lt;/p&gt;

&lt;p&gt;You will need to hold down certain keys when your machine is powered on to enter these modes. When you hear the startup sound and see the Apple logo, you may release the keys.&lt;/p&gt;

&lt;h2 id=&quot;resetting-pramnvram&quot;&gt;Resetting PRAM/NVRAM&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Hold Command + Option + P + R&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Parameter RAM stores default values, and it could get corrupted for some reasons.&lt;/p&gt;

&lt;p&gt;This is &lt;strong&gt;The Number 1&lt;/strong&gt; troubleshooting resolution. Always try this first.&lt;/p&gt;

&lt;h2 id=&quot;resetting-scm&quot;&gt;Resetting SCM&lt;/h2&gt;

&lt;p&gt;Similar to resetting PRAM, but SCM involves cutting off power, hence it is different for MacBook and iMac. Read &lt;a href=&quot;https://support.apple.com/en-sg/HT201295&quot;&gt;this&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;verbose-mode&quot;&gt;Verbose Mode&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Hold Command + V&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If resetting fails, use verbose mode to identify what is causing the problem.&lt;/p&gt;

&lt;h2 id=&quot;safe-mode&quot;&gt;Safe Mode&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Hold Shift&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This will boot without loading third-party drivers and startup programs.&lt;/p&gt;

&lt;h2 id=&quot;single-user-mode&quot;&gt;Single User Mode&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Hold Command + S&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In single user mode, you have access to terminal, so you can run certain tools to troubleshoot.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Check and repair file system for consistency&lt;/span&gt;
/sbin/fsck -fy
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;apple-hardware-test&quot;&gt;Apple Hardware Test&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Hold D&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You can perform a short test (around 3 min), or an extended test (around 1 hour).&lt;/p&gt;

&lt;p&gt;Special case: If you encountered &lt;code class=&quot;highlighter-rouge&quot;&gt;4HDD/11/40000000: SATA(0,0)&lt;/code&gt;, it could be a &lt;a href=&quot;https://support.apple.com/en-sg/HT203648&quot;&gt;false positive&lt;/a&gt;. You can disable looping by pressing &lt;em&gt;L&lt;/em&gt; before starting the test. I encountered this, but I still managed to “fix” it - the SSD is not damaged in my case. So don’t worry too much on this error.&lt;/p&gt;

&lt;h2 id=&quot;recovery-mode&quot;&gt;Recovery Mode&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Hold Command + R&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If all else failed, you can try reinstalling macOS.&lt;/p&gt;

&lt;h2 id=&quot;startup-option&quot;&gt;Startup Option&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Hold Option&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You can startup from other device such as external drive. It is possible to load the entire OS in an external drive, and boot from there.&lt;/p&gt;
</description>
        <pubDate>Thu, 06 Apr 2017 23:02:29 +0800</pubDate>
        <link>http://samwize.com/2017/04/06/guide-to-boot-up-macos-in-other-modes-and-troubleshooting/</link>
        <guid isPermaLink="true">http://samwize.com/2017/04/06/guide-to-boot-up-macos-in-other-modes-and-troubleshooting/</guid>
        
        
        <category>mac</category>
        
      </item>
    
      <item>
        <title>Guide to UICollectionView With Custom Layout</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/library/content/documentation/WindowsViews/Conceptual/CollectionViewPGforIOS/CollectionViewBasics/CollectionViewBasics.html&quot;&gt;UICollectionView&lt;/a&gt; is the most powerful view controller in UIKit.&lt;/p&gt;

&lt;p&gt;iOS started with the very basic view controller for displaying a list - in the form of UITableView. But a table is simply a top down display of rows.&lt;/p&gt;

&lt;p&gt;UICollectionView brings you to the next level and you can layout each of these cells (like rows) anywhere you want.&lt;/p&gt;

&lt;h2 id=&quot;the-basic&quot;&gt;The Basic&lt;/h2&gt;

&lt;p&gt;There are 3 types of view in a collection view.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Collection view cells&lt;/li&gt;
  &lt;li&gt;Supplementary views&lt;/li&gt;
  &lt;li&gt;Decoration views&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You have to be clear between &lt;strong&gt;content&lt;/strong&gt; and &lt;strong&gt;layout&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://developer.apple.com/reference/uikit/uicollectionviewdatasource&quot;&gt;datasource protocol&lt;/a&gt; provides the content to 1) collection view cells and 2) supplementary views. &lt;em&gt;Decoration views are views with no content.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://developer.apple.com/reference/uikit/uicollectionviewlayout&quot;&gt;layout object&lt;/a&gt; generates the layout information for all the 3 types of view.&lt;/p&gt;

&lt;p&gt;It is this layout object that you can use to create your custom layout.&lt;/p&gt;

&lt;p&gt;Before we go on how to customize the layout, let’s dig into supplementary and decoration views, because their roles are often confused.&lt;/p&gt;

&lt;h2 id=&quot;what-are-supplementary-views&quot;&gt;What are supplementary views?&lt;/h2&gt;

&lt;p&gt;They are the accompanying views for each section.&lt;/p&gt;

&lt;p&gt;Note that I said views, with a plural. You can have multiple supplementary views for each section. In a flow layout, a provided grid layout, you have header and footer – that’s 2 supplementary views.&lt;/p&gt;

&lt;p&gt;In your custom layout, you can have as many different supplementary views you want. They are distinguished by &lt;code class=&quot;highlighter-rouge&quot;&gt;kind&lt;/code&gt; (a string). The layout object controls how many &lt;code class=&quot;highlighter-rouge&quot;&gt;kind&lt;/code&gt; of views there are. Data source populate it after dequeuing.&lt;/p&gt;

&lt;p&gt;You must return a resuable view in the data source method &lt;code class=&quot;highlighter-rouge&quot;&gt;collectionView(_:viewForSupplementaryElementOfKind:at:)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you do now want a supplementary view in a particular case, then your custom layout should not create the attribute for it. Another simpler way is to set the attribute to hide.&lt;/p&gt;

&lt;h2 id=&quot;and-there-is-decoration-view&quot;&gt;And there is decoration view&lt;/h2&gt;

&lt;p&gt;The 3rd view in a collection view is a decoration view.&lt;/p&gt;

&lt;p&gt;This view is purely for decoration, and is managed by the layout object – they do NOT get content from data source.&lt;/p&gt;

&lt;p&gt;On the other hand, once again, collection view cells and supplementary views get their content from &lt;a href=&quot;https://developer.apple.com/reference/uikit/uicollectionviewdatasource&quot;&gt;UICollection​View​Data​Source&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;creating-a-layout&quot;&gt;Creating a layout&lt;/h2&gt;

&lt;p&gt;It’s easier to use an example to illustrate.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Disclosure&lt;/em&gt;: I read &lt;a href=&quot;https://www.raywenderlich.com/107439/uicollectionview-custom-layout-tutorial-pinterest&quot;&gt;raywenderlich tutorial&lt;/a&gt; to come up with this guide. We will create a pinterest layout that looks like &lt;a href=&quot;https://koenig-media.raywenderlich.com/uploads/2015/05/customlayout-calculations1-667x500.png&quot;&gt;this&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The changes that I had was:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Use Swift 3&lt;/li&gt;
  &lt;li&gt;Delegate to provide the cell’s height (instead of separately the heights of photo and annotation)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Similarly, we will keep things simple to have only 2 columns, and no annotation and decoration views.&lt;/p&gt;

&lt;h2 id=&quot;layout-delegate&quot;&gt;Layout Delegate&lt;/h2&gt;

&lt;p&gt;Let’s start with &lt;code class=&quot;highlighter-rouge&quot;&gt;PinterestLayoutDelegate&lt;/code&gt;, the delegate protocol that provides &lt;code class=&quot;highlighter-rouge&quot;&gt;PinterestLayout&lt;/code&gt; (see later) the height, given the width.&lt;/p&gt;

&lt;p&gt;Although the layout role is to set the frames - size and position - it would still need help for attributes that &lt;strong&gt;depends on the content&lt;/strong&gt;. Remember: The layout does NOT know the content.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PinterestLayoutDelegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;collectionView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;collectionView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UICollectionView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;heightForCellAt&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;indexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IndexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;withWidth&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGFloat&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This delegate is like data source protocol, which your view controller must implement to return the height that is needed for the cell. In the case of Pinterest, we want cells height to be accordingly to the image aspect ratio.&lt;/p&gt;

&lt;p&gt;Let’s now look at the beef of the subject - &lt;code class=&quot;highlighter-rouge&quot;&gt;PinterestLayout&lt;/code&gt;. We are going to break down the class into a few parts.&lt;/p&gt;

&lt;h2 id=&quot;the-data&quot;&gt;The Data&lt;/h2&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PinterestLayout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UICollectionViewLayout&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;weak&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;delegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PinterestLayoutDelegate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;numberOfColumns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;cache&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;UICollectionViewLayoutAttributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]()&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;contentHeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGFloat&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;contentWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGFloat&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;insets&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;collectionView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contentInset&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;collectionView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bounds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;insets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The delegate is obvious. In your view controller, you have to assign the delegate, and implement the method to provide the height, as said in the previous section.&lt;/p&gt;

&lt;p&gt;We hardcoded the number of columns to 2, for simplicity. But it could change depending on the device width.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cache&lt;/code&gt; is a collection of &lt;code class=&quot;highlighter-rouge&quot;&gt;UICollectionViewLayoutAttributes&lt;/code&gt;. The cache is to help to optimize the tedious calculation in &lt;code class=&quot;highlighter-rouge&quot;&gt;prepare()&lt;/code&gt; (next section).&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;contentHeight&lt;/code&gt; is the total height of the layout that we will calculate, in &lt;code class=&quot;highlighter-rouge&quot;&gt;prepare()&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;prepare-the-layout&quot;&gt;Prepare The Layout&lt;/h2&gt;

&lt;p&gt;The gist of a custom layout lies in &lt;code class=&quot;highlighter-rouge&quot;&gt;prepare()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Collection view will call &lt;code class=&quot;highlighter-rouge&quot;&gt;prepare()&lt;/code&gt; to give the layout object the chance &lt;a href=&quot;https://developer.apple.com/reference/uikit/uicollectionviewlayout/1617752-prepare&quot;&gt;to perform initial computations&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In our case, our goal is to create all the &lt;code class=&quot;highlighter-rouge&quot;&gt;UICollectionViewLayoutAttributes&lt;/code&gt; for each cell.&lt;/p&gt;

&lt;p&gt;We loop for each item in the collection view, and calculate the (x, y) coordinate to place them. &lt;code class=&quot;highlighter-rouge&quot;&gt;UICollectionViewLayoutAttributes&lt;/code&gt; is created with the frame, and added to &lt;code class=&quot;highlighter-rouge&quot;&gt;cache&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You would customize this method for the layout you want.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PinterestLayout&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;prepare&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Reset&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;UICollectionViewLayoutAttributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;contentHeight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;columnWidth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contentWidth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numberOfColumns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// xOffset tracks for each column. This is fixed, unlike yOffset.&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;xOffset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;CGFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;column&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numberOfColumns&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;xOffset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;CGFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;column&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;columnWidth&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// yOffset tracks the last y-offset in each column&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;yOffset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;CGFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;repeating&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numberOfColumns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Start calculating for each item&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;collectionView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;numberOfItems&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;inSection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;indexPath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IndexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;columnWidth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cellPadding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;cellHeight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delegate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;collectionView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collectionView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;heightForCellAt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;indexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;withWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cellHeight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;2*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cellPadding&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;// Find the shortest column to place this item&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;shortestColumn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;minYOffset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yOffset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;shortestColumn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yOffset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minYOffset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;??&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;frame&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGRect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xOffset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shortestColumn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yOffset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shortestColumn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;columnWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;insetFrame&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;insetBy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;dx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cellPadding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cellPadding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;// Create our attributes&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;attributes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UICollectionViewLayoutAttributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;forCellWith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;indexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;insetFrame&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;// Updates&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;contentHeight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contentHeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;yOffset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shortestColumn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yOffset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shortestColumn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;xOffset&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;yOffset&lt;/code&gt; are arrays to keep track of the last (x, y), for each column.&lt;/p&gt;

&lt;h2 id=&quot;other-layout-methods&quot;&gt;Other Layout Methods&lt;/h2&gt;

&lt;p&gt;There are some other methods that the collection view will ask from your layout object. You can return from the cache.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PinterestLayout&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;layoutAttributesForElements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;rect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGRect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;UICollectionViewLayoutAttributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;layoutAttributes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;UICollectionViewLayoutAttributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attributes&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;intersects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;layoutAttributes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;layoutAttributes&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;layoutAttributesForItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;indexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IndexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UICollectionViewLayoutAttributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attributes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;indexPath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;indexPath&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;what-about-autolayout&quot;&gt;What about autolayout?&lt;/h2&gt;

&lt;p&gt;You don’t use autolayout for layout object.&lt;/p&gt;

&lt;p&gt;It is “manual layout”, that is to calculate the frames, like good old days.&lt;/p&gt;

&lt;p&gt;But you still can use autolayout for WITHIN the cells, supplementary and decoration views.&lt;/p&gt;
</description>
        <pubDate>Sun, 26 Mar 2017 11:10:24 +0800</pubDate>
        <link>http://samwize.com/2017/03/26/guide-to-uicollectionview-with-custom-layout/</link>
        <guid isPermaLink="true">http://samwize.com/2017/03/26/guide-to-uicollectionview-with-custom-layout/</guid>
        
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>Why I don’t build apps for friends anymore</title>
        <description>&lt;p&gt;Over the past 10 years, I’ve lots of friends and classmates say to me:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“I have a great idea for an app. How about we work together?”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I’m happy that they’re thinking about creating something that they want to use or make a business out of it.&lt;/p&gt;

&lt;p&gt;But often, all I can do for them is say:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“As a friend, I’d love to hear about your idea and give advice on mobile app development. But most likely, I wouldn’t be able to develop for you.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Why?&lt;/p&gt;

&lt;h2 id=&quot;ideas-are-not-enough&quot;&gt;1. Ideas are not enough&lt;/h2&gt;

&lt;p&gt;Often, the main motivation people have for creating an app is because they have an idea.&lt;/p&gt;

&lt;p&gt;They think the idea is cool.&lt;/p&gt;

&lt;p&gt;My positive reply often is,&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Yes, this is a good idea. There will be people who would like — maybe even need — to use your app.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Then my less positive reply goes,&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Who is the closest competitor to your idea? Why do you think they didn’t succeed?”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;These are the most important questions in grinding an idea.&lt;/p&gt;

&lt;p&gt;This is also my polite way of saying: &lt;strong&gt;Ideas Are Cheap&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Ideas are nothing. Someone in this world must have the same idea, of some variation to yours. &lt;a href=&quot;http://just2me.com/2014/03/13/steal-like-artist/&quot;&gt;Nothing is original&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You should not start a company just because of an idea.&lt;/p&gt;

&lt;h2 id=&quot;startups-are-hard&quot;&gt;2. Startups are hard&lt;/h2&gt;

&lt;p&gt;To &lt;strong&gt;succeed&lt;/strong&gt; with one is even &lt;strong&gt;harder&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;And even if you do succeed, it will &lt;strong&gt;take many years&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;I speak from 10 years of experience with 2 startups.&lt;/p&gt;

&lt;p&gt;The first startup: I spent 7 years, as a founding member. The company is now 9 years old, yet it’s still struggling to become profitable. The only reason it hasn’t died is because the investor is also the co-founder, so think how much he has to lose first. How much stress can he endure?&lt;/p&gt;

&lt;p&gt;The second startup: I joined after their Series A funding. It’s now 3 years old and recently had Series B, thus providing an extra year’s runway. Maintaining hockey stick growth is not easy, and the end of a runway is always in sight.&lt;/p&gt;

&lt;p&gt;I don’t know about you. But I don’t have that many 10 years blocks of time ahead of me.&lt;/p&gt;

&lt;p&gt;So I have to choose wisely on which path to take.&lt;/p&gt;

&lt;h2 id=&quot;it-isnt-worth-risking-our-friendship&quot;&gt;3. It isn’t worth risking our friendship&lt;/h2&gt;

&lt;p&gt;Any conflict between you and your friend is compounded when you become co-workers.&lt;/p&gt;

&lt;p&gt;Mobile app development &lt;a href=&quot;http://www.formotus.com/14018/blog-mobility/figuring-the-costs-of-custom-mobile-business-app-development&quot;&gt;costs much more than you think&lt;/a&gt;. I can’t charge you less (let alone do things for free!) just because you’re my friend.&lt;/p&gt;

&lt;p&gt;And if the business fails (&lt;a href=&quot;http://www.forbes.com/sites/neilpatel/2015/01/16/90-of-startups-will-fail-heres-what-you-need-to-know-about-the-10/&quot;&gt;90% will&lt;/a&gt;), then the friendship will be awkward. You will have lost a lot of money — some of which will have gone to pay me.&lt;/p&gt;

&lt;p&gt;When things fail, people find reasons. And many times, it’s natural to blame the developer. People will say: &lt;strong&gt;the product wasn’t good enough&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;All eyes will be on the developer, but that’s not really fair.&lt;/p&gt;

&lt;p&gt;I value friendship, and all risks considered, I don’t sacrifice it.&lt;/p&gt;

&lt;h2 id=&quot;unequal-bargains&quot;&gt;4. Unequal bargains&lt;/h2&gt;

&lt;p&gt;In a tech startup, you need at least one technical person — the CTO or lead developer.&lt;/p&gt;

&lt;p&gt;The “idea person” often becomes the “CEO” and promises to cover the marketing, sales, and fundraising.&lt;/p&gt;

&lt;p&gt;It’s fair to split such responsibilities between two cofounders.&lt;/p&gt;

&lt;p&gt;Yet, very often, my “idea person” friend is one with no experience in the area they handle. Neither has he worked in a startup before. And if they try to drive the product, it could get even uglier.&lt;/p&gt;

&lt;p&gt;Having two co-founders with &lt;strong&gt;unequal experience and skill&lt;/strong&gt; is a mismatch.&lt;/p&gt;

&lt;h2 id=&quot;i-love-startups-but-i-love-friends-even-more&quot;&gt;I love startups. But I love friends even more.&lt;/h2&gt;

&lt;p&gt;If only I had a friend who understood the risks startups face, had the experience to execute, and was psychologically prepared for failure.&lt;/p&gt;

&lt;p&gt;Until that magical person comes along, I’m going to stay focused on working for professional acquaintances, and tell any friends who get the startup itch to do the same.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;This is the first post in samwize.com where I share a non-technical article. Hope you like it (: It is also &lt;a href=&quot;https://medium.freecodecamp.com/why-i-avoid-developing-app-idea-for-friends-58dbc16959ba&quot;&gt;published&lt;/a&gt; in freecodecamp.&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 23 Feb 2017 22:21:09 +0800</pubDate>
        <link>http://samwize.com/2017/02/23/why-i-avoid-developing-app-idea-for-friends/</link>
        <guid isPermaLink="true">http://samwize.com/2017/02/23/why-i-avoid-developing-app-idea-for-friends/</guid>
        
        
        <category>startup</category>
        
      </item>
    
      <item>
        <title>Migrating an iOS Project From Objective-C to Swift</title>
        <description>&lt;h1 id=&quot;uiapplicationdelegate&quot;&gt;UIApplicationDelegate&lt;/h1&gt;

&lt;p&gt;Start with the app delegate.&lt;/p&gt;

&lt;p&gt;Add a &lt;code class=&quot;highlighter-rouge&quot;&gt;AppDelegate.swift&lt;/code&gt;, and mark the class with &lt;code class=&quot;highlighter-rouge&quot;&gt;@UIApplicationMain&lt;/code&gt; attribute.&lt;/p&gt;

&lt;p&gt;Remove &lt;code class=&quot;highlighter-rouge&quot;&gt;main.m&lt;/code&gt;, because it is now unnecessary. With the use of &lt;code class=&quot;highlighter-rouge&quot;&gt;@UIApplicationMain&lt;/code&gt;, the target now knows the entry point.&lt;/p&gt;

&lt;h1 id=&quot;adding-your-first-swift&quot;&gt;Adding your first Swift&lt;/h1&gt;

&lt;p&gt;When you add your first Swift file (like &lt;code class=&quot;highlighter-rouge&quot;&gt;AppDelegate.swift&lt;/code&gt; above), Xcode will prompt to add a bridging header.&lt;/p&gt;

&lt;p&gt;Add the bridging header.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;AwesomeApp-Bridging-Header.h&lt;/code&gt; is the place where you add your existing .h files, exposing them to Swift (as and when needed).&lt;/p&gt;

&lt;h2 id=&quot;using-objective-c-in-swift&quot;&gt;1. Using Objective-C in Swift&lt;/h2&gt;

&lt;p&gt;We come to the first of the 2 important parts in &lt;a href=&quot;https://developer.apple.com/library/content/documentation/Swift/Conceptual/BuildingCocoaApps/InteractingWithObjective-CAPIs.html&quot;&gt;interoperability&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To use your existing Objective-C, there are a few things to do:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Bridging header to expose the Objective-C classes&lt;/li&gt;
  &lt;li&gt;Declare nullability in the Objective-C files&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We have mentioned (1) in the section above.&lt;/p&gt;

&lt;p&gt;For (2), the reason is because Swift is strict on &lt;a href=&quot;https://developer.apple.com/library/content/documentation/Swift/Conceptual/BuildingCocoaApps/InteractingWithObjective-CAPIs.html#//apple_ref/doc/uid/TP40014216-CH4-ID45&quot;&gt;nullability&lt;/a&gt;. Can an object be optional, or never?&lt;/p&gt;

&lt;p&gt;In Objective-C days, way before Swfit was born, nullability was never explicit. You would have seen &lt;code class=&quot;highlighter-rouge&quot;&gt;EXEC_BAD_ACCESS&lt;/code&gt;, and many times the reason is because the object is nil, when is should not be.&lt;/p&gt;

&lt;p&gt;Swift make our code safer with explicit nullability.&lt;/p&gt;

&lt;p&gt;Hence, you need to make Objective-C code be explicit, so that Swift can use safely:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;nullable&lt;/code&gt; - An optional&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;nonnull&lt;/code&gt; - Never an optional&lt;/li&gt;
  &lt;li&gt;Otherwise, they are implicitly unwrapped optional (crash if nil!)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are also 2 convenient macros to help you: &lt;code class=&quot;highlighter-rouge&quot;&gt;NS_ASSUME_NONNULL_BEGIN&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;NS_ASSUME_NONNULL_END&lt;/code&gt;. Any properties between the macros are considered &lt;code class=&quot;highlighter-rouge&quot;&gt;nonnull&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;using-swift-in-objective-c&quot;&gt;2. Using Swift in Objective-C&lt;/h2&gt;

&lt;p&gt;This is the second part, if you still need to write &lt;em&gt;more&lt;/em&gt; Objective-C.&lt;/p&gt;

&lt;p&gt;To use the new Swift code in existing Objective-C, you have to&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#import &quot;AwesomeApp-Swift.h&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This will expose all Swift code.&lt;/p&gt;

&lt;p&gt;Don’t be alarm that you cannot find the aforementioned .h file in your project. It is a auto generated header from your Swift code.&lt;/p&gt;
</description>
        <pubDate>Fri, 10 Feb 2017 19:09:55 +0800</pubDate>
        <link>http://samwize.com/2017/02/10/migrating-an-ios-project-from-objective-c-to-swift/</link>
        <guid isPermaLink="true">http://samwize.com/2017/02/10/migrating-an-ios-project-from-objective-c-to-swift/</guid>
        
        
        <category>Swift</category>
        
      </item>
    
      <item>
        <title>Calling a View Controller Function From React Native</title>
        <description>&lt;p&gt;When you mix React Native with existing Swift/Objective-C code base, it gets complex for even the simplest of tasks.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://engineering.instagram.com/react-native-at-instagram-dd828a9a90c7&quot;&gt;Instagram admits the challenge of a hybrid app&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;the-set-up&quot;&gt;The Set Up&lt;/h2&gt;

&lt;p&gt;My view controller is written in &lt;strong&gt;Swift&lt;/strong&gt;, and creates the &lt;code class=&quot;highlighter-rouge&quot;&gt;RCTRootView&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;viewDidLoad&lt;/code&gt;. It managers the react native view.&lt;/p&gt;

&lt;p&gt;I was trying to call a function I have in my view controller, from my JavaScript code.&lt;/p&gt;

&lt;h2 id=&quot;the-long-documentation-again&quot;&gt;The Long Documentation, Again&lt;/h2&gt;

&lt;p&gt;React Native provided a long documentation separated across three pages:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://facebook.github.io/react-native/docs/communication-ios.html&quot;&gt;Inter Communication&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://facebook.github.io/react-native/docs/native-modules-ios.html&quot;&gt;Native Modules&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://facebook.github.io/react-native/docs/native-components-ios.html&quot;&gt;Native UI Components&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It wasn’t clear nor simple.&lt;/p&gt;

&lt;p&gt;Hope I can clear it up here (:&lt;/p&gt;

&lt;h2 id=&quot;the-thing-about-swift&quot;&gt;The Thing about Swift&lt;/h2&gt;

&lt;p&gt;In the &lt;a href=&quot;http://facebook.github.io/react-native/docs/native-modules-ios.html#exporting-swift&quot;&gt;very last section&lt;/a&gt;, the documentation says this about using Swift:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Swift doesn’t have support for macros (which React Native requires for exposing native modules and methods)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It is necessary that you have some Objective-C code because the macros provided only works with Objective-C.&lt;/p&gt;

&lt;p&gt;Example: &lt;code class=&quot;highlighter-rouge&quot;&gt;RCT_EXTERN_MODULE&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;RCT_EXTERN_METHOD&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If you use Swfit, then you need to deal with using &lt;a href=&quot;https://developer.apple.com/library/content/documentation/Swift/Conceptual/BuildingCocoaApps/MixandMatch.html&quot;&gt;bridging headers and stuff&lt;/a&gt;. Do not confuse this &lt;strong&gt;Swift and Objective-C bridging&lt;/strong&gt; with &lt;strong&gt;React Native and Objective-C bridging&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;There are just many bridges to cross.&lt;/p&gt;

&lt;h2 id=&quot;how-bridging-works&quot;&gt;How Bridging Works&lt;/h2&gt;

&lt;p&gt;In the &lt;a href=&quot;http://facebook.github.io/react-native/docs/native-modules-ios.html#ios-calendar-module-example&quot;&gt;very beginning section&lt;/a&gt;, it gives a hint about how the bridge (to React native) happens:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The CalendarManager module is instantiated on the Objective-C side using a [CalendarManager new] call.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;See how the JavaScript calls the method.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;NativeModules&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;react-native&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CalendarManager&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;NativeModules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CalendarManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;CalendarManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;Birthday Party&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;4 Privet Drive, Surrey&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;It &lt;em&gt;looks like&lt;/em&gt; the module is using a &lt;strong&gt;singleton&lt;/strong&gt; pattern. It is NOT!&lt;/p&gt;

&lt;p&gt;It is calling with a newly created object.&lt;/p&gt;

&lt;p&gt;It is confirmed in the &lt;a href=&quot;http://facebook.github.io/react-native/docs/native-components-ios.html#properties&quot;&gt;section on Native UI Components&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Native views are created and manipulated by subclasses of RCTViewManager. These subclasses are similar in function to view controllers, but are essentially singletons - only one instance of each is created by the bridge.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And finally, in a &lt;a href=&quot;http://facebook.github.io/react-native/docs/communication-ios.html#calling-native-functions-from-react-native-native-modules&quot;&gt;separate place&lt;/a&gt;, it warns the limitation when calling native functions from React Native (native modules):&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The fact that native modules are singletons limits the mechanism in context of embedding.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you still not clear what the problem entails.. let me explain with our view controller example.&lt;/p&gt;

&lt;p&gt;We have an instance of our view controller. When JavaScript invokes a method (see &lt;code class=&quot;highlighter-rouge&quot;&gt;CalendarManager&lt;/code&gt; example), it will use the singleton instance, not the actual instance! This is limiting because you need an identifier to the actual instance, using perhaps a number or string, then pass it to the singleton instance, for it to identiy the actual instance.&lt;/p&gt;

&lt;p&gt;Still confused? Look at how it is implemented in code in my weak attempt #1.&lt;/p&gt;

&lt;h2 id=&quot;attempt-1&quot;&gt;Attempt #1&lt;/h2&gt;

&lt;p&gt;Let’s start with our view controller:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AwesomeViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIViewController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;AwesomeManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;viewController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;
        
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;rootView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;RCTRootView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;bridge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bridge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;moduleName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;AwesomeScreen&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;initialProperties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rootView&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;// The fun&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We are using the view controller &lt;code class=&quot;highlighter-rouge&quot;&gt;viewDidLoad&lt;/code&gt; to create the &lt;code class=&quot;highlighter-rouge&quot;&gt;RCTRootView&lt;/code&gt; (init your bridge accordingly).&lt;/p&gt;

&lt;p&gt;The trick here is the part on &lt;code class=&quot;highlighter-rouge&quot;&gt;AwesomeManager.viewController = self&lt;/code&gt;. This is where the view controller tell the “manager” that &lt;em&gt;you may control me&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Let’s look at the “manager” code, in Swift:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;@objc(AwesomeManager)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AwesomeManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSObject&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;viewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AwesomeViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;@objc&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;viewController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AwesomeManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;viewController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;dispatch_async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dispatch_get_main_queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;viewController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;bar&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;attempt-2-&quot;&gt;Attempt #2 ?&lt;/h2&gt;

&lt;p&gt;Ah, I’m exhausted. Gonna leave this till next time (:&lt;/p&gt;

&lt;p&gt;You may attempt and comment below?&lt;/p&gt;
</description>
        <pubDate>Thu, 09 Feb 2017 14:02:35 +0800</pubDate>
        <link>http://samwize.com/2017/02/09/calling-a-view-controller-function-from-react-native/</link>
        <guid isPermaLink="true">http://samwize.com/2017/02/09/calling-a-view-controller-function-from-react-native/</guid>
        
        
        <category>React Native</category>
        
      </item>
    
      <item>
        <title>Why I Hate React Native</title>
        <description>&lt;p&gt;I have spent 2 weeks using React Native for an &lt;strong&gt;existing iOS app&lt;/strong&gt;, building a new feature that could be summed up as - providing a list of images which can be tapped on.&lt;/p&gt;

&lt;p&gt;It is an easy task that I could do in a day with the beautiful Swift and familiar &lt;code class=&quot;highlighter-rouge&quot;&gt;UIKit&lt;/code&gt; framework. But things gets hairy with React Native..&lt;/p&gt;

&lt;p&gt;React Native is changing rapidly, so what I mention here could only be relevant as of Jan 2017.&lt;/p&gt;

&lt;h2 id=&quot;what-i-like&quot;&gt;What I Like&lt;/h2&gt;

&lt;p&gt;Let’s start with what I like because that will be short.&lt;/p&gt;

&lt;p&gt;My first impression with it is awesome. It is refreshing. Going through the Hello World example and more is enlightening.&lt;/p&gt;

&lt;p&gt;Then there is code push. No more waiting for app review.&lt;/p&gt;

&lt;p&gt;So I went on to write a &lt;a href=&quot;http://samwize.com/2017/01/09/react-native-for-ios-swift-developer/&quot;&gt;basic guide&lt;/a&gt; and about &lt;a href=&quot;http://samwize.com/2017/01/19/guide-to-integrating-codepush-for-ios-react-native-project/&quot;&gt;CodePush&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;mixing-react-native-with-true-native&quot;&gt;Mixing React Native with True Native&lt;/h2&gt;

&lt;p&gt;By True Native, I am referring to all the frameworks provided by iOS: &lt;code class=&quot;highlighter-rouge&quot;&gt;UIKit&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Foundation&lt;/code&gt;, etc&lt;/p&gt;

&lt;p&gt;It could be just me, because I have an existing code base that uses True Native. If you start a project from scratch using pure React Native, most likely you will not have the problem.&lt;/p&gt;

&lt;p&gt;But if you are like me, you have to deal with extra problems.&lt;/p&gt;

&lt;p&gt;The first is communication between the 2 platforms. &lt;a href=&quot;http://facebook.github.io/react-native/docs/communication-ios.html&quot;&gt;Quoted&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;But, when we mix React Native and native components, we need some special, cross-language mechanisms that would allow us to pass information between them.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And this cross-language (or cross-platform) mechanism is very messy.&lt;/p&gt;

&lt;p&gt;They provided a few ways, but none is beautiful.&lt;/p&gt;

&lt;p&gt;You will get your hands dirty with &lt;strong&gt;Objective-C&lt;/strong&gt; because React Native require macro to expose a module or function.&lt;/p&gt;

&lt;h2 id=&quot;poor-documentation&quot;&gt;Poor Documentation&lt;/h2&gt;

&lt;p&gt;It is written poorly, and lacking for some classes such as emitters.&lt;/p&gt;

&lt;h2 id=&quot;deprecated-really&quot;&gt;Deprecated, really?&lt;/h2&gt;

&lt;p&gt;I encountered this &lt;a href=&quot;https://github.com/facebook/react-native/issues/8714&quot;&gt;issue&lt;/a&gt; where they deprecate a method &lt;code class=&quot;highlighter-rouge&quot;&gt;sendAppEventWithName&lt;/code&gt;, and recommended to use a subclass of &lt;code class=&quot;highlighter-rouge&quot;&gt;RCTEventEmitter&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Yet, their &lt;a href=&quot;http://facebook.github.io/react-native/docs/native-modules-ios.html#sending-events-to-javascript&quot;&gt;documentation&lt;/a&gt; is still using the deprecated method.&lt;/p&gt;

&lt;p&gt;Being a good developer, I use the new way. But alas! The new way didn’t work. It could be either one the reason: I do not know how to use because there is no documentation, or it has a bug.&lt;/p&gt;

&lt;p&gt;I believe there is a bug.&lt;/p&gt;

&lt;h2 id=&quot;buggy&quot;&gt;Buggy&lt;/h2&gt;

&lt;p&gt;There are lots of bugs.&lt;/p&gt;

&lt;p&gt;I filed an &lt;a href=&quot;https://github.com/facebook/react-native/issues/12049&quot;&gt;issue&lt;/a&gt; that is to do with a &lt;code class=&quot;highlighter-rouge&quot;&gt;Touchable&lt;/code&gt; being fired when it’s parent (a &lt;code class=&quot;highlighter-rouge&quot;&gt;UIScrollView&lt;/code&gt;) is being scrolled.&lt;/p&gt;

&lt;p&gt;Somehow I believe my issue will be of a lesser priority because I am mixing a true native &lt;code class=&quot;highlighter-rouge&quot;&gt;UIScrollView&lt;/code&gt; with react native component.&lt;/p&gt;

&lt;h2 id=&quot;time-wasted&quot;&gt;Time Wasted&lt;/h2&gt;

&lt;p&gt;As an early-user of a piece of programming platform, you will use much of your time to help the community. Good if you have the time.&lt;/p&gt;

&lt;p&gt;Otherwise, you will be wasting precious time.&lt;/p&gt;
</description>
        <pubDate>Tue, 24 Jan 2017 17:27:17 +0800</pubDate>
        <link>http://samwize.com/2017/01/24/why-i-hate-react-native/</link>
        <guid isPermaLink="true">http://samwize.com/2017/01/24/why-i-hate-react-native/</guid>
        
        
        <category>React Native</category>
        
      </item>
    
      <item>
        <title>Guide to Integrating CodePush for iOS React Native Project</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://microsoft.github.io/code-push/&quot;&gt;CodePush&lt;/a&gt; is a wonderful technology to make INSTANT changes to your app.&lt;/p&gt;

&lt;p&gt;The problem with CodePush documentation is that it is toooo long, because it has to cover for multiple platforms. I ran into a few pitfalls, and missed some steps, because of that.&lt;/p&gt;

&lt;p&gt;So this post will only cover for an iOS, React native app.&lt;/p&gt;

&lt;h2 id=&quot;install-and-setup-the-cli&quot;&gt;Install and Setup the CLI&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Install the CLI
npm install -g code-push-cli

# Register for an account via github oauth
code-push register

# Register your app. We call it AwesomeApp.
code-push app add AwesomeApp
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;setup-react-native-project&quot;&gt;Setup React Native Project&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cd&lt;/code&gt; to your React Native project and install the “plugin”.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install --save react-native-code-push@latest
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Next, setup the &lt;code class=&quot;highlighter-rouge&quot;&gt;sync&lt;/code&gt; for your component. There are more &lt;a href=&quot;https://github.com/Microsoft/react-native-code-push#codepush&quot;&gt;options&lt;/a&gt; on the syncing of the code eg. frequency, install etc&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AwesomeApp&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;codePushOptions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
  &lt;span class=&quot;na&quot;&gt;checkFrequency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;codePush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CheckFrequency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ON_APP_RESUME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
  &lt;span class=&quot;na&quot;&gt;installMode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;codePush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;InstallMode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ON_NEXT_RESUME&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;AwesomeApp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;codePush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;codePushOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AwesomeApp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AwesomeApp&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;My configuration for above is to check for updates when app goes into foreground, and then install when it goes into foreground &lt;strong&gt;again&lt;/strong&gt;. I belive that’s good enough.&lt;/p&gt;

&lt;p&gt;Pitfall: I made the mistake of writing &lt;code class=&quot;highlighter-rouge&quot;&gt;export default class AwesomeApp&lt;/code&gt; at first. Because &lt;code class=&quot;highlighter-rouge&quot;&gt;codePush&lt;/code&gt; wraps the component, you have to export it after that.&lt;/p&gt;

&lt;h2 id=&quot;setup-ios-in-xcode&quot;&gt;Setup iOS in Xcode&lt;/h2&gt;

&lt;p&gt;Next, you need to setup the project in Xcode.&lt;/p&gt;

&lt;p&gt;Add the pod to &lt;code class=&quot;highlighter-rouge&quot;&gt;Podfile&lt;/code&gt;, and then &lt;code class=&quot;highlighter-rouge&quot;&gt;pod install&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Change your path accordingly. My React Native source is in ./react
pod &#39;CodePush&#39;, :path =&amp;gt; &#39;./react/node_modules/react-native-code-push&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then in the code where you use the &lt;code class=&quot;highlighter-rouge&quot;&gt;NSURL&lt;/code&gt;, change it like this:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CodePush&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sourceURLForBridge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;bridge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;RCTBridge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSURL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cp&quot;&gt;#if DEBUG&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;http://localhost:8081/index.ios.bundle?platform=ios&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;cp&quot;&gt;#else&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CodePush&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;bundleURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;cp&quot;&gt;#endif&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I have a &lt;code class=&quot;highlighter-rouge&quot;&gt;sourceURLForBridge&lt;/code&gt; function, which will return the appropriate &lt;code class=&quot;highlighter-rouge&quot;&gt;NSURL&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;RCTRootView&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Using preprocessor/macros, the code will use the packager running on &lt;code class=&quot;highlighter-rouge&quot;&gt;localhost:8081&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;DEBUG&lt;/code&gt; build configuration, and using CodePush URL for &lt;code class=&quot;highlighter-rouge&quot;&gt;RELEASE&lt;/code&gt; (or otherwise).&lt;/p&gt;

&lt;h2 id=&quot;setup-codepush-keys-in-xcode&quot;&gt;Setup CodePush Keys in Xcode&lt;/h2&gt;

&lt;p&gt;When you setup code-push CLI, in &lt;code class=&quot;highlighter-rouge&quot;&gt;code-push app add AwesomeApp&lt;/code&gt;, you were given 2 keys - Staging and Production.&lt;/p&gt;

&lt;p&gt;You have to add these keys to your iOS project.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Add to &lt;code class=&quot;highlighter-rouge&quot;&gt;Info.plist&lt;/code&gt; with the key &lt;code class=&quot;highlighter-rouge&quot;&gt;CodePushDeploymentKey&lt;/code&gt;, and the value &lt;code class=&quot;highlighter-rouge&quot;&gt;$(CODEPUSH_KEY)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;In project Build Settings, “Add User-Defined Settings” with the key &lt;code class=&quot;highlighter-rouge&quot;&gt;CODEPUSH_KEY&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Expand &lt;code class=&quot;highlighter-rouge&quot;&gt;CODEPUSH_KEY&lt;/code&gt;, and under &lt;strong&gt;Release&lt;/strong&gt;, set to the CodePush &lt;strong&gt;Production&lt;/strong&gt; key&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The above is setup to only use CodePush production deployment.&lt;/p&gt;

&lt;p&gt;If you want to use a Staging deployment, you will have to add another build configuration. Go to Project &amp;gt; Info &amp;gt; Configurations and duplicate Release, and rename it to &lt;strong&gt;Staging&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Then similarly like you did for Production key in Build Settings, set &lt;code class=&quot;highlighter-rouge&quot;&gt;CODEPUSH_KEY&lt;/code&gt; for &lt;strong&gt;Staging&lt;/strong&gt; to CodePush staging key.&lt;/p&gt;

&lt;p&gt;To recap, you have now 3 build configurations:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Debug - Use packager localhost:8081&lt;/li&gt;
  &lt;li&gt;Release - Use CodePush Production&lt;/li&gt;
  &lt;li&gt;Staging - Use COdePush Staging&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;push-live-code&quot;&gt;Push Live Code&lt;/h2&gt;

&lt;p&gt;At last, we are ready to push live code! Let’s demo how you do for production.&lt;/p&gt;

&lt;p&gt;Build the iOS app with Release build configuration (check your scheme), and run in Simulator or device.&lt;/p&gt;

&lt;p&gt;While you have not yet push any code to Production, the app still runs fine, because for the first run, it will use the local main.jsbundle.&lt;/p&gt;

&lt;p&gt;Make some changes to &lt;code class=&quot;highlighter-rouge&quot;&gt;AwesomeApp&lt;/code&gt; now. Perhaps change a &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;Text&amp;gt;&lt;/code&gt;? Or a color?&lt;/p&gt;

&lt;p&gt;Then push it:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;code-push release-react AwesomeApp ios -d Production --plistFile &quot;../AwesomeApp/Info.plist&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;By default, -d is Staging, and plist is in ./ios. You may change as necessary.&lt;/p&gt;

&lt;p&gt;Bring the app to foreground, and it should still be the same (though it has now fetched the update).&lt;/p&gt;

&lt;p&gt;Bring the app to background, then foreground again, and viola! It will install the new code and reflect the changes!&lt;/p&gt;

&lt;h2 id=&quot;pitfall-not-getting-updates&quot;&gt;Pitfall: Not Getting Updates&lt;/h2&gt;

&lt;p&gt;There are quite some &lt;a href=&quot;https://microsoft.github.io/code-push/docs/react-native.html#link-13&quot;&gt;pitfalls&lt;/a&gt;, and the long documentation doesn’t help.&lt;/p&gt;

&lt;p&gt;I hope this guide has been more concise (:&lt;/p&gt;

&lt;p&gt;If you are not getting the update,&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;make sure the version of the iOS app (in &lt;code class=&quot;highlighter-rouge&quot;&gt;Info.plist&lt;/code&gt;), matches that when you &lt;a href=&quot;https://github.com/Microsoft/code-push/blob/master/cli/README.md#releasing-updates-general&quot;&gt;code push with targetBinaryVersion&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;make sure the app is using &lt;code class=&quot;highlighter-rouge&quot;&gt;CodePush.bundleURL()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;make sure the keys are correct, and you deploy production/staging correctly&lt;/li&gt;
  &lt;li&gt;debug with &lt;code class=&quot;highlighter-rouge&quot;&gt;code-push debug ios&lt;/code&gt; and run the simulator&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 19 Jan 2017 16:55:28 +0800</pubDate>
        <link>http://samwize.com/2017/01/19/guide-to-integrating-codepush-for-ios-react-native-project/</link>
        <guid isPermaLink="true">http://samwize.com/2017/01/19/guide-to-integrating-codepush-for-ios-react-native-project/</guid>
        
        
        <category>React Native</category>
        
      </item>
    
  </channel>
</rss>
