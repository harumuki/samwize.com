<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>@samwize</title>
    <description>¯\_(ツ)_/¯
</description>
    <link>http://samwize.com/</link>
    <atom:link href="http://samwize.com/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Fri, 18 Nov 2016 17:28:39 +0800</pubDate>
    <lastBuildDate>Fri, 18 Nov 2016 17:28:39 +0800</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>Never to Have Feelings for Your Code</title>
        <description>&lt;p&gt;As a developer, never to have feelings for your code.&lt;/p&gt;

&lt;p&gt;As a designer, never to have feelings for your mockups.&lt;/p&gt;

&lt;p&gt;As a product manager, never to have feelings for your roadmap.&lt;/p&gt;

&lt;p&gt;Never to have attachment to them, so that you can discard them, anytime.&lt;/p&gt;
</description>
        <pubDate>Thu, 17 Nov 2016 14:39:44 +0800</pubDate>
        <link>http://samwize.com/2016/11/17/never-to-have-feelings-for-your-code/</link>
        <guid isPermaLink="true">http://samwize.com/2016/11/17/never-to-have-feelings-for-your-code/</guid>
        
        
        <category>Product</category>
        
      </item>
    
      <item>
        <title>Swift Package Manager Development Guide</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://samwize.com/2016/05/20/introduction-to-scripting-in-swift/&quot;&gt;Previously&lt;/a&gt;, we mentioned a Rome version of Cocoapods that you can use for your Swift scripts.&lt;/p&gt;

&lt;p&gt;Swift is moving fast, and now we have the official &lt;a href=&quot;https://swift.org/package-manager/&quot;&gt;Swift Package Manager&lt;/a&gt;!.&lt;/p&gt;

&lt;p&gt;Instead of writing a &lt;code class=&quot;highlighter-rouge&quot;&gt;Podfile&lt;/code&gt;, you write a &lt;code class=&quot;highlighter-rouge&quot;&gt;Package.swift&lt;/code&gt;, which is made up of Swift code declaring the dependencies.&lt;/p&gt;

&lt;p&gt;Then to get the dependencies:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;swift build
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;more-commands&quot;&gt;More Commands&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# If you prefer to setup with a template, including .gitignore, Sources and Tests
swift package init

# Generate the Xcode Project
swift package generate-xcodeproj

# Update
swift package update

# Show the dependency as a tree
swift package show-dependencies
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Mon, 14 Nov 2016 07:44:51 +0800</pubDate>
        <link>http://samwize.com/2016/11/14/swift-package-manager-development-guide/</link>
        <guid isPermaLink="true">http://samwize.com/2016/11/14/swift-package-manager-development-guide/</guid>
        
        
        <category>Swift</category>
        
      </item>
    
      <item>
        <title>To Build, or to Pay, for a Service/Tool</title>
        <description>&lt;h2 id=&quot;the-debate&quot;&gt;The Debate&lt;/h2&gt;

&lt;p&gt;Foo says: &lt;em&gt;We should build XXX ourselves, so that we have control and can easily maintain it.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Bar says: &lt;em&gt;We should pay YYY to get started quickly, thus providing us all the advanced features which we could take months to develop.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Many times, I come across arguments of building XXX vs paying YYY:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Build a push notifcation system vs using &lt;a href=&quot;https://onesignal.com&quot;&gt;OneSignal&lt;/a&gt;/etc&lt;/li&gt;
  &lt;li&gt;Manage your own service vs &lt;a href=&quot;https://aws.amazon.com&quot;&gt;AWS managed services&lt;/a&gt;/etc&lt;/li&gt;
  &lt;li&gt;Develop email client VS &lt;a href=&quot;http://mailchimp.com&quot;&gt;Mailchimp&lt;/a&gt;/etc&lt;/li&gt;
  &lt;li&gt;Host your own server hardware VS Google Compute/etc&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;both-are-right&quot;&gt;Both are Right&lt;/h2&gt;

&lt;p&gt;Their reasons are facts.&lt;/p&gt;

&lt;p&gt;There is nothing to counter argue on such factual reasons.&lt;/p&gt;

&lt;p&gt;Yet, I often hear counter arguments that starts off by disagreeing.&lt;/p&gt;

&lt;p&gt;There could be &lt;a href=&quot;http://just2me.com/2016/10/09/ego-is-the-enemy/&quot;&gt;ego&lt;/a&gt; at play. Or someone doesn’t know &lt;a href=&quot;http://just2me.com/2015/05/24/how-to-win-friends/&quot;&gt;how to win&lt;/a&gt; an argument.&lt;/p&gt;

&lt;h2 id=&quot;the-fair-middleground&quot;&gt;The Fair Middleground&lt;/h2&gt;

&lt;p&gt;We must consider the context in this order:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Who to use? Who to build? Who to maintain?&lt;/li&gt;
  &lt;li&gt;Do you have the luxury of time and resources to build?&lt;/li&gt;
  &lt;li&gt;Do you have the skillset to build?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The &lt;em&gt;who&lt;/em&gt; is especially important. The people determine the success of such undertaking.&lt;/p&gt;

&lt;p&gt;Usually, if you are a startup, the answer is to use a service.&lt;/p&gt;

&lt;p&gt;And, if you are a mature company with the resource to scale and optimize current processes, then you build your own service.&lt;/p&gt;

&lt;p&gt;There is no right or wrong, but a matter of evaluating your current situation from a fair middleground, without ego.&lt;/p&gt;
</description>
        <pubDate>Fri, 11 Nov 2016 12:07:43 +0800</pubDate>
        <link>http://samwize.com/2016/11/11/to-build-or-to-pay-for-a-service-tool/</link>
        <guid isPermaLink="true">http://samwize.com/2016/11/11/to-build-or-to-pay-for-a-service-tool/</guid>
        
        
        <category>Development</category>
        
      </item>
    
      <item>
        <title>Error: Address/Port Already in Use</title>
        <description>&lt;p&gt;I have encountered many times trying to run a service that use an existing port.&lt;/p&gt;

&lt;p&gt;For example, my &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jekyll 3.1.6 | Error:  Ad dress already in use - bind(2) for 127.0.0.1:4000
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This is because my jekyll process somehow wasn’t killed properly, and then I tried to run another process using the same port.&lt;/p&gt;

&lt;p&gt;To solve, kill the process that is using the port (eg 4000):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;lsof -i :4000
kill -9 &amp;lt;PID&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Mon, 07 Nov 2016 12:36:19 +0800</pubDate>
        <link>http://samwize.com/2016/11/07/error-address-port-already-in-use/</link>
        <guid isPermaLink="true">http://samwize.com/2016/11/07/error-address-port-already-in-use/</guid>
        
        
        <category>Pitfalls</category>
        
      </item>
    
      <item>
        <title>The Thing About Responder Chain</title>
        <description>&lt;h2 id=&quot;who-are-responders&quot;&gt;Who are Responders?&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UIView&lt;/code&gt; is &lt;code class=&quot;highlighter-rouge&quot;&gt;UIResponder&lt;/code&gt; type&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UIViewController&lt;/code&gt; is also &lt;code class=&quot;highlighter-rouge&quot;&gt;UIResponder&lt;/code&gt; type&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;They are the common classes that deals with responding to touches, motion events and etcs.&lt;/p&gt;

&lt;h2 id=&quot;who-is-the-first-responder&quot;&gt;Who is the FIRST responder?&lt;/h2&gt;

&lt;p&gt;When user tap on a view, the system has to first find out &lt;em&gt;who is the first responder?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This is known as a &lt;strong&gt;hit-test phase&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;A hit testing phase starts from the lowest level (the window).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Hit test traverse up, while responder chain traverse down.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;hitTest:withEvent:&lt;/code&gt; will be called &lt;a href=&quot;http://stackoverflow.com/a/4961484/242682&quot;&gt;recursively&lt;/a&gt; into subviews (traverse up), until it reaches the &lt;strong&gt;leaf view&lt;/strong&gt;. That responder is the first.&lt;/p&gt;

&lt;h2 id=&quot;the-chain&quot;&gt;The Chain&lt;/h2&gt;

&lt;p&gt;After identifying the first responder, then the responder chain begins, starting with the first responder of course.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://developer.apple.com/library/ios/documentation/EventHandling/Conceptual/EventHandlingiPhoneOS/Art/iOS_responder_chain_2x.png&quot; alt=&quot;Responder Chain&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There are rules to finding the next responder.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The first responder passes the event to its view controller if it has one; if not, it passes to its superview.&lt;/li&gt;
  &lt;li&gt;If a view or its view controller cannot handle the event, it passes to the next responder (superview or parent view controller).&lt;/li&gt;
  &lt;li&gt;Each subsequent superview in the hierarchy follows the pattern described in the first two steps if it cannot handle the event or message.&lt;/li&gt;
  &lt;li&gt;Topmost view in the view hierarchy, or next&lt;/li&gt;
  &lt;li&gt;UIWindow, or next&lt;/li&gt;
  &lt;li&gt;Lastly, App Delegate&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;the-target-action-trick&quot;&gt;The target-action trick&lt;/h2&gt;

&lt;p&gt;You can set a target to nil, and it will traverse up the responder chain to find the action.&lt;/p&gt;

&lt;p&gt;An example from &lt;a href=&quot;http://swiftandpainless.com/utilize-the-responder-chain-for-target-action/&quot;&gt;swiftandpainless.com&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Sat, 29 Oct 2016 11:44:02 +0800</pubDate>
        <link>http://samwize.com/2016/10/29/the-thing-about-responder-chain/</link>
        <guid isPermaLink="true">http://samwize.com/2016/10/29/the-thing-about-responder-chain/</guid>
        
        
        <category>Swift</category>
        
      </item>
    
      <item>
        <title>Swift Protocol Development Guide</title>
        <description>&lt;p&gt;Not too long ago I briefly mentioned the use of protocol as the way of &lt;a href=&quot;http://samwize.com/2016/08/11/swift-is-a-protocol-oriented-programming-language/&quot;&gt;Protocol Oriented Programming&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Protocol is fantastic.&lt;/p&gt;

&lt;p&gt;Here is a guide on some of the common use of this Swift “feature”.&lt;/p&gt;

&lt;h2 id=&quot;declaring-a-protocol&quot;&gt;Declaring a Protocol&lt;/h2&gt;

&lt;p&gt;Protocol are likes classes. You need to give it a name.&lt;/p&gt;

&lt;p&gt;You will commonly find names with &lt;strong&gt;-able&lt;/strong&gt; suffixes eg. &lt;code class=&quot;highlighter-rouge&quot;&gt;TextRepresentable&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let’s use a make up example of &lt;code class=&quot;highlighter-rouge&quot;&gt;Codable&lt;/code&gt;, a protocol with a single function &lt;code class=&quot;highlighter-rouge&quot;&gt;code&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Codable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Any class now that extends &lt;code class=&quot;highlighter-rouge&quot;&gt;Codable&lt;/code&gt; will require the &lt;code class=&quot;highlighter-rouge&quot;&gt;code&lt;/code&gt; method.&lt;/p&gt;

&lt;h2 id=&quot;default-extension&quot;&gt;Default Extension&lt;/h2&gt;

&lt;p&gt;Having a default &lt;code class=&quot;highlighter-rouge&quot;&gt;extension&lt;/code&gt; makes things very convenient to use.&lt;/p&gt;

&lt;p&gt;For example, the default implementation below will always return true.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Codable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now, any type that implements the &lt;code class=&quot;highlighter-rouge&quot;&gt;Codable&lt;/code&gt; protocol get the default implementation, for FREE!&lt;/p&gt;

&lt;p&gt;Of course, you may still implement your own (and not use the default).&lt;/p&gt;

&lt;h2 id=&quot;default-extension-with-type&quot;&gt;Default Extension with Type&lt;/h2&gt;

&lt;p&gt;Now, suppose you want the default extension to use a &lt;code class=&quot;highlighter-rouge&quot;&gt;UIViewController&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;You can enforce that the default extension be of the type &lt;code class=&quot;highlighter-rouge&quot;&gt;UIViewController&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Codable&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIViewController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hidden&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// self is now a UIViewController!&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Of course, now any type that implements the &lt;code class=&quot;highlighter-rouge&quot;&gt;Codable&lt;/code&gt; protocol must be a &lt;code class=&quot;highlighter-rouge&quot;&gt;UIViewController&lt;/code&gt;, if it wants the default implementation.&lt;/p&gt;

&lt;h2 id=&quot;protocol-of-class-type&quot;&gt;Protocol of class type&lt;/h2&gt;

&lt;p&gt;You may enforce that a protocol is to be use by classes only (sorry structs and enums).&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Codable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This is needed especially for the scenario where you need a protocol to be &lt;code class=&quot;highlighter-rouge&quot;&gt;weak&lt;/code&gt; (to avoid &lt;a href=&quot;http://samwize.com/2016/08/05/reference-cycle-for-closures/&quot;&gt;retain cycle&lt;/a&gt;). Because:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;weak can only be applied to class or class-bound protocol.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;associated-types---using-self&quot;&gt;Associated Types - Using &lt;code class=&quot;highlighter-rouge&quot;&gt;Self&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Think of associated types as a placeholder for an unknown type.&lt;/p&gt;

&lt;p&gt;You can use &lt;code class=&quot;highlighter-rouge&quot;&gt;Self&lt;/code&gt; in the protocol declaration to refer to the actual type that implements it.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Codable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;So if later your &lt;code class=&quot;highlighter-rouge&quot;&gt;UIViewController&lt;/code&gt; implements it, &lt;code class=&quot;highlighter-rouge&quot;&gt;foo&lt;/code&gt; can be of the actual type.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Codable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;associated-types---using-associatedtype&quot;&gt;Associated Types - Using &lt;code class=&quot;highlighter-rouge&quot;&gt;associatedtype&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;You could in fact declare any generic type for a protocol.&lt;/p&gt;

&lt;p&gt;Here, we declare &lt;code class=&quot;highlighter-rouge&quot;&gt;Code&lt;/code&gt; as a generic type to be used in the protocol.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Codable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;associatedtype&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Code&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now, you can implement the actual type of &lt;code class=&quot;highlighter-rouge&quot;&gt;Code&lt;/code&gt;. We use &lt;code class=&quot;highlighter-rouge&quot;&gt;Int&lt;/code&gt; in this example:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ActualCodable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Codable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You can make the protocol &lt;a href=&quot;https://www.natashatherobot.com/swift-making-the-associated-type-parameter-readable-in-protocols/&quot;&gt;more readable&lt;/a&gt; if &lt;code class=&quot;highlighter-rouge&quot;&gt;foo&lt;/code&gt; does not describes your parameter name well. In the protocol declaration, you can use &lt;code class=&quot;highlighter-rouge&quot;&gt;_&lt;/code&gt; instead of naming it &lt;code class=&quot;highlighter-rouge&quot;&gt;foo&lt;/code&gt;, then in implementation use any name you want.&lt;/p&gt;

&lt;p&gt;Protocol is powerful :)&lt;/p&gt;
</description>
        <pubDate>Mon, 24 Oct 2016 15:43:06 +0800</pubDate>
        <link>http://samwize.com/2016/10/24/swift-protocol-development-guide/</link>
        <guid isPermaLink="true">http://samwize.com/2016/10/24/swift-protocol-development-guide/</guid>
        
        
        <category>Swift</category>
        
      </item>
    
      <item>
        <title>Continue Network Fetching Even When App Goes to Background</title>
        <description>&lt;h2 id=&quot;problem&quot;&gt;Problem&lt;/h2&gt;

&lt;p&gt;When an iOS app goes to background, network operations (GET/POST/Whatever) will be paused.&lt;/p&gt;

&lt;p&gt;For long running network operations, this is a problem because the the operation is paused, and the app most likely at some point in time will be killed by the OS.&lt;/p&gt;

&lt;p&gt;Then you have to start all over again.&lt;/p&gt;

&lt;h2 id=&quot;solution&quot;&gt;Solution&lt;/h2&gt;

&lt;p&gt;iOS provides a way to register your long running tasks, so that it gets another minute or more in the background.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://developer.apple.com/reference/uikit/uiapplication/1623031-beginbackgroundtaskwithexpiratio&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;beginBackgroundTaskWithExpirationHandler&lt;/code&gt;&lt;/a&gt; is the magic.&lt;/p&gt;

&lt;p&gt;Let’s see the code to using it:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;registerBackgroundTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 1. Register task with expiration handler&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;backgroundTask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sharedApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beginBackgroundTaskWithExpirationHandler&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 2. Code to handle if takes way too long&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// 3. Code for your long running task (synchronous case)&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// 4. End task&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;UIApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sharedApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;endBackgroundTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;backgroundTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;more-than-just-network-operations&quot;&gt;More than just network operations&lt;/h2&gt;

&lt;p&gt;While the situation cited in this post is on network operations, you should realize that any long running tasks can be registered.&lt;/p&gt;

&lt;p&gt;For example, if you have an image processing task that could take minutes, it can be extended as well.&lt;/p&gt;
</description>
        <pubDate>Sun, 16 Oct 2016 15:26:25 +0800</pubDate>
        <link>http://samwize.com/2016/10/16/continue-network-fetching-even-when-app-goes-to-background/</link>
        <guid isPermaLink="true">http://samwize.com/2016/10/16/continue-network-fetching-even-when-app-goes-to-background/</guid>
        
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>Should An Engineer Write Technical Blog?</title>
        <description>&lt;p&gt;Kristina Thai wrote &lt;a href=&quot;http://www.slideshare.net/KristinaThai/become-a-better-engineer-through-writing-62988419&quot;&gt;Become a Better Engineer Through Writing&lt;/a&gt;, and I felt she has made a good case on why we should all write.&lt;/p&gt;

&lt;p&gt;To be a good developer, there are some soft skills:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Communicates Well&lt;/li&gt;
  &lt;li&gt;Passion for learning&lt;/li&gt;
  &lt;li&gt;Able to teach/mentor&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Quoting from &lt;a href=&quot;http://www.shubhro.com/2014/12/27/software-engineers-should-write/&quot;&gt;Shubhro Saha&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Code and essays have a lot more in common. The product is a sequence of logical statements, bundled into modular units– whether it be functions or paragraphs.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Like good prose, good code is concise.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Bad code wastes CPU cycles; bad essays waste brain cycles.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There are 3 main channels where we could write:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Private journal&lt;/li&gt;
  &lt;li&gt;Public blog&lt;/li&gt;
  &lt;li&gt;StackOverflow&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;why-did-i-write-this-blog&quot;&gt;Why did I write this blog?&lt;/h2&gt;

&lt;p&gt;Here (&lt;a href=&quot;http://samwize.com&quot;&gt;samwize.com&lt;/a&gt;) is my public blog for my technical writing.&lt;/p&gt;

&lt;p&gt;But long before I started blogging, I have already been keeping a private journal, documenting the technical challenges I faced, the new things I learnt, the “cheatsheets” I need to refer to frequently, etc.&lt;/p&gt;

&lt;p&gt;It was until &lt;a href=&quot;http://just2me.com/2006/12/17/first-blood/&quot;&gt;2006&lt;/a&gt; (10 years ago!), that I begun writing on a public blog.&lt;/p&gt;

&lt;p&gt;I started blogging on my work with J2ME development (those were the days)!&lt;/p&gt;

&lt;p&gt;I don’t have reason to write a public blog at first, but now I am glad for these reasons:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I refer to my &lt;a href=&quot;http://samwize.com/2015/04/13/uiscrollview-content-view-constraints-autolayout/&quot;&gt;own&lt;/a&gt; &lt;a href=&quot;http://samwize.com/2016/02/28/everything-about-xcode-ui-testing-snapshot/&quot;&gt;guides&lt;/a&gt; &lt;a href=&quot;http://samwize.com/2015/10/27/implementing-nsfetchedresultscontroller-in-swift/&quot;&gt;frequently&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;I have &lt;a href=&quot;http://samwize.com/2015/11/06/guide-to-customizing-uitableview-section-header-footer/&quot;&gt;helped&lt;/a&gt; &lt;a href=&quot;http://samwize.com/2014/03/14/how-to-use-uiscrollview-with-autolayout/&quot;&gt;others&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Others have &lt;a href=&quot;http://samwize.com/2016/04/04/the-bug-to-do-with-uicollectionview-content-offset/&quot;&gt;helped&lt;/a&gt; me&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Always be a student - keep learning.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Always be a teacher - help others and become even better.&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 06 Oct 2016 16:19:30 +0800</pubDate>
        <link>http://samwize.com/2016/10/06/should-an-engineer-write-technical-blog/</link>
        <guid isPermaLink="true">http://samwize.com/2016/10/06/should-an-engineer-write-technical-blog/</guid>
        
        
        <category>Softskills</category>
        
      </item>
    
      <item>
        <title>App Review Now Bans Facebook Single Sign-On</title>
        <description>
</description>
        <pubDate>Thu, 29 Sep 2016 22:50:10 +0800</pubDate>
        <link>http://samwize.com/2016/09/29/app-review-now-bans-facebook-single-sign-on/</link>
        <guid isPermaLink="true">http://samwize.com/2016/09/29/app-review-now-bans-facebook-single-sign-on/</guid>
        
        
        <category>Apple</category>
        
      </item>
    
      <item>
        <title>Pitfall With Opening Universal Link</title>
        <description>&lt;p&gt;Universal link are familiar http links that iOS apps can now use to open apps, rather than opening the link in Safari web browser.&lt;/p&gt;

&lt;p&gt;If the app is installed, then the universal should work just fine.&lt;/p&gt;

&lt;p&gt;One pitfall is when the user &lt;strong&gt;disassociate&lt;/strong&gt; the link; as if telling iOS that the link should NOT open the app.&lt;/p&gt;

&lt;p&gt;We will explain how that happens and the solution.&lt;/p&gt;

&lt;h2 id=&quot;opening-a-universal-link&quot;&gt;Opening a Universal Link&lt;/h2&gt;

&lt;p&gt;We use Uber app as an example.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;https://m.uber.com/&quot;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;UIApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sharedApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;openURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The above will open Uber app.&lt;/p&gt;

&lt;h2 id=&quot;the-pitfall&quot;&gt;The Pitfall&lt;/h2&gt;

&lt;p&gt;The pitfall is when the user tap on the top right &lt;strong&gt;uber.com&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/uber-open-universal-link.jpg&quot; alt=&quot;Open Universal Link&quot; class=&quot;border&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Tapping on that will tell iOS that you, the user, do NOT want Uber app to be opened for the link.&lt;/p&gt;

&lt;p&gt;To be specific, it only affects the app that opened it. Other apps will still open fine. The reason is for user to &lt;em&gt;disable&lt;/em&gt; certain apps.&lt;/p&gt;

&lt;h2 id=&quot;the-solution&quot;&gt;The solution&lt;/h2&gt;

&lt;p&gt;When the universal link &lt;em&gt;doesn’t work&lt;/em&gt;, it will open Safari instead.&lt;/p&gt;

&lt;p&gt;In the webpage, you have to &lt;strong&gt;pull down&lt;/strong&gt; to reveal the &lt;em&gt;smart banner&lt;/em&gt; that will give you the option to re-open Uber app.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/uber-in-safari.jpg&quot; alt=&quot;Open Uber App, Again&quot; class=&quot;border&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Tap on &lt;strong&gt;OPEN&lt;/strong&gt;, and iOS will re-associate the universal link to work for your app.&lt;/p&gt;
</description>
        <pubDate>Mon, 26 Sep 2016 10:59:41 +0800</pubDate>
        <link>http://samwize.com/2016/09/26/pitfall-with-opening-universal-link/</link>
        <guid isPermaLink="true">http://samwize.com/2016/09/26/pitfall-with-opening-universal-link/</guid>
        
        
        <category>iOS</category>
        
      </item>
    
  </channel>
</rss>
